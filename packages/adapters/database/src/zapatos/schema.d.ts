/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type action_type = 'Add' | 'Remove';
  export namespace every {
    export type action_type = ['Add', 'Remove'];
  }
  export type transfer_status = 'CompletedFast' | 'CompletedSlow' | 'Executed' | 'Reconciled' | 'XCalled';
  export namespace every {
    export type transfer_status = ['CompletedFast', 'CompletedSlow', 'Executed', 'Reconciled', 'XCalled'];
  }

  /* --- tables --- */

  /**
   * **aggregated_roots**
   * - Table in database
   */
  export namespace aggregated_roots {
    export type Table = 'aggregated_roots';
    export interface Selectable {
      /**
      * **aggregated_roots.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **aggregated_roots.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **aggregated_roots.received_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      received_root: string;
      /**
      * **aggregated_roots.domain_index**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      domain_index: number;
    }
    export interface JSONSelectable {
      /**
      * **aggregated_roots.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **aggregated_roots.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **aggregated_roots.received_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      received_root: string;
      /**
      * **aggregated_roots.domain_index**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      domain_index: number;
    }
    export interface Whereable {
      /**
      * **aggregated_roots.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **aggregated_roots.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **aggregated_roots.received_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      received_root?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **aggregated_roots.domain_index**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      domain_index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **aggregated_roots.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **aggregated_roots.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **aggregated_roots.received_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      received_root: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **aggregated_roots.domain_index**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      domain_index: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **aggregated_roots.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **aggregated_roots.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **aggregated_roots.received_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      received_root?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **aggregated_roots.domain_index**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      domain_index?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'aggregated_roots_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **asset_balances**
   * - Table in database
   */
  export namespace asset_balances {
    export type Table = 'asset_balances';
    export interface Selectable {
      /**
      * **asset_balances.asset_canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset_canonical_id: string;
      /**
      * **asset_balances.asset_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_domain: string;
      /**
      * **asset_balances.router_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router_address: string;
      /**
      * **asset_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      balance: number;
      /**
      * **asset_balances.fees_earned**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      fees_earned: number;
      /**
      * **asset_balances.supplied**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      supplied: number;
      /**
      * **asset_balances.removed**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      removed: number;
      /**
      * **asset_balances.locked**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      locked: number;
    }
    export interface JSONSelectable {
      /**
      * **asset_balances.asset_canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset_canonical_id: string;
      /**
      * **asset_balances.asset_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_domain: string;
      /**
      * **asset_balances.router_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router_address: string;
      /**
      * **asset_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      balance: number;
      /**
      * **asset_balances.fees_earned**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      fees_earned: number;
      /**
      * **asset_balances.supplied**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      supplied: number;
      /**
      * **asset_balances.removed**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      removed: number;
      /**
      * **asset_balances.locked**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      locked: number;
    }
    export interface Whereable {
      /**
      * **asset_balances.asset_canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset_canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_balances.asset_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_balances.router_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router_address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      balance?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_balances.fees_earned**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      fees_earned?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_balances.supplied**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      supplied?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_balances.removed**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      removed?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_balances.locked**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      locked?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **asset_balances.asset_canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset_canonical_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **asset_balances.asset_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **asset_balances.router_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router_address: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **asset_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **asset_balances.fees_earned**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      fees_earned?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **asset_balances.supplied**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      supplied?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **asset_balances.removed**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      removed?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **asset_balances.locked**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      locked?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **asset_balances.asset_canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset_canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **asset_balances.asset_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **asset_balances.router_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router_address?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **asset_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **asset_balances.fees_earned**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      fees_earned?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **asset_balances.supplied**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      supplied?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **asset_balances.removed**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      removed?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **asset_balances.locked**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      locked?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'asset_balances_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **asset_prices**
   * - Table in database
   */
  export namespace asset_prices {
    export type Table = 'asset_prices';
    export interface Selectable {
      /**
      * **asset_prices.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('asset_prices_id_seq'::regclass)`
      */
      id: number;
      /**
      * **asset_prices.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id: string;
      /**
      * **asset_prices.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain: string;
      /**
      * **asset_prices.timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      timestamp: number | null;
      /**
      * **asset_prices.price**
      * - `numeric` in database
      * - Nullable, no default
      */
      price: number | null;
    }
    export interface JSONSelectable {
      /**
      * **asset_prices.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('asset_prices_id_seq'::regclass)`
      */
      id: number;
      /**
      * **asset_prices.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id: string;
      /**
      * **asset_prices.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain: string;
      /**
      * **asset_prices.timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      timestamp: number | null;
      /**
      * **asset_prices.price**
      * - `numeric` in database
      * - Nullable, no default
      */
      price: number | null;
    }
    export interface Whereable {
      /**
      * **asset_prices.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('asset_prices_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_prices.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_prices.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_prices.timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_prices.price**
      * - `numeric` in database
      * - Nullable, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **asset_prices.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('asset_prices_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **asset_prices.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **asset_prices.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **asset_prices.timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **asset_prices.price**
      * - `numeric` in database
      * - Nullable, no default
      */
      price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **asset_prices.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('asset_prices_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **asset_prices.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **asset_prices.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **asset_prices.timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **asset_prices.price**
      * - `numeric` in database
      * - Nullable, no default
      */
      price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'asset_prices_canonical_id_canonical_domain_timestamp_key' | 'asset_prices_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **assets**
   * - Table in database
   */
  export namespace assets {
    export type Table = 'assets';
    export interface Selectable {
      /**
      * **assets.local**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      local: string;
      /**
      * **assets.adopted**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      adopted: string;
      /**
      * **assets.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id: string;
      /**
      * **assets.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain: string;
      /**
      * **assets.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **assets.key**
      * - `bpchar` in database
      * - Nullable, no default
      */
      key: string | null;
      /**
      * **assets.id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      id: string | null;
      /**
      * **assets.decimal**
      * - `numeric` in database
      * - Nullable, default: `0`
      */
      decimal: number | null;
    }
    export interface JSONSelectable {
      /**
      * **assets.local**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      local: string;
      /**
      * **assets.adopted**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      adopted: string;
      /**
      * **assets.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id: string;
      /**
      * **assets.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain: string;
      /**
      * **assets.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **assets.key**
      * - `bpchar` in database
      * - Nullable, no default
      */
      key: string | null;
      /**
      * **assets.id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      id: string | null;
      /**
      * **assets.decimal**
      * - `numeric` in database
      * - Nullable, default: `0`
      */
      decimal: number | null;
    }
    export interface Whereable {
      /**
      * **assets.local**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      local?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **assets.adopted**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      adopted?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **assets.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **assets.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **assets.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **assets.key**
      * - `bpchar` in database
      * - Nullable, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **assets.id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **assets.decimal**
      * - `numeric` in database
      * - Nullable, default: `0`
      */
      decimal?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **assets.local**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      local: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **assets.adopted**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      adopted: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **assets.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **assets.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **assets.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **assets.key**
      * - `bpchar` in database
      * - Nullable, no default
      */
      key?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **assets.id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **assets.decimal**
      * - `numeric` in database
      * - Nullable, default: `0`
      */
      decimal?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **assets.local**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      local?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **assets.adopted**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      adopted?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **assets.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **assets.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **assets.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **assets.key**
      * - `bpchar` in database
      * - Nullable, no default
      */
      key?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **assets.id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **assets.decimal**
      * - `numeric` in database
      * - Nullable, default: `0`
      */
      decimal?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'assets_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **checkpoints**
   * - Table in database
   */
  export namespace checkpoints {
    export type Table = 'checkpoints';
    export interface Selectable {
      /**
      * **checkpoints.check_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      check_name: string;
      /**
      * **checkpoints.check_point**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      check_point: number;
    }
    export interface JSONSelectable {
      /**
      * **checkpoints.check_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      check_name: string;
      /**
      * **checkpoints.check_point**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      check_point: number;
    }
    export interface Whereable {
      /**
      * **checkpoints.check_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      check_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **checkpoints.check_point**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      check_point?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **checkpoints.check_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      check_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **checkpoints.check_point**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      check_point?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **checkpoints.check_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      check_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **checkpoints.check_point**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      check_point?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'checkpoints_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **daily_router_tvl**
   * - Table in database
   */
  export namespace daily_router_tvl {
    export type Table = 'daily_router_tvl';
    export interface Selectable {
      /**
      * **daily_router_tvl.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **daily_router_tvl.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **daily_router_tvl.asset**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset: string;
      /**
      * **daily_router_tvl.router**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router: string;
      /**
      * **daily_router_tvl.day**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      day: Date;
      /**
      * **daily_router_tvl.balance**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      balance: string;
    }
    export interface JSONSelectable {
      /**
      * **daily_router_tvl.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **daily_router_tvl.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **daily_router_tvl.asset**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset: string;
      /**
      * **daily_router_tvl.router**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router: string;
      /**
      * **daily_router_tvl.day**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      day: db.DateString;
      /**
      * **daily_router_tvl.balance**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      balance: string;
    }
    export interface Whereable {
      /**
      * **daily_router_tvl.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_router_tvl.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_router_tvl.asset**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_router_tvl.router**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_router_tvl.day**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      day?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_router_tvl.balance**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      balance?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **daily_router_tvl.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **daily_router_tvl.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **daily_router_tvl.asset**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **daily_router_tvl.router**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **daily_router_tvl.day**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      day: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment;
      /**
      * **daily_router_tvl.balance**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      balance: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **daily_router_tvl.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **daily_router_tvl.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **daily_router_tvl.asset**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **daily_router_tvl.router**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **daily_router_tvl.day**
      * - `date` in database
      * - `NOT NULL`, no default
      */
      day?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment>;
      /**
      * **daily_router_tvl.balance**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      balance?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'daily_router_tvl_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **daily_swap_tvl**
   * - View in database
   */
  export namespace daily_swap_tvl {
    export type Table = 'daily_swap_tvl';
    export interface Selectable {
      /**
      * **daily_swap_tvl.pool_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      pool_id: string | null;
      /**
      * **daily_swap_tvl.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain: string | null;
      /**
      * **daily_swap_tvl.day**
      * - `date` in database
      * - Nullable, no default
      */
      day: Date | null;
      /**
      * **daily_swap_tvl.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances: number[] | null;
      /**
      * **daily_swap_tvl.total_fee**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_fee: number | null;
      /**
      * **daily_swap_tvl.total_vol**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_vol: number | null;
      /**
      * **daily_swap_tvl.total_tvl**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_tvl: number | null;
    }
    export interface JSONSelectable {
      /**
      * **daily_swap_tvl.pool_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      pool_id: string | null;
      /**
      * **daily_swap_tvl.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain: string | null;
      /**
      * **daily_swap_tvl.day**
      * - `date` in database
      * - Nullable, no default
      */
      day: db.DateString | null;
      /**
      * **daily_swap_tvl.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances: number[] | null;
      /**
      * **daily_swap_tvl.total_fee**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_fee: number | null;
      /**
      * **daily_swap_tvl.total_vol**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_vol: number | null;
      /**
      * **daily_swap_tvl.total_tvl**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_tvl: number | null;
    }
    export interface Whereable {
      /**
      * **daily_swap_tvl.pool_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      pool_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_swap_tvl.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_swap_tvl.day**
      * - `date` in database
      * - Nullable, no default
      */
      day?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_swap_tvl.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_swap_tvl.total_fee**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_fee?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_swap_tvl.total_vol**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_vol?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_swap_tvl.total_tvl**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_tvl?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **daily_swap_volume**
   * - View in database
   */
  export namespace daily_swap_volume {
    export type Table = 'daily_swap_volume';
    export interface Selectable {
      /**
      * **daily_swap_volume.pool_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      pool_id: string | null;
      /**
      * **daily_swap_volume.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain: string | null;
      /**
      * **daily_swap_volume.swap_day**
      * - `date` in database
      * - Nullable, no default
      */
      swap_day: Date | null;
      /**
      * **daily_swap_volume.volume**
      * - `numeric` in database
      * - Nullable, no default
      */
      volume: number | null;
      /**
      * **daily_swap_volume.swap_count**
      * - `int8` in database
      * - Nullable, no default
      */
      swap_count: db.Int8String | null;
    }
    export interface JSONSelectable {
      /**
      * **daily_swap_volume.pool_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      pool_id: string | null;
      /**
      * **daily_swap_volume.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain: string | null;
      /**
      * **daily_swap_volume.swap_day**
      * - `date` in database
      * - Nullable, no default
      */
      swap_day: db.DateString | null;
      /**
      * **daily_swap_volume.volume**
      * - `numeric` in database
      * - Nullable, no default
      */
      volume: number | null;
      /**
      * **daily_swap_volume.swap_count**
      * - `int8` in database
      * - Nullable, no default
      */
      swap_count: number | null;
    }
    export interface Whereable {
      /**
      * **daily_swap_volume.pool_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      pool_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_swap_volume.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_swap_volume.swap_day**
      * - `date` in database
      * - Nullable, no default
      */
      swap_day?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_swap_volume.volume**
      * - `numeric` in database
      * - Nullable, no default
      */
      volume?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_swap_volume.swap_count**
      * - `int8` in database
      * - Nullable, no default
      */
      swap_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **daily_transfer_metrics**
   * - View in database
   */
  export namespace daily_transfer_metrics {
    export type Table = 'daily_transfer_metrics';
    export interface Selectable {
      /**
      * **daily_transfer_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date: Date | null;
      /**
      * **daily_transfer_metrics.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **daily_transfer_metrics.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **daily_transfer_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count: db.Int8String | null;
      /**
      * **daily_transfer_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count: db.Int8String | null;
      /**
      * **daily_transfer_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count: db.Int8String | null;
      /**
      * **daily_transfer_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count: db.Int8String | null;
      /**
      * **daily_transfer_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count: db.Int8String | null;
      /**
      * **daily_transfer_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs: number | null;
      /**
      * **daily_transfer_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs: number | null;
      /**
      * **daily_transfer_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs: number | null;
      /**
      * **daily_transfer_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs: number | null;
    }
    export interface JSONSelectable {
      /**
      * **daily_transfer_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date: db.DateString | null;
      /**
      * **daily_transfer_metrics.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **daily_transfer_metrics.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **daily_transfer_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count: number | null;
      /**
      * **daily_transfer_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count: number | null;
      /**
      * **daily_transfer_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count: number | null;
      /**
      * **daily_transfer_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count: number | null;
      /**
      * **daily_transfer_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count: number | null;
      /**
      * **daily_transfer_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs: number | null;
      /**
      * **daily_transfer_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs: number | null;
      /**
      * **daily_transfer_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs: number | null;
      /**
      * **daily_transfer_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs: number | null;
    }
    export interface Whereable {
      /**
      * **daily_transfer_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_metrics.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_metrics.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **daily_transfer_volume**
   * - Materialized view in database
   */
  export namespace daily_transfer_volume {
    export type Table = 'daily_transfer_volume';
    export interface Selectable {
      /**
      * **daily_transfer_volume.status**
      * - `transfer_status` in database
      * - Materialized view column
      */
      status: transfer_status | null;
      /**
      * **daily_transfer_volume.transfer_date**
      * - `date` in database
      * - Materialized view column
      */
      transfer_date: Date | null;
      /**
      * **daily_transfer_volume.origin_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      origin_chain: string | null;
      /**
      * **daily_transfer_volume.destination_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      destination_chain: string | null;
      /**
      * **daily_transfer_volume.router**
      * - `text` in database
      * - Materialized view column
      */
      router: string | null;
      /**
      * **daily_transfer_volume.asset**
      * - `bpchar` in database
      * - Materialized view column
      */
      asset: string | null;
      /**
      * **daily_transfer_volume.volume**
      * - `numeric` in database
      * - Materialized view column
      */
      volume: number | null;
      /**
      * **daily_transfer_volume.avg_price**
      * - `numeric` in database
      * - Materialized view column
      */
      avg_price: number | null;
      /**
      * **daily_transfer_volume.usd_volume**
      * - `numeric` in database
      * - Materialized view column
      */
      usd_volume: number | null;
      /**
      * **daily_transfer_volume.id**
      * - `int8` in database
      * - Materialized view column
      */
      id: db.Int8String | null;
    }
    export interface JSONSelectable {
      /**
      * **daily_transfer_volume.status**
      * - `transfer_status` in database
      * - Materialized view column
      */
      status: transfer_status | null;
      /**
      * **daily_transfer_volume.transfer_date**
      * - `date` in database
      * - Materialized view column
      */
      transfer_date: db.DateString | null;
      /**
      * **daily_transfer_volume.origin_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      origin_chain: string | null;
      /**
      * **daily_transfer_volume.destination_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      destination_chain: string | null;
      /**
      * **daily_transfer_volume.router**
      * - `text` in database
      * - Materialized view column
      */
      router: string | null;
      /**
      * **daily_transfer_volume.asset**
      * - `bpchar` in database
      * - Materialized view column
      */
      asset: string | null;
      /**
      * **daily_transfer_volume.volume**
      * - `numeric` in database
      * - Materialized view column
      */
      volume: number | null;
      /**
      * **daily_transfer_volume.avg_price**
      * - `numeric` in database
      * - Materialized view column
      */
      avg_price: number | null;
      /**
      * **daily_transfer_volume.usd_volume**
      * - `numeric` in database
      * - Materialized view column
      */
      usd_volume: number | null;
      /**
      * **daily_transfer_volume.id**
      * - `int8` in database
      * - Materialized view column
      */
      id: number | null;
    }
    export interface Whereable {
      /**
      * **daily_transfer_volume.status**
      * - `transfer_status` in database
      * - Materialized view column
      */
      status?: transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_volume.transfer_date**
      * - `date` in database
      * - Materialized view column
      */
      transfer_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_volume.origin_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      origin_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_volume.destination_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      destination_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_volume.router**
      * - `text` in database
      * - Materialized view column
      */
      router?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_volume.asset**
      * - `bpchar` in database
      * - Materialized view column
      */
      asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_volume.volume**
      * - `numeric` in database
      * - Materialized view column
      */
      volume?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_volume.avg_price**
      * - `numeric` in database
      * - Materialized view column
      */
      avg_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_volume.usd_volume**
      * - `numeric` in database
      * - Materialized view column
      */
      usd_volume?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **daily_transfer_volume.id**
      * - `int8` in database
      * - Materialized view column
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = 'daily_transfer_volume_id_idx';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **hourly_swap_volume**
   * - View in database
   */
  export namespace hourly_swap_volume {
    export type Table = 'hourly_swap_volume';
    export interface Selectable {
      /**
      * **hourly_swap_volume.pool_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      pool_id: string | null;
      /**
      * **hourly_swap_volume.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain: string | null;
      /**
      * **hourly_swap_volume.swap_hour**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      swap_hour: Date | null;
      /**
      * **hourly_swap_volume.volume**
      * - `numeric` in database
      * - Nullable, no default
      */
      volume: number | null;
      /**
      * **hourly_swap_volume.swap_count**
      * - `int8` in database
      * - Nullable, no default
      */
      swap_count: db.Int8String | null;
    }
    export interface JSONSelectable {
      /**
      * **hourly_swap_volume.pool_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      pool_id: string | null;
      /**
      * **hourly_swap_volume.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain: string | null;
      /**
      * **hourly_swap_volume.swap_hour**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      swap_hour: db.TimestampTzString | null;
      /**
      * **hourly_swap_volume.volume**
      * - `numeric` in database
      * - Nullable, no default
      */
      volume: number | null;
      /**
      * **hourly_swap_volume.swap_count**
      * - `int8` in database
      * - Nullable, no default
      */
      swap_count: number | null;
    }
    export interface Whereable {
      /**
      * **hourly_swap_volume.pool_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      pool_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_swap_volume.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_swap_volume.swap_hour**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      swap_hour?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_swap_volume.volume**
      * - `numeric` in database
      * - Nullable, no default
      */
      volume?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_swap_volume.swap_count**
      * - `int8` in database
      * - Nullable, no default
      */
      swap_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **hourly_transfer_metrics**
   * - View in database
   */
  export namespace hourly_transfer_metrics {
    export type Table = 'hourly_transfer_metrics';
    export interface Selectable {
      /**
      * **hourly_transfer_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date: Date | null;
      /**
      * **hourly_transfer_metrics.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **hourly_transfer_metrics.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **hourly_transfer_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count: db.Int8String | null;
      /**
      * **hourly_transfer_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count: db.Int8String | null;
      /**
      * **hourly_transfer_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count: db.Int8String | null;
      /**
      * **hourly_transfer_metrics.xcalled_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      xcalled_transfer_count: db.Int8String | null;
      /**
      * **hourly_transfer_metrics.executed_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      executed_transfer_count: db.Int8String | null;
      /**
      * **hourly_transfer_metrics.reconciled_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      reconciled_transfer_count: db.Int8String | null;
      /**
      * **hourly_transfer_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count: db.Int8String | null;
      /**
      * **hourly_transfer_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count: db.Int8String | null;
      /**
      * **hourly_transfer_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs: number | null;
      /**
      * **hourly_transfer_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs: number | null;
      /**
      * **hourly_transfer_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs: number | null;
      /**
      * **hourly_transfer_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs: number | null;
    }
    export interface JSONSelectable {
      /**
      * **hourly_transfer_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date: db.DateString | null;
      /**
      * **hourly_transfer_metrics.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **hourly_transfer_metrics.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **hourly_transfer_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count: number | null;
      /**
      * **hourly_transfer_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count: number | null;
      /**
      * **hourly_transfer_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count: number | null;
      /**
      * **hourly_transfer_metrics.xcalled_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      xcalled_transfer_count: number | null;
      /**
      * **hourly_transfer_metrics.executed_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      executed_transfer_count: number | null;
      /**
      * **hourly_transfer_metrics.reconciled_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      reconciled_transfer_count: number | null;
      /**
      * **hourly_transfer_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count: number | null;
      /**
      * **hourly_transfer_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count: number | null;
      /**
      * **hourly_transfer_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs: number | null;
      /**
      * **hourly_transfer_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs: number | null;
      /**
      * **hourly_transfer_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs: number | null;
      /**
      * **hourly_transfer_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs: number | null;
    }
    export interface Whereable {
      /**
      * **hourly_transfer_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.xcalled_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      xcalled_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.executed_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      executed_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.reconciled_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      reconciled_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **hourly_transfer_volume**
   * - Materialized view in database
   */
  export namespace hourly_transfer_volume {
    export type Table = 'hourly_transfer_volume';
    export interface Selectable {
      /**
      * **hourly_transfer_volume.status**
      * - `transfer_status` in database
      * - Materialized view column
      */
      status: transfer_status | null;
      /**
      * **hourly_transfer_volume.transfer_hour**
      * - `timestamptz` in database
      * - Materialized view column
      */
      transfer_hour: Date | null;
      /**
      * **hourly_transfer_volume.origin_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      origin_chain: string | null;
      /**
      * **hourly_transfer_volume.destination_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      destination_chain: string | null;
      /**
      * **hourly_transfer_volume.router**
      * - `text` in database
      * - Materialized view column
      */
      router: string | null;
      /**
      * **hourly_transfer_volume.asset**
      * - `bpchar` in database
      * - Materialized view column
      */
      asset: string | null;
      /**
      * **hourly_transfer_volume.volume**
      * - `numeric` in database
      * - Materialized view column
      */
      volume: number | null;
      /**
      * **hourly_transfer_volume.avg_price**
      * - `numeric` in database
      * - Materialized view column
      */
      avg_price: number | null;
      /**
      * **hourly_transfer_volume.usd_volume**
      * - `numeric` in database
      * - Materialized view column
      */
      usd_volume: number | null;
      /**
      * **hourly_transfer_volume.id**
      * - `int8` in database
      * - Materialized view column
      */
      id: db.Int8String | null;
    }
    export interface JSONSelectable {
      /**
      * **hourly_transfer_volume.status**
      * - `transfer_status` in database
      * - Materialized view column
      */
      status: transfer_status | null;
      /**
      * **hourly_transfer_volume.transfer_hour**
      * - `timestamptz` in database
      * - Materialized view column
      */
      transfer_hour: db.TimestampTzString | null;
      /**
      * **hourly_transfer_volume.origin_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      origin_chain: string | null;
      /**
      * **hourly_transfer_volume.destination_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      destination_chain: string | null;
      /**
      * **hourly_transfer_volume.router**
      * - `text` in database
      * - Materialized view column
      */
      router: string | null;
      /**
      * **hourly_transfer_volume.asset**
      * - `bpchar` in database
      * - Materialized view column
      */
      asset: string | null;
      /**
      * **hourly_transfer_volume.volume**
      * - `numeric` in database
      * - Materialized view column
      */
      volume: number | null;
      /**
      * **hourly_transfer_volume.avg_price**
      * - `numeric` in database
      * - Materialized view column
      */
      avg_price: number | null;
      /**
      * **hourly_transfer_volume.usd_volume**
      * - `numeric` in database
      * - Materialized view column
      */
      usd_volume: number | null;
      /**
      * **hourly_transfer_volume.id**
      * - `int8` in database
      * - Materialized view column
      */
      id: number | null;
    }
    export interface Whereable {
      /**
      * **hourly_transfer_volume.status**
      * - `transfer_status` in database
      * - Materialized view column
      */
      status?: transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_volume.transfer_hour**
      * - `timestamptz` in database
      * - Materialized view column
      */
      transfer_hour?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_volume.origin_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      origin_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_volume.destination_chain**
      * - `varchar` in database
      * - Materialized view column
      */
      destination_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_volume.router**
      * - `text` in database
      * - Materialized view column
      */
      router?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_volume.asset**
      * - `bpchar` in database
      * - Materialized view column
      */
      asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_volume.volume**
      * - `numeric` in database
      * - Materialized view column
      */
      volume?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_volume.avg_price**
      * - `numeric` in database
      * - Materialized view column
      */
      avg_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_volume.usd_volume**
      * - `numeric` in database
      * - Materialized view column
      */
      usd_volume?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **hourly_transfer_volume.id**
      * - `int8` in database
      * - Materialized view column
      */
      id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = 'hourly_transfer_volume_id_idx';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **merkle_cache**
   * - Table in database
   */
  export namespace merkle_cache {
    export type Table = 'merkle_cache';
    export interface Selectable {
      /**
      * **merkle_cache.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **merkle_cache.domain_path**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      domain_path: string;
      /**
      * **merkle_cache.tree_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      tree_root: string;
    }
    export interface JSONSelectable {
      /**
      * **merkle_cache.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **merkle_cache.domain_path**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      domain_path: string;
      /**
      * **merkle_cache.tree_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      tree_root: string;
    }
    export interface Whereable {
      /**
      * **merkle_cache.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **merkle_cache.domain_path**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      domain_path?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **merkle_cache.tree_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      tree_root?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **merkle_cache.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **merkle_cache.domain_path**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      domain_path: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **merkle_cache.tree_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      tree_root: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **merkle_cache.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **merkle_cache.domain_path**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      domain_path?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **merkle_cache.tree_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      tree_root?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'merkle_cache_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **messages**
   * - Table in database
   */
  export namespace messages {
    export type Table = 'messages';
    export interface Selectable {
      /**
      * **messages.leaf**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      leaf: string;
      /**
      * **messages.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain: string;
      /**
      * **messages.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain: string | null;
      /**
      * **messages.index**
      * - `numeric` in database
      * - Nullable, no default
      */
      index: number | null;
      /**
      * **messages.root**
      * - `bpchar` in database
      * - Nullable, no default
      */
      root: string | null;
      /**
      * **messages.message**
      * - `varchar` in database
      * - Nullable, no default
      */
      message: string | null;
      /**
      * **messages.processed**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      processed: boolean | null;
      /**
      * **messages.return_data**
      * - `varchar` in database
      * - Nullable, no default
      */
      return_data: string | null;
      /**
      * **messages.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id: string | null;
    }
    export interface JSONSelectable {
      /**
      * **messages.leaf**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      leaf: string;
      /**
      * **messages.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain: string;
      /**
      * **messages.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain: string | null;
      /**
      * **messages.index**
      * - `numeric` in database
      * - Nullable, no default
      */
      index: number | null;
      /**
      * **messages.root**
      * - `bpchar` in database
      * - Nullable, no default
      */
      root: string | null;
      /**
      * **messages.message**
      * - `varchar` in database
      * - Nullable, no default
      */
      message: string | null;
      /**
      * **messages.processed**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      processed: boolean | null;
      /**
      * **messages.return_data**
      * - `varchar` in database
      * - Nullable, no default
      */
      return_data: string | null;
      /**
      * **messages.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id: string | null;
    }
    export interface Whereable {
      /**
      * **messages.leaf**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      leaf?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messages.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messages.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messages.index**
      * - `numeric` in database
      * - Nullable, no default
      */
      index?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messages.root**
      * - `bpchar` in database
      * - Nullable, no default
      */
      root?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messages.message**
      * - `varchar` in database
      * - Nullable, no default
      */
      message?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messages.processed**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      processed?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messages.return_data**
      * - `varchar` in database
      * - Nullable, no default
      */
      return_data?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **messages.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **messages.leaf**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      leaf: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **messages.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **messages.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **messages.index**
      * - `numeric` in database
      * - Nullable, no default
      */
      index?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **messages.root**
      * - `bpchar` in database
      * - Nullable, no default
      */
      root?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **messages.message**
      * - `varchar` in database
      * - Nullable, no default
      */
      message?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **messages.processed**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      processed?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **messages.return_data**
      * - `varchar` in database
      * - Nullable, no default
      */
      return_data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **messages.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **messages.leaf**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      leaf?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **messages.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **messages.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **messages.index**
      * - `numeric` in database
      * - Nullable, no default
      */
      index?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **messages.root**
      * - `bpchar` in database
      * - Nullable, no default
      */
      root?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **messages.message**
      * - `varchar` in database
      * - Nullable, no default
      */
      message?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **messages.processed**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      processed?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **messages.return_data**
      * - `varchar` in database
      * - Nullable, no default
      */
      return_data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **messages.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'messages_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **propagated_roots**
   * - Table in database
   */
  export namespace propagated_roots {
    export type Table = 'propagated_roots';
    export interface Selectable {
      /**
      * **propagated_roots.id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **propagated_roots.aggregate_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      aggregate_root: string;
      /**
      * **propagated_roots.leaf_count**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      leaf_count: number;
      /**
      * **propagated_roots.domains_hash**
      * - `text` in database
      * - Nullable, no default
      */
      domains_hash: string | null;
    }
    export interface JSONSelectable {
      /**
      * **propagated_roots.id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **propagated_roots.aggregate_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      aggregate_root: string;
      /**
      * **propagated_roots.leaf_count**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      leaf_count: number;
      /**
      * **propagated_roots.domains_hash**
      * - `text` in database
      * - Nullable, no default
      */
      domains_hash: string | null;
    }
    export interface Whereable {
      /**
      * **propagated_roots.id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **propagated_roots.aggregate_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      aggregate_root?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **propagated_roots.leaf_count**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      leaf_count?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **propagated_roots.domains_hash**
      * - `text` in database
      * - Nullable, no default
      */
      domains_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **propagated_roots.id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **propagated_roots.aggregate_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      aggregate_root: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **propagated_roots.leaf_count**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      leaf_count: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **propagated_roots.domains_hash**
      * - `text` in database
      * - Nullable, no default
      */
      domains_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **propagated_roots.id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **propagated_roots.aggregate_root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      aggregate_root?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **propagated_roots.leaf_count**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      leaf_count?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **propagated_roots.domains_hash**
      * - `text` in database
      * - Nullable, no default
      */
      domains_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'propagated_roots_aggregate_root_key' | 'propagated_roots_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **received_aggregate_roots**
   * - Table in database
   */
  export namespace received_aggregate_roots {
    export type Table = 'received_aggregate_roots';
    export interface Selectable {
      /**
      * **received_aggregate_roots.id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **received_aggregate_roots.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **received_aggregate_roots.root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      root: string;
      /**
      * **received_aggregate_roots.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number;
    }
    export interface JSONSelectable {
      /**
      * **received_aggregate_roots.id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **received_aggregate_roots.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **received_aggregate_roots.root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      root: string;
      /**
      * **received_aggregate_roots.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number;
    }
    export interface Whereable {
      /**
      * **received_aggregate_roots.id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **received_aggregate_roots.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **received_aggregate_roots.root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      root?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **received_aggregate_roots.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **received_aggregate_roots.id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **received_aggregate_roots.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **received_aggregate_roots.root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      root: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **received_aggregate_roots.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **received_aggregate_roots.id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **received_aggregate_roots.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **received_aggregate_roots.root**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      root?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **received_aggregate_roots.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'received_aggregate_roots_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **root_messages**
   * - Table in database
   */
  export namespace root_messages {
    export type Table = 'root_messages';
    export interface Selectable {
      /**
      * **root_messages.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **root_messages.spoke_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      spoke_domain: string | null;
      /**
      * **root_messages.hub_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      hub_domain: string | null;
      /**
      * **root_messages.root**
      * - `bpchar` in database
      * - Nullable, no default
      */
      root: string | null;
      /**
      * **root_messages.caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      caller: string | null;
      /**
      * **root_messages.sent_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      sent_transaction_hash: string | null;
      /**
      * **root_messages.sent_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      sent_timestamp: number | null;
      /**
      * **root_messages.gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      gas_price: number | null;
      /**
      * **root_messages.gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      gas_limit: number | null;
      /**
      * **root_messages.block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      block_number: number | null;
      /**
      * **root_messages.processed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      processed: boolean;
      /**
      * **root_messages.processed_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      processed_transaction_hash: string | null;
      /**
      * **root_messages.leaf_count**
      * - `numeric` in database
      * - Nullable, no default
      */
      leaf_count: number | null;
      /**
      * **root_messages.sent_timestamp_secs**
      * - `int4` in database
      * - Nullable, no default
      */
      sent_timestamp_secs: number | null;
      /**
      * **root_messages.sent_task_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      sent_task_id: string | null;
      /**
      * **root_messages.relayer_type**
      * - `text` in database
      * - Nullable, no default
      */
      relayer_type: string | null;
    }
    export interface JSONSelectable {
      /**
      * **root_messages.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **root_messages.spoke_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      spoke_domain: string | null;
      /**
      * **root_messages.hub_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      hub_domain: string | null;
      /**
      * **root_messages.root**
      * - `bpchar` in database
      * - Nullable, no default
      */
      root: string | null;
      /**
      * **root_messages.caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      caller: string | null;
      /**
      * **root_messages.sent_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      sent_transaction_hash: string | null;
      /**
      * **root_messages.sent_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      sent_timestamp: number | null;
      /**
      * **root_messages.gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      gas_price: number | null;
      /**
      * **root_messages.gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      gas_limit: number | null;
      /**
      * **root_messages.block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      block_number: number | null;
      /**
      * **root_messages.processed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      processed: boolean;
      /**
      * **root_messages.processed_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      processed_transaction_hash: string | null;
      /**
      * **root_messages.leaf_count**
      * - `numeric` in database
      * - Nullable, no default
      */
      leaf_count: number | null;
      /**
      * **root_messages.sent_timestamp_secs**
      * - `int4` in database
      * - Nullable, no default
      */
      sent_timestamp_secs: number | null;
      /**
      * **root_messages.sent_task_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      sent_task_id: string | null;
      /**
      * **root_messages.relayer_type**
      * - `text` in database
      * - Nullable, no default
      */
      relayer_type: string | null;
    }
    export interface Whereable {
      /**
      * **root_messages.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.spoke_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      spoke_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.hub_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      hub_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.root**
      * - `bpchar` in database
      * - Nullable, no default
      */
      root?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.sent_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      sent_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.sent_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      sent_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      gas_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      gas_limit?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.processed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      processed?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.processed_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      processed_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.leaf_count**
      * - `numeric` in database
      * - Nullable, no default
      */
      leaf_count?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.sent_timestamp_secs**
      * - `int4` in database
      * - Nullable, no default
      */
      sent_timestamp_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.sent_task_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      sent_task_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **root_messages.relayer_type**
      * - `text` in database
      * - Nullable, no default
      */
      relayer_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **root_messages.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **root_messages.spoke_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      spoke_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.hub_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      hub_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.root**
      * - `bpchar` in database
      * - Nullable, no default
      */
      root?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.sent_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      sent_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.sent_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      sent_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      gas_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      gas_limit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.processed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      processed?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.processed_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      processed_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.leaf_count**
      * - `numeric` in database
      * - Nullable, no default
      */
      leaf_count?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.sent_timestamp_secs**
      * - `int4` in database
      * - Nullable, no default
      */
      sent_timestamp_secs?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.sent_task_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      sent_task_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **root_messages.relayer_type**
      * - `text` in database
      * - Nullable, no default
      */
      relayer_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **root_messages.id**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **root_messages.spoke_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      spoke_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.hub_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      hub_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.root**
      * - `bpchar` in database
      * - Nullable, no default
      */
      root?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.sent_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      sent_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.sent_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      sent_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      gas_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      gas_limit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.processed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      processed?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.processed_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      processed_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.leaf_count**
      * - `numeric` in database
      * - Nullable, no default
      */
      leaf_count?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.sent_timestamp_secs**
      * - `int4` in database
      * - Nullable, no default
      */
      sent_timestamp_secs?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.sent_task_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      sent_task_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **root_messages.relayer_type**
      * - `text` in database
      * - Nullable, no default
      */
      relayer_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'root_messages_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **router_liquidity**
   * - View in database
   */
  export namespace router_liquidity {
    export type Table = 'router_liquidity';
    export interface Selectable {
      /**
      * **router_liquidity.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain: string | null;
      /**
      * **router_liquidity.local**
      * - `bpchar` in database
      * - Nullable, no default
      */
      local: string | null;
      /**
      * **router_liquidity.adopted**
      * - `bpchar` in database
      * - Nullable, no default
      */
      adopted: string | null;
      /**
      * **router_liquidity.total_balance**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_balance: number | null;
      /**
      * **router_liquidity.total_locked**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_locked: number | null;
      /**
      * **router_liquidity.total_supplied**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_supplied: number | null;
      /**
      * **router_liquidity.total_removed**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_removed: number | null;
      /**
      * **router_liquidity.avg_usd_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      avg_usd_price: number | null;
      /**
      * **router_liquidity.total_balance_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_balance_usd: number | null;
      /**
      * **router_liquidity.total_locked_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_locked_usd: number | null;
      /**
      * **router_liquidity.total_supplied_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_supplied_usd: number | null;
      /**
      * **router_liquidity.total_removed_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_removed_usd: number | null;
    }
    export interface JSONSelectable {
      /**
      * **router_liquidity.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain: string | null;
      /**
      * **router_liquidity.local**
      * - `bpchar` in database
      * - Nullable, no default
      */
      local: string | null;
      /**
      * **router_liquidity.adopted**
      * - `bpchar` in database
      * - Nullable, no default
      */
      adopted: string | null;
      /**
      * **router_liquidity.total_balance**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_balance: number | null;
      /**
      * **router_liquidity.total_locked**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_locked: number | null;
      /**
      * **router_liquidity.total_supplied**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_supplied: number | null;
      /**
      * **router_liquidity.total_removed**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_removed: number | null;
      /**
      * **router_liquidity.avg_usd_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      avg_usd_price: number | null;
      /**
      * **router_liquidity.total_balance_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_balance_usd: number | null;
      /**
      * **router_liquidity.total_locked_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_locked_usd: number | null;
      /**
      * **router_liquidity.total_supplied_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_supplied_usd: number | null;
      /**
      * **router_liquidity.total_removed_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_removed_usd: number | null;
    }
    export interface Whereable {
      /**
      * **router_liquidity.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_liquidity.local**
      * - `bpchar` in database
      * - Nullable, no default
      */
      local?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_liquidity.adopted**
      * - `bpchar` in database
      * - Nullable, no default
      */
      adopted?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_liquidity.total_balance**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_balance?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_liquidity.total_locked**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_locked?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_liquidity.total_supplied**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_supplied?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_liquidity.total_removed**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_removed?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_liquidity.avg_usd_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      avg_usd_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_liquidity.total_balance_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_balance_usd?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_liquidity.total_locked_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_locked_usd?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_liquidity.total_supplied_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_supplied_usd?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_liquidity.total_removed_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      total_removed_usd?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **router_tvl**
   * - View in database
   */
  export namespace router_tvl {
    export type Table = 'router_tvl';
    export interface Selectable {
      /**
      * **router_tvl.latest_transfer_day**
      * - `date` in database
      * - Nullable, no default
      */
      latest_transfer_day: Date | null;
      /**
      * **router_tvl.asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      asset: string | null;
      /**
      * **router_tvl.tvl**
      * - `numeric` in database
      * - Nullable, no default
      */
      tvl: number | null;
      /**
      * **router_tvl.price**
      * - `numeric` in database
      * - Nullable, no default
      */
      price: number | null;
      /**
      * **router_tvl.tvl_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      tvl_usd: number | null;
    }
    export interface JSONSelectable {
      /**
      * **router_tvl.latest_transfer_day**
      * - `date` in database
      * - Nullable, no default
      */
      latest_transfer_day: db.DateString | null;
      /**
      * **router_tvl.asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      asset: string | null;
      /**
      * **router_tvl.tvl**
      * - `numeric` in database
      * - Nullable, no default
      */
      tvl: number | null;
      /**
      * **router_tvl.price**
      * - `numeric` in database
      * - Nullable, no default
      */
      price: number | null;
      /**
      * **router_tvl.tvl_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      tvl_usd: number | null;
    }
    export interface Whereable {
      /**
      * **router_tvl.latest_transfer_day**
      * - `date` in database
      * - Nullable, no default
      */
      latest_transfer_day?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_tvl.asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_tvl.tvl**
      * - `numeric` in database
      * - Nullable, no default
      */
      tvl?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_tvl.price**
      * - `numeric` in database
      * - Nullable, no default
      */
      price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **router_tvl.tvl_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      tvl_usd?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **routers**
   * - Table in database
   */
  export namespace routers {
    export type Table = 'routers';
    export interface Selectable {
      /**
      * **routers.address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      address: string;
    }
    export interface JSONSelectable {
      /**
      * **routers.address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      address: string;
    }
    export interface Whereable {
      /**
      * **routers.address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **routers.address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      address: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **routers.address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      address?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'routers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **routers_with_balances**
   * - View in database
   */
  export namespace routers_with_balances {
    export type Table = 'routers_with_balances';
    export interface Selectable {
      /**
      * **routers_with_balances.address**
      * - `bpchar` in database
      * - Nullable, no default
      */
      address: string | null;
      /**
      * **routers_with_balances.asset_canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      asset_canonical_id: string | null;
      /**
      * **routers_with_balances.asset_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      asset_domain: string | null;
      /**
      * **routers_with_balances.router_address**
      * - `bpchar` in database
      * - Nullable, no default
      */
      router_address: string | null;
      /**
      * **routers_with_balances.balance**
      * - `numeric` in database
      * - Nullable, no default
      */
      balance: number | null;
      /**
      * **routers_with_balances.local**
      * - `bpchar` in database
      * - Nullable, no default
      */
      local: string | null;
      /**
      * **routers_with_balances.adopted**
      * - `bpchar` in database
      * - Nullable, no default
      */
      adopted: string | null;
      /**
      * **routers_with_balances.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id: string | null;
      /**
      * **routers_with_balances.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain: string | null;
      /**
      * **routers_with_balances.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain: string | null;
      /**
      * **routers_with_balances.key**
      * - `bpchar` in database
      * - Nullable, no default
      */
      key: string | null;
      /**
      * **routers_with_balances.id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      id: string | null;
      /**
      * **routers_with_balances.fees_earned**
      * - `numeric` in database
      * - Nullable, no default
      */
      fees_earned: number | null;
      /**
      * **routers_with_balances.locked**
      * - `numeric` in database
      * - Nullable, no default
      */
      locked: number | null;
      /**
      * **routers_with_balances.supplied**
      * - `numeric` in database
      * - Nullable, no default
      */
      supplied: number | null;
      /**
      * **routers_with_balances.removed**
      * - `numeric` in database
      * - Nullable, no default
      */
      removed: number | null;
      /**
      * **routers_with_balances.decimal**
      * - `numeric` in database
      * - Nullable, no default
      */
      decimal: number | null;
      /**
      * **routers_with_balances.asset_usd_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      asset_usd_price: number | null;
      /**
      * **routers_with_balances.balance_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      balance_usd: number | null;
      /**
      * **routers_with_balances.fee_earned_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      fee_earned_usd: number | null;
      /**
      * **routers_with_balances.locked_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      locked_usd: number | null;
      /**
      * **routers_with_balances.supplied_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      supplied_usd: number | null;
      /**
      * **routers_with_balances.removed_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      removed_usd: number | null;
    }
    export interface JSONSelectable {
      /**
      * **routers_with_balances.address**
      * - `bpchar` in database
      * - Nullable, no default
      */
      address: string | null;
      /**
      * **routers_with_balances.asset_canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      asset_canonical_id: string | null;
      /**
      * **routers_with_balances.asset_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      asset_domain: string | null;
      /**
      * **routers_with_balances.router_address**
      * - `bpchar` in database
      * - Nullable, no default
      */
      router_address: string | null;
      /**
      * **routers_with_balances.balance**
      * - `numeric` in database
      * - Nullable, no default
      */
      balance: number | null;
      /**
      * **routers_with_balances.local**
      * - `bpchar` in database
      * - Nullable, no default
      */
      local: string | null;
      /**
      * **routers_with_balances.adopted**
      * - `bpchar` in database
      * - Nullable, no default
      */
      adopted: string | null;
      /**
      * **routers_with_balances.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id: string | null;
      /**
      * **routers_with_balances.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain: string | null;
      /**
      * **routers_with_balances.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain: string | null;
      /**
      * **routers_with_balances.key**
      * - `bpchar` in database
      * - Nullable, no default
      */
      key: string | null;
      /**
      * **routers_with_balances.id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      id: string | null;
      /**
      * **routers_with_balances.fees_earned**
      * - `numeric` in database
      * - Nullable, no default
      */
      fees_earned: number | null;
      /**
      * **routers_with_balances.locked**
      * - `numeric` in database
      * - Nullable, no default
      */
      locked: number | null;
      /**
      * **routers_with_balances.supplied**
      * - `numeric` in database
      * - Nullable, no default
      */
      supplied: number | null;
      /**
      * **routers_with_balances.removed**
      * - `numeric` in database
      * - Nullable, no default
      */
      removed: number | null;
      /**
      * **routers_with_balances.decimal**
      * - `numeric` in database
      * - Nullable, no default
      */
      decimal: number | null;
      /**
      * **routers_with_balances.asset_usd_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      asset_usd_price: number | null;
      /**
      * **routers_with_balances.balance_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      balance_usd: number | null;
      /**
      * **routers_with_balances.fee_earned_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      fee_earned_usd: number | null;
      /**
      * **routers_with_balances.locked_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      locked_usd: number | null;
      /**
      * **routers_with_balances.supplied_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      supplied_usd: number | null;
      /**
      * **routers_with_balances.removed_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      removed_usd: number | null;
    }
    export interface Whereable {
      /**
      * **routers_with_balances.address**
      * - `bpchar` in database
      * - Nullable, no default
      */
      address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.asset_canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      asset_canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.asset_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      asset_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.router_address**
      * - `bpchar` in database
      * - Nullable, no default
      */
      router_address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.balance**
      * - `numeric` in database
      * - Nullable, no default
      */
      balance?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.local**
      * - `bpchar` in database
      * - Nullable, no default
      */
      local?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.adopted**
      * - `bpchar` in database
      * - Nullable, no default
      */
      adopted?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.key**
      * - `bpchar` in database
      * - Nullable, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.fees_earned**
      * - `numeric` in database
      * - Nullable, no default
      */
      fees_earned?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.locked**
      * - `numeric` in database
      * - Nullable, no default
      */
      locked?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.supplied**
      * - `numeric` in database
      * - Nullable, no default
      */
      supplied?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.removed**
      * - `numeric` in database
      * - Nullable, no default
      */
      removed?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.decimal**
      * - `numeric` in database
      * - Nullable, no default
      */
      decimal?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.asset_usd_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      asset_usd_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.balance_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      balance_usd?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.fee_earned_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      fee_earned_usd?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.locked_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      locked_usd?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.supplied_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      supplied_usd?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **routers_with_balances.removed_usd**
      * - `numeric` in database
      * - Nullable, no default
      */
      removed_usd?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **schema_migrations**
   * - Table in database
   */
  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface JSONSelectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface Whereable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **stableswap_exchanges**
   * - Table in database
   */
  export namespace stableswap_exchanges {
    export type Table = 'stableswap_exchanges';
    export interface Selectable {
      /**
      * **stableswap_exchanges.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **stableswap_exchanges.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string;
      /**
      * **stableswap_exchanges.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **stableswap_exchanges.buyer**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      buyer: string;
      /**
      * **stableswap_exchanges.bought_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      bought_id: number;
      /**
      * **stableswap_exchanges.sold_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sold_id: number;
      /**
      * **stableswap_exchanges.tokens_sold**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      tokens_sold: number;
      /**
      * **stableswap_exchanges.tokens_bought**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      tokens_bought: number;
      /**
      * **stableswap_exchanges.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number;
      /**
      * **stableswap_exchanges.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash: string;
      /**
      * **stableswap_exchanges.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp: number;
      /**
      * **stableswap_exchanges.balances**
      * - `_numeric` in database
      * - `NOT NULL`, default: `ARRAY[]::numeric[]`
      */
      balances: number[];
      /**
      * **stableswap_exchanges.fee**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      fee: number;
      /**
      * **stableswap_exchanges.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce: number;
    }
    export interface JSONSelectable {
      /**
      * **stableswap_exchanges.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **stableswap_exchanges.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string;
      /**
      * **stableswap_exchanges.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **stableswap_exchanges.buyer**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      buyer: string;
      /**
      * **stableswap_exchanges.bought_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      bought_id: number;
      /**
      * **stableswap_exchanges.sold_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sold_id: number;
      /**
      * **stableswap_exchanges.tokens_sold**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      tokens_sold: number;
      /**
      * **stableswap_exchanges.tokens_bought**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      tokens_bought: number;
      /**
      * **stableswap_exchanges.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number;
      /**
      * **stableswap_exchanges.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash: string;
      /**
      * **stableswap_exchanges.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp: number;
      /**
      * **stableswap_exchanges.balances**
      * - `_numeric` in database
      * - `NOT NULL`, default: `ARRAY[]::numeric[]`
      */
      balances: number[];
      /**
      * **stableswap_exchanges.fee**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      fee: number;
      /**
      * **stableswap_exchanges.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce: number;
    }
    export interface Whereable {
      /**
      * **stableswap_exchanges.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.buyer**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      buyer?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.bought_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      bought_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.sold_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sold_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.tokens_sold**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      tokens_sold?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.tokens_bought**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      tokens_bought?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.balances**
      * - `_numeric` in database
      * - `NOT NULL`, default: `ARRAY[]::numeric[]`
      */
      balances?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.fee**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      fee?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_exchanges.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stableswap_exchanges.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_exchanges.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_exchanges.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_exchanges.buyer**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      buyer: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_exchanges.bought_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      bought_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_exchanges.sold_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sold_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_exchanges.tokens_sold**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      tokens_sold: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_exchanges.tokens_bought**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      tokens_bought: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_exchanges.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_exchanges.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_exchanges.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_exchanges.balances**
      * - `_numeric` in database
      * - `NOT NULL`, default: `ARRAY[]::numeric[]`
      */
      balances?: number[] | db.Parameter<number[]> | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_exchanges.fee**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      fee?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_exchanges.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stableswap_exchanges.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_exchanges.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_exchanges.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_exchanges.buyer**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      buyer?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_exchanges.bought_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      bought_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_exchanges.sold_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      sold_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_exchanges.tokens_sold**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      tokens_sold?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_exchanges.tokens_bought**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      tokens_bought?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_exchanges.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_exchanges.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_exchanges.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_exchanges.balances**
      * - `_numeric` in database
      * - `NOT NULL`, default: `ARRAY[]::numeric[]`
      */
      balances?: number[] | db.Parameter<number[]> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_exchanges.fee**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      fee?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_exchanges.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'stableswap_exchanges_id_key' | 'stableswap_exchanges_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **stableswap_lp_balances**
   * - Table in database
   */
  export namespace stableswap_lp_balances {
    export type Table = 'stableswap_lp_balances';
    export interface Selectable {
      /**
      * **stableswap_lp_balances.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string;
      /**
      * **stableswap_lp_balances.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **stableswap_lp_balances.provider**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      provider: string;
      /**
      * **stableswap_lp_balances.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token: string;
      /**
      * **stableswap_lp_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      balance: number;
      /**
      * **stableswap_lp_balances.last_timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      last_timestamp: number;
    }
    export interface JSONSelectable {
      /**
      * **stableswap_lp_balances.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string;
      /**
      * **stableswap_lp_balances.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **stableswap_lp_balances.provider**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      provider: string;
      /**
      * **stableswap_lp_balances.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token: string;
      /**
      * **stableswap_lp_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      balance: number;
      /**
      * **stableswap_lp_balances.last_timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      last_timestamp: number;
    }
    export interface Whereable {
      /**
      * **stableswap_lp_balances.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_balances.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_balances.provider**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      provider?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_balances.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      balance?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_balances.last_timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      last_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stableswap_lp_balances.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_lp_balances.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_lp_balances.provider**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      provider: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_lp_balances.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_lp_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      balance: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_lp_balances.last_timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      last_timestamp: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stableswap_lp_balances.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_lp_balances.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_lp_balances.provider**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      provider?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_lp_balances.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_lp_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      balance?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_lp_balances.last_timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      last_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'stableswap_lp_balances_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **stableswap_lp_transfers**
   * - Table in database
   */
  export namespace stableswap_lp_transfers {
    export type Table = 'stableswap_lp_transfers';
    export interface Selectable {
      /**
      * **stableswap_lp_transfers.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **stableswap_lp_transfers.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string;
      /**
      * **stableswap_lp_transfers.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **stableswap_lp_transfers.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token: string;
      /**
      * **stableswap_lp_transfers.from_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      from_address: string;
      /**
      * **stableswap_lp_transfers.to_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      to_address: string;
      /**
      * **stableswap_lp_transfers.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens: string[] | null;
      /**
      * **stableswap_lp_transfers.amount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      amount: number;
      /**
      * **stableswap_lp_transfers.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances: number[] | null;
      /**
      * **stableswap_lp_transfers.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number;
      /**
      * **stableswap_lp_transfers.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash: string;
      /**
      * **stableswap_lp_transfers.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp: number;
      /**
      * **stableswap_lp_transfers.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce: number;
    }
    export interface JSONSelectable {
      /**
      * **stableswap_lp_transfers.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **stableswap_lp_transfers.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string;
      /**
      * **stableswap_lp_transfers.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **stableswap_lp_transfers.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token: string;
      /**
      * **stableswap_lp_transfers.from_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      from_address: string;
      /**
      * **stableswap_lp_transfers.to_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      to_address: string;
      /**
      * **stableswap_lp_transfers.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens: string[] | null;
      /**
      * **stableswap_lp_transfers.amount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      amount: number;
      /**
      * **stableswap_lp_transfers.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances: number[] | null;
      /**
      * **stableswap_lp_transfers.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number;
      /**
      * **stableswap_lp_transfers.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash: string;
      /**
      * **stableswap_lp_transfers.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp: number;
      /**
      * **stableswap_lp_transfers.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce: number;
    }
    export interface Whereable {
      /**
      * **stableswap_lp_transfers.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.from_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      from_address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.to_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      to_address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.amount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      amount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_lp_transfers.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stableswap_lp_transfers.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.from_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      from_address: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.to_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      to_address: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.amount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      amount: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_lp_transfers.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stableswap_lp_transfers.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.from_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      from_address?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.to_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      to_address?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.amount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      amount?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_lp_transfers.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'stableswap_lp_transfers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **stableswap_pool_events**
   * - Table in database
   */
  export namespace stableswap_pool_events {
    export type Table = 'stableswap_pool_events';
    export interface Selectable {
      /**
      * **stableswap_pool_events.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **stableswap_pool_events.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string;
      /**
      * **stableswap_pool_events.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **stableswap_pool_events.provider**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      provider: string;
      /**
      * **stableswap_pool_events.action**
      * - `action_type` in database
      * - `NOT NULL`, default: `'Add'::action_type`
      */
      action: action_type;
      /**
      * **stableswap_pool_events.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens: string[] | null;
      /**
      * **stableswap_pool_events.pool_token_decimals**
      * - `_int4` in database
      * - Nullable, no default
      */
      pool_token_decimals: number[] | null;
      /**
      * **stableswap_pool_events.token_amounts**
      * - `_numeric` in database
      * - Nullable, no default
      */
      token_amounts: number[] | null;
      /**
      * **stableswap_pool_events.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances: number[] | null;
      /**
      * **stableswap_pool_events.lp_token_amount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lp_token_amount: number;
      /**
      * **stableswap_pool_events.lp_token_supply**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lp_token_supply: number;
      /**
      * **stableswap_pool_events.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number;
      /**
      * **stableswap_pool_events.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash: string;
      /**
      * **stableswap_pool_events.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp: number;
      /**
      * **stableswap_pool_events.fees**
      * - `_numeric` in database
      * - `NOT NULL`, default: `ARRAY[]::numeric[]`
      */
      fees: number[];
      /**
      * **stableswap_pool_events.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce: number;
    }
    export interface JSONSelectable {
      /**
      * **stableswap_pool_events.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **stableswap_pool_events.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string;
      /**
      * **stableswap_pool_events.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **stableswap_pool_events.provider**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      provider: string;
      /**
      * **stableswap_pool_events.action**
      * - `action_type` in database
      * - `NOT NULL`, default: `'Add'::action_type`
      */
      action: action_type;
      /**
      * **stableswap_pool_events.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens: string[] | null;
      /**
      * **stableswap_pool_events.pool_token_decimals**
      * - `_int4` in database
      * - Nullable, no default
      */
      pool_token_decimals: number[] | null;
      /**
      * **stableswap_pool_events.token_amounts**
      * - `_numeric` in database
      * - Nullable, no default
      */
      token_amounts: number[] | null;
      /**
      * **stableswap_pool_events.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances: number[] | null;
      /**
      * **stableswap_pool_events.lp_token_amount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lp_token_amount: number;
      /**
      * **stableswap_pool_events.lp_token_supply**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lp_token_supply: number;
      /**
      * **stableswap_pool_events.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number;
      /**
      * **stableswap_pool_events.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash: string;
      /**
      * **stableswap_pool_events.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp: number;
      /**
      * **stableswap_pool_events.fees**
      * - `_numeric` in database
      * - `NOT NULL`, default: `ARRAY[]::numeric[]`
      */
      fees: number[];
      /**
      * **stableswap_pool_events.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce: number;
    }
    export interface Whereable {
      /**
      * **stableswap_pool_events.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.provider**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      provider?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.action**
      * - `action_type` in database
      * - `NOT NULL`, default: `'Add'::action_type`
      */
      action?: action_type | db.Parameter<action_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, action_type | db.Parameter<action_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.pool_token_decimals**
      * - `_int4` in database
      * - Nullable, no default
      */
      pool_token_decimals?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.token_amounts**
      * - `_numeric` in database
      * - Nullable, no default
      */
      token_amounts?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.lp_token_amount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lp_token_amount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.lp_token_supply**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lp_token_supply?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.fees**
      * - `_numeric` in database
      * - `NOT NULL`, default: `ARRAY[]::numeric[]`
      */
      fees?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pool_events.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stableswap_pool_events.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pool_events.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pool_events.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pool_events.provider**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      provider: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pool_events.action**
      * - `action_type` in database
      * - `NOT NULL`, default: `'Add'::action_type`
      */
      action?: action_type | db.Parameter<action_type> | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_pool_events.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_pool_events.pool_token_decimals**
      * - `_int4` in database
      * - Nullable, no default
      */
      pool_token_decimals?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_pool_events.token_amounts**
      * - `_numeric` in database
      * - Nullable, no default
      */
      token_amounts?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_pool_events.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_pool_events.lp_token_amount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lp_token_amount: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_pool_events.lp_token_supply**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lp_token_supply: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_pool_events.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_pool_events.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pool_events.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_pool_events.fees**
      * - `_numeric` in database
      * - `NOT NULL`, default: `ARRAY[]::numeric[]`
      */
      fees?: number[] | db.Parameter<number[]> | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_pool_events.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stableswap_pool_events.id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pool_events.pool_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      pool_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pool_events.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pool_events.provider**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      provider?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pool_events.action**
      * - `action_type` in database
      * - `NOT NULL`, default: `'Add'::action_type`
      */
      action?: action_type | db.Parameter<action_type> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, action_type | db.Parameter<action_type> | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_pool_events.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_pool_events.pool_token_decimals**
      * - `_int4` in database
      * - Nullable, no default
      */
      pool_token_decimals?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_pool_events.token_amounts**
      * - `_numeric` in database
      * - Nullable, no default
      */
      token_amounts?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_pool_events.balances**
      * - `_numeric` in database
      * - Nullable, no default
      */
      balances?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_pool_events.lp_token_amount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lp_token_amount?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_pool_events.lp_token_supply**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lp_token_supply?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_pool_events.block_number**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      block_number?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_pool_events.transaction_hash**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pool_events.timestamp**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      timestamp?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_pool_events.fees**
      * - `_numeric` in database
      * - `NOT NULL`, default: `ARRAY[]::numeric[]`
      */
      fees?: number[] | db.Parameter<number[]> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_pool_events.nonce**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      nonce?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'stableswap_pool_events_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **stableswap_pools**
   * - Table in database
   */
  export namespace stableswap_pools {
    export type Table = 'stableswap_pools';
    export interface Selectable {
      /**
      * **stableswap_pools.key**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **stableswap_pools.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **stableswap_pools.is_active**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      is_active: boolean | null;
      /**
      * **stableswap_pools.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token: string;
      /**
      * **stableswap_pools.initial_a**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      initial_a: number;
      /**
      * **stableswap_pools.future_a**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      future_a: number;
      /**
      * **stableswap_pools.initial_a_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      initial_a_time: number;
      /**
      * **stableswap_pools.future_a_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      future_a_time: number;
      /**
      * **stableswap_pools.swap_fee**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      swap_fee: string;
      /**
      * **stableswap_pools.admin_fee**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      admin_fee: string;
      /**
      * **stableswap_pools.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens: string[] | null;
      /**
      * **stableswap_pools.token_precision_multipliers**
      * - `_text` in database
      * - Nullable, no default
      */
      token_precision_multipliers: string[] | null;
      /**
      * **stableswap_pools.pool_token_decimals**
      * - `_int4` in database
      * - Nullable, no default
      */
      pool_token_decimals: number[] | null;
      /**
      * **stableswap_pools.balances**
      * - `_text` in database
      * - Nullable, no default
      */
      balances: string[] | null;
      /**
      * **stableswap_pools.virtual_price**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      virtual_price: string;
      /**
      * **stableswap_pools.invariant**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      invariant: string;
      /**
      * **stableswap_pools.lp_token_supply**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      lp_token_supply: string;
    }
    export interface JSONSelectable {
      /**
      * **stableswap_pools.key**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      key: string;
      /**
      * **stableswap_pools.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
      /**
      * **stableswap_pools.is_active**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      is_active: boolean | null;
      /**
      * **stableswap_pools.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token: string;
      /**
      * **stableswap_pools.initial_a**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      initial_a: number;
      /**
      * **stableswap_pools.future_a**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      future_a: number;
      /**
      * **stableswap_pools.initial_a_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      initial_a_time: number;
      /**
      * **stableswap_pools.future_a_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      future_a_time: number;
      /**
      * **stableswap_pools.swap_fee**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      swap_fee: string;
      /**
      * **stableswap_pools.admin_fee**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      admin_fee: string;
      /**
      * **stableswap_pools.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens: string[] | null;
      /**
      * **stableswap_pools.token_precision_multipliers**
      * - `_text` in database
      * - Nullable, no default
      */
      token_precision_multipliers: string[] | null;
      /**
      * **stableswap_pools.pool_token_decimals**
      * - `_int4` in database
      * - Nullable, no default
      */
      pool_token_decimals: number[] | null;
      /**
      * **stableswap_pools.balances**
      * - `_text` in database
      * - Nullable, no default
      */
      balances: string[] | null;
      /**
      * **stableswap_pools.virtual_price**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      virtual_price: string;
      /**
      * **stableswap_pools.invariant**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      invariant: string;
      /**
      * **stableswap_pools.lp_token_supply**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      lp_token_supply: string;
    }
    export interface Whereable {
      /**
      * **stableswap_pools.key**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.is_active**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      is_active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.initial_a**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      initial_a?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.future_a**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      future_a?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.initial_a_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      initial_a_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.future_a_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      future_a_time?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.swap_fee**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      swap_fee?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.admin_fee**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      admin_fee?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.token_precision_multipliers**
      * - `_text` in database
      * - Nullable, no default
      */
      token_precision_multipliers?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.pool_token_decimals**
      * - `_int4` in database
      * - Nullable, no default
      */
      pool_token_decimals?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.balances**
      * - `_text` in database
      * - Nullable, no default
      */
      balances?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.virtual_price**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      virtual_price?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.invariant**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      invariant?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **stableswap_pools.lp_token_supply**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      lp_token_supply?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **stableswap_pools.key**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      key: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pools.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pools.is_active**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      is_active?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_pools.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pools.initial_a**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      initial_a: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_pools.future_a**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      future_a: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_pools.initial_a_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      initial_a_time: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_pools.future_a_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      future_a_time: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **stableswap_pools.swap_fee**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      swap_fee: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pools.admin_fee**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      admin_fee: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pools.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_pools.token_precision_multipliers**
      * - `_text` in database
      * - Nullable, no default
      */
      token_precision_multipliers?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_pools.pool_token_decimals**
      * - `_int4` in database
      * - Nullable, no default
      */
      pool_token_decimals?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_pools.balances**
      * - `_text` in database
      * - Nullable, no default
      */
      balances?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **stableswap_pools.virtual_price**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      virtual_price: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pools.invariant**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      invariant: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **stableswap_pools.lp_token_supply**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      lp_token_supply: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **stableswap_pools.key**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      key?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pools.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pools.is_active**
      * - `bool` in database
      * - Nullable, default: `false`
      */
      is_active?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_pools.lp_token**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      lp_token?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pools.initial_a**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      initial_a?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_pools.future_a**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      future_a?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_pools.initial_a_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      initial_a_time?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_pools.future_a_time**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      future_a_time?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **stableswap_pools.swap_fee**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      swap_fee?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pools.admin_fee**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      admin_fee?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pools.pooled_tokens**
      * - `_text` in database
      * - Nullable, no default
      */
      pooled_tokens?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_pools.token_precision_multipliers**
      * - `_text` in database
      * - Nullable, no default
      */
      token_precision_multipliers?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_pools.pool_token_decimals**
      * - `_int4` in database
      * - Nullable, no default
      */
      pool_token_decimals?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_pools.balances**
      * - `_text` in database
      * - Nullable, no default
      */
      balances?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **stableswap_pools.virtual_price**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      virtual_price?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pools.invariant**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      invariant?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **stableswap_pools.lp_token_supply**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      lp_token_supply?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'stableswap_pools_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **transfer_count**
   * - View in database
   */
  export namespace transfer_count {
    export type Table = 'transfer_count';
    export interface Selectable {
      /**
      * **transfer_count.status**
      * - `transfer_status` in database
      * - Nullable, no default
      */
      status: transfer_status | null;
      /**
      * **transfer_count.transfer_day**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_day: Date | null;
      /**
      * **transfer_count.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **transfer_count.asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      asset: string | null;
      /**
      * **transfer_count.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count: db.Int8String | null;
    }
    export interface JSONSelectable {
      /**
      * **transfer_count.status**
      * - `transfer_status` in database
      * - Nullable, no default
      */
      status: transfer_status | null;
      /**
      * **transfer_count.transfer_day**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_day: db.DateString | null;
      /**
      * **transfer_count.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **transfer_count.asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      asset: string | null;
      /**
      * **transfer_count.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count: number | null;
    }
    export interface Whereable {
      /**
      * **transfer_count.status**
      * - `transfer_status` in database
      * - Nullable, no default
      */
      status?: transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfer_count.transfer_day**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_day?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfer_count.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfer_count.asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfer_count.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **transfers**
   * - Table in database
   */
  export namespace transfers {
    export type Table = 'transfers';
    export interface Selectable {
      /**
      * **transfers.transfer_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transfer_id: string;
      /**
      * **transfers.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce: db.Int8String | null;
      /**
      * **transfers.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to: string | null;
      /**
      * **transfers.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data: string | null;
      /**
      * **transfers.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain: string;
      /**
      * **transfers.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain: string | null;
      /**
      * **transfers.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local: boolean | null;
      /**
      * **transfers.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **transfers.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset: string | null;
      /**
      * **transfers.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount: string | null;
      /**
      * **transfers.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset: string | null;
      /**
      * **transfers.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount: string | null;
      /**
      * **transfers.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller: string | null;
      /**
      * **transfers.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash: string | null;
      /**
      * **transfers.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp: number | null;
      /**
      * **transfers.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price: string | null;
      /**
      * **transfers.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit: string | null;
      /**
      * **transfers.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number: number | null;
      /**
      * **transfers.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **transfers.status**
      * - `transfer_status` in database
      * - `NOT NULL`, default: `'XCalled'::transfer_status`
      */
      status: transfer_status;
      /**
      * **transfers.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers: string[] | null;
      /**
      * **transfers.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset: string | null;
      /**
      * **transfers.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount: string | null;
      /**
      * **transfers.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset: string | null;
      /**
      * **transfers.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount: string | null;
      /**
      * **transfers.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller: string | null;
      /**
      * **transfers.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash: string | null;
      /**
      * **transfers.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp: number | null;
      /**
      * **transfers.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price: string | null;
      /**
      * **transfers.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit: string | null;
      /**
      * **transfers.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number: number | null;
      /**
      * **transfers.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender: string | null;
      /**
      * **transfers.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller: string | null;
      /**
      * **transfers.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash: string | null;
      /**
      * **transfers.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp: number | null;
      /**
      * **transfers.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price: string | null;
      /**
      * **transfers.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit: string | null;
      /**
      * **transfers.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number: number | null;
      /**
      * **transfers.update_time**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      update_time: Date;
      /**
      * **transfers.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate: string | null;
      /**
      * **transfers.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash: string | null;
      /**
      * **transfers.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain: string | null;
      /**
      * **transfers.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage: number | null;
      /**
      * **transfers.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender: string | null;
      /**
      * **transfers.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt: string | null;
      /**
      * **transfers.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in: string | null;
      /**
      * **transfers.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id: string | null;
      /**
      * **transfers.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee: string | null;
      /**
      * **transfers.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin: string | null;
      /**
      * **transfers.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin: string | null;
      /**
      * **transfers.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin: string | null;
      /**
      * **transfers.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status: string | null;
      /**
      * **transfers.backoff**
      * - `int4` in database
      * - `NOT NULL`, default: `32`
      */
      backoff: number;
      /**
      * **transfers.next_execution_timestamp**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      next_execution_timestamp: number;
      /**
      * **transfers.updated_slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      updated_slippage: number | null;
      /**
      * **transfers.execute_simulation_input**
      * - `text` in database
      * - Nullable, no default
      */
      execute_simulation_input: string | null;
      /**
      * **transfers.execute_simulation_from**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_from: string | null;
      /**
      * **transfers.execute_simulation_to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_to: string | null;
      /**
      * **transfers.execute_simulation_network**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_simulation_network: string | null;
      /**
      * **transfers.error_message**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_message: string | null;
      /**
      * **transfers.message_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      message_status: string | null;
      /**
      * **transfers.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees: db.JSONValue | null;
    }
    export interface JSONSelectable {
      /**
      * **transfers.transfer_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transfer_id: string;
      /**
      * **transfers.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce: number | null;
      /**
      * **transfers.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to: string | null;
      /**
      * **transfers.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data: string | null;
      /**
      * **transfers.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain: string;
      /**
      * **transfers.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain: string | null;
      /**
      * **transfers.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local: boolean | null;
      /**
      * **transfers.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **transfers.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset: string | null;
      /**
      * **transfers.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount: string | null;
      /**
      * **transfers.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset: string | null;
      /**
      * **transfers.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount: string | null;
      /**
      * **transfers.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller: string | null;
      /**
      * **transfers.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash: string | null;
      /**
      * **transfers.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp: number | null;
      /**
      * **transfers.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price: string | null;
      /**
      * **transfers.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit: string | null;
      /**
      * **transfers.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number: number | null;
      /**
      * **transfers.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **transfers.status**
      * - `transfer_status` in database
      * - `NOT NULL`, default: `'XCalled'::transfer_status`
      */
      status: transfer_status;
      /**
      * **transfers.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers: string[] | null;
      /**
      * **transfers.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset: string | null;
      /**
      * **transfers.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount: string | null;
      /**
      * **transfers.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset: string | null;
      /**
      * **transfers.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount: string | null;
      /**
      * **transfers.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller: string | null;
      /**
      * **transfers.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash: string | null;
      /**
      * **transfers.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp: number | null;
      /**
      * **transfers.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price: string | null;
      /**
      * **transfers.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit: string | null;
      /**
      * **transfers.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number: number | null;
      /**
      * **transfers.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender: string | null;
      /**
      * **transfers.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller: string | null;
      /**
      * **transfers.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash: string | null;
      /**
      * **transfers.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp: number | null;
      /**
      * **transfers.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price: string | null;
      /**
      * **transfers.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit: string | null;
      /**
      * **transfers.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number: number | null;
      /**
      * **transfers.update_time**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      update_time: db.TimestampString;
      /**
      * **transfers.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate: string | null;
      /**
      * **transfers.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash: string | null;
      /**
      * **transfers.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain: string | null;
      /**
      * **transfers.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage: number | null;
      /**
      * **transfers.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender: string | null;
      /**
      * **transfers.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt: string | null;
      /**
      * **transfers.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in: string | null;
      /**
      * **transfers.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id: string | null;
      /**
      * **transfers.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee: string | null;
      /**
      * **transfers.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin: string | null;
      /**
      * **transfers.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin: string | null;
      /**
      * **transfers.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin: string | null;
      /**
      * **transfers.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status: string | null;
      /**
      * **transfers.backoff**
      * - `int4` in database
      * - `NOT NULL`, default: `32`
      */
      backoff: number;
      /**
      * **transfers.next_execution_timestamp**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      next_execution_timestamp: number;
      /**
      * **transfers.updated_slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      updated_slippage: number | null;
      /**
      * **transfers.execute_simulation_input**
      * - `text` in database
      * - Nullable, no default
      */
      execute_simulation_input: string | null;
      /**
      * **transfers.execute_simulation_from**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_from: string | null;
      /**
      * **transfers.execute_simulation_to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_to: string | null;
      /**
      * **transfers.execute_simulation_network**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_simulation_network: string | null;
      /**
      * **transfers.error_message**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_message: string | null;
      /**
      * **transfers.message_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      message_status: string | null;
      /**
      * **transfers.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees: db.JSONValue | null;
    }
    export interface Whereable {
      /**
      * **transfers.transfer_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transfer_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.status**
      * - `transfer_status` in database
      * - `NOT NULL`, default: `'XCalled'::transfer_status`
      */
      status?: transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.update_time**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      update_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.backoff**
      * - `int4` in database
      * - `NOT NULL`, default: `32`
      */
      backoff?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.next_execution_timestamp**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      next_execution_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.updated_slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      updated_slippage?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_simulation_input**
      * - `text` in database
      * - Nullable, no default
      */
      execute_simulation_input?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_simulation_from**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_from?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_simulation_to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_to?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_simulation_network**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_simulation_network?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.error_message**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_message?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.message_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      message_status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **transfers.transfer_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transfer_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **transfers.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **transfers.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.status**
      * - `transfer_status` in database
      * - `NOT NULL`, default: `'XCalled'::transfer_status`
      */
      status?: transfer_status | db.Parameter<transfer_status> | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.update_time**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      update_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.backoff**
      * - `int4` in database
      * - `NOT NULL`, default: `32`
      */
      backoff?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.next_execution_timestamp**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      next_execution_timestamp?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.updated_slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      updated_slippage?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_simulation_input**
      * - `text` in database
      * - Nullable, no default
      */
      execute_simulation_input?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_simulation_from**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_from?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_simulation_to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_to?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_simulation_network**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_simulation_network?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.error_message**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_message?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.message_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      message_status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **transfers.transfer_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transfer_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **transfers.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **transfers.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.status**
      * - `transfer_status` in database
      * - `NOT NULL`, default: `'XCalled'::transfer_status`
      */
      status?: transfer_status | db.Parameter<transfer_status> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, transfer_status | db.Parameter<transfer_status> | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.update_time**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      update_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.backoff**
      * - `int4` in database
      * - `NOT NULL`, default: `32`
      */
      backoff?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.next_execution_timestamp**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      next_execution_timestamp?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.updated_slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      updated_slippage?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_simulation_input**
      * - `text` in database
      * - Nullable, no default
      */
      execute_simulation_input?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_simulation_from**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_from?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_simulation_to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_to?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_simulation_network**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_simulation_network?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.error_message**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_message?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.message_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      message_status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'transfers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **transfers_with_price**
   * - View in database
   */
  export namespace transfers_with_price {
    export type Table = 'transfers_with_price';
    export interface Selectable {
      /**
      * **transfers_with_price.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id: string | null;
      /**
      * **transfers_with_price.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce: db.Int8String | null;
      /**
      * **transfers_with_price.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to: string | null;
      /**
      * **transfers_with_price.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data: string | null;
      /**
      * **transfers_with_price.origin_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_domain: string | null;
      /**
      * **transfers_with_price.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain: string | null;
      /**
      * **transfers_with_price.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local: boolean | null;
      /**
      * **transfers_with_price.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **transfers_with_price.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset: string | null;
      /**
      * **transfers_with_price.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount: string | null;
      /**
      * **transfers_with_price.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset: string | null;
      /**
      * **transfers_with_price.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount: string | null;
      /**
      * **transfers_with_price.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller: string | null;
      /**
      * **transfers_with_price.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash: string | null;
      /**
      * **transfers_with_price.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp: number | null;
      /**
      * **transfers_with_price.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price: string | null;
      /**
      * **transfers_with_price.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit: string | null;
      /**
      * **transfers_with_price.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number: number | null;
      /**
      * **transfers_with_price.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **transfers_with_price.status**
      * - `transfer_status` in database
      * - Nullable, no default
      */
      status: transfer_status | null;
      /**
      * **transfers_with_price.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers: string[] | null;
      /**
      * **transfers_with_price.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset: string | null;
      /**
      * **transfers_with_price.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount: string | null;
      /**
      * **transfers_with_price.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset: string | null;
      /**
      * **transfers_with_price.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount: string | null;
      /**
      * **transfers_with_price.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller: string | null;
      /**
      * **transfers_with_price.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash: string | null;
      /**
      * **transfers_with_price.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp: number | null;
      /**
      * **transfers_with_price.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price: string | null;
      /**
      * **transfers_with_price.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit: string | null;
      /**
      * **transfers_with_price.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number: number | null;
      /**
      * **transfers_with_price.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender: string | null;
      /**
      * **transfers_with_price.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller: string | null;
      /**
      * **transfers_with_price.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash: string | null;
      /**
      * **transfers_with_price.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp: number | null;
      /**
      * **transfers_with_price.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price: string | null;
      /**
      * **transfers_with_price.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit: string | null;
      /**
      * **transfers_with_price.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number: number | null;
      /**
      * **transfers_with_price.update_time**
      * - `timestamp` in database
      * - Nullable, no default
      */
      update_time: Date | null;
      /**
      * **transfers_with_price.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate: string | null;
      /**
      * **transfers_with_price.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash: string | null;
      /**
      * **transfers_with_price.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain: string | null;
      /**
      * **transfers_with_price.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage: number | null;
      /**
      * **transfers_with_price.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender: string | null;
      /**
      * **transfers_with_price.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt: string | null;
      /**
      * **transfers_with_price.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in: string | null;
      /**
      * **transfers_with_price.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id: string | null;
      /**
      * **transfers_with_price.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee: string | null;
      /**
      * **transfers_with_price.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin: string | null;
      /**
      * **transfers_with_price.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin: string | null;
      /**
      * **transfers_with_price.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin: string | null;
      /**
      * **transfers_with_price.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status: string | null;
      /**
      * **transfers_with_price.backoff**
      * - `int4` in database
      * - Nullable, no default
      */
      backoff: number | null;
      /**
      * **transfers_with_price.next_execution_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      next_execution_timestamp: number | null;
      /**
      * **transfers_with_price.updated_slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      updated_slippage: number | null;
      /**
      * **transfers_with_price.execute_simulation_input**
      * - `text` in database
      * - Nullable, no default
      */
      execute_simulation_input: string | null;
      /**
      * **transfers_with_price.execute_simulation_from**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_from: string | null;
      /**
      * **transfers_with_price.execute_simulation_to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_to: string | null;
      /**
      * **transfers_with_price.execute_simulation_network**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_simulation_network: string | null;
      /**
      * **transfers_with_price.error_message**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_message: string | null;
      /**
      * **transfers_with_price.message_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      message_status: string | null;
      /**
      * **transfers_with_price.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees: db.JSONValue | null;
      /**
      * **transfers_with_price.asset_usd_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      asset_usd_price: number | null;
      /**
      * **transfers_with_price.decimals**
      * - `numeric` in database
      * - Nullable, no default
      */
      decimals: number | null;
      /**
      * **transfers_with_price.usd_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      usd_amount: number | null;
    }
    export interface JSONSelectable {
      /**
      * **transfers_with_price.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id: string | null;
      /**
      * **transfers_with_price.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce: number | null;
      /**
      * **transfers_with_price.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to: string | null;
      /**
      * **transfers_with_price.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data: string | null;
      /**
      * **transfers_with_price.origin_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_domain: string | null;
      /**
      * **transfers_with_price.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain: string | null;
      /**
      * **transfers_with_price.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local: boolean | null;
      /**
      * **transfers_with_price.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **transfers_with_price.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset: string | null;
      /**
      * **transfers_with_price.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount: string | null;
      /**
      * **transfers_with_price.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset: string | null;
      /**
      * **transfers_with_price.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount: string | null;
      /**
      * **transfers_with_price.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller: string | null;
      /**
      * **transfers_with_price.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash: string | null;
      /**
      * **transfers_with_price.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp: number | null;
      /**
      * **transfers_with_price.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price: string | null;
      /**
      * **transfers_with_price.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit: string | null;
      /**
      * **transfers_with_price.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number: number | null;
      /**
      * **transfers_with_price.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **transfers_with_price.status**
      * - `transfer_status` in database
      * - Nullable, no default
      */
      status: transfer_status | null;
      /**
      * **transfers_with_price.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers: string[] | null;
      /**
      * **transfers_with_price.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset: string | null;
      /**
      * **transfers_with_price.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount: string | null;
      /**
      * **transfers_with_price.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset: string | null;
      /**
      * **transfers_with_price.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount: string | null;
      /**
      * **transfers_with_price.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller: string | null;
      /**
      * **transfers_with_price.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash: string | null;
      /**
      * **transfers_with_price.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp: number | null;
      /**
      * **transfers_with_price.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price: string | null;
      /**
      * **transfers_with_price.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit: string | null;
      /**
      * **transfers_with_price.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number: number | null;
      /**
      * **transfers_with_price.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender: string | null;
      /**
      * **transfers_with_price.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller: string | null;
      /**
      * **transfers_with_price.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash: string | null;
      /**
      * **transfers_with_price.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp: number | null;
      /**
      * **transfers_with_price.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price: string | null;
      /**
      * **transfers_with_price.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit: string | null;
      /**
      * **transfers_with_price.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number: number | null;
      /**
      * **transfers_with_price.update_time**
      * - `timestamp` in database
      * - Nullable, no default
      */
      update_time: db.TimestampString | null;
      /**
      * **transfers_with_price.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate: string | null;
      /**
      * **transfers_with_price.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash: string | null;
      /**
      * **transfers_with_price.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain: string | null;
      /**
      * **transfers_with_price.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage: number | null;
      /**
      * **transfers_with_price.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender: string | null;
      /**
      * **transfers_with_price.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt: string | null;
      /**
      * **transfers_with_price.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in: string | null;
      /**
      * **transfers_with_price.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id: string | null;
      /**
      * **transfers_with_price.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee: string | null;
      /**
      * **transfers_with_price.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin: string | null;
      /**
      * **transfers_with_price.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin: string | null;
      /**
      * **transfers_with_price.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin: string | null;
      /**
      * **transfers_with_price.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status: string | null;
      /**
      * **transfers_with_price.backoff**
      * - `int4` in database
      * - Nullable, no default
      */
      backoff: number | null;
      /**
      * **transfers_with_price.next_execution_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      next_execution_timestamp: number | null;
      /**
      * **transfers_with_price.updated_slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      updated_slippage: number | null;
      /**
      * **transfers_with_price.execute_simulation_input**
      * - `text` in database
      * - Nullable, no default
      */
      execute_simulation_input: string | null;
      /**
      * **transfers_with_price.execute_simulation_from**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_from: string | null;
      /**
      * **transfers_with_price.execute_simulation_to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_to: string | null;
      /**
      * **transfers_with_price.execute_simulation_network**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_simulation_network: string | null;
      /**
      * **transfers_with_price.error_message**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_message: string | null;
      /**
      * **transfers_with_price.message_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      message_status: string | null;
      /**
      * **transfers_with_price.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees: db.JSONValue | null;
      /**
      * **transfers_with_price.asset_usd_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      asset_usd_price: number | null;
      /**
      * **transfers_with_price.decimals**
      * - `numeric` in database
      * - Nullable, no default
      */
      decimals: number | null;
      /**
      * **transfers_with_price.usd_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      usd_amount: number | null;
    }
    export interface Whereable {
      /**
      * **transfers_with_price.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.origin_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.status**
      * - `transfer_status` in database
      * - Nullable, no default
      */
      status?: transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.update_time**
      * - `timestamp` in database
      * - Nullable, no default
      */
      update_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.backoff**
      * - `int4` in database
      * - Nullable, no default
      */
      backoff?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.next_execution_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      next_execution_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.updated_slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      updated_slippage?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_simulation_input**
      * - `text` in database
      * - Nullable, no default
      */
      execute_simulation_input?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_simulation_from**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_from?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_simulation_to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_simulation_to?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.execute_simulation_network**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_simulation_network?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.error_message**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_message?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.message_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      message_status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.asset_usd_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      asset_usd_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.decimals**
      * - `numeric` in database
      * - Nullable, no default
      */
      decimals?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_price.usd_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      usd_amount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **transfers_with_ttr_ttv**
   * - View in database
   */
  export namespace transfers_with_ttr_ttv {
    export type Table = 'transfers_with_ttr_ttv';
    export interface Selectable {
      /**
      * **transfers_with_ttr_ttv.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id: string | null;
      /**
      * **transfers_with_ttr_ttv.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce: db.Int8String | null;
      /**
      * **transfers_with_ttr_ttv.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to: string | null;
      /**
      * **transfers_with_ttr_ttv.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data: string | null;
      /**
      * **transfers_with_ttr_ttv.origin_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_domain: string | null;
      /**
      * **transfers_with_ttr_ttv.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain: string | null;
      /**
      * **transfers_with_ttr_ttv.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local: boolean | null;
      /**
      * **transfers_with_ttr_ttv.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **transfers_with_ttr_ttv.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset: string | null;
      /**
      * **transfers_with_ttr_ttv.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount: string | null;
      /**
      * **transfers_with_ttr_ttv.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset: string | null;
      /**
      * **transfers_with_ttr_ttv.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp: number | null;
      /**
      * **transfers_with_ttr_ttv.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number: number | null;
      /**
      * **transfers_with_ttr_ttv.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **transfers_with_ttr_ttv.status**
      * - `transfer_status` in database
      * - Nullable, no default
      */
      status: transfer_status | null;
      /**
      * **transfers_with_ttr_ttv.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers: string[] | null;
      /**
      * **transfers_with_ttr_ttv.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset: string | null;
      /**
      * **transfers_with_ttr_ttv.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount: string | null;
      /**
      * **transfers_with_ttr_ttv.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset: string | null;
      /**
      * **transfers_with_ttr_ttv.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp: number | null;
      /**
      * **transfers_with_ttr_ttv.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number: number | null;
      /**
      * **transfers_with_ttr_ttv.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp: number | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number: number | null;
      /**
      * **transfers_with_ttr_ttv.update_time**
      * - `timestamp` in database
      * - Nullable, no default
      */
      update_time: Date | null;
      /**
      * **transfers_with_ttr_ttv.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate: string | null;
      /**
      * **transfers_with_ttr_ttv.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash: string | null;
      /**
      * **transfers_with_ttr_ttv.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain: string | null;
      /**
      * **transfers_with_ttr_ttv.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage: number | null;
      /**
      * **transfers_with_ttr_ttv.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender: string | null;
      /**
      * **transfers_with_ttr_ttv.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt: string | null;
      /**
      * **transfers_with_ttr_ttv.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in: string | null;
      /**
      * **transfers_with_ttr_ttv.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id: string | null;
      /**
      * **transfers_with_ttr_ttv.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin: string | null;
      /**
      * **transfers_with_ttr_ttv.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees: db.JSONValue | null;
      /**
      * **transfers_with_ttr_ttv.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status: string | null;
      /**
      * **transfers_with_ttr_ttv.backoff**
      * - `int4` in database
      * - Nullable, no default
      */
      backoff: number | null;
      /**
      * **transfers_with_ttr_ttv.next_execution_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      next_execution_timestamp: number | null;
      /**
      * **transfers_with_ttr_ttv.ttv**
      * - `int4` in database
      * - Nullable, no default
      */
      ttv: number | null;
      /**
      * **transfers_with_ttr_ttv.ttr**
      * - `int4` in database
      * - Nullable, no default
      */
      ttr: number | null;
    }
    export interface JSONSelectable {
      /**
      * **transfers_with_ttr_ttv.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id: string | null;
      /**
      * **transfers_with_ttr_ttv.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce: number | null;
      /**
      * **transfers_with_ttr_ttv.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to: string | null;
      /**
      * **transfers_with_ttr_ttv.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data: string | null;
      /**
      * **transfers_with_ttr_ttv.origin_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_domain: string | null;
      /**
      * **transfers_with_ttr_ttv.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain: string | null;
      /**
      * **transfers_with_ttr_ttv.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local: boolean | null;
      /**
      * **transfers_with_ttr_ttv.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **transfers_with_ttr_ttv.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset: string | null;
      /**
      * **transfers_with_ttr_ttv.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount: string | null;
      /**
      * **transfers_with_ttr_ttv.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset: string | null;
      /**
      * **transfers_with_ttr_ttv.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp: number | null;
      /**
      * **transfers_with_ttr_ttv.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number: number | null;
      /**
      * **transfers_with_ttr_ttv.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **transfers_with_ttr_ttv.status**
      * - `transfer_status` in database
      * - Nullable, no default
      */
      status: transfer_status | null;
      /**
      * **transfers_with_ttr_ttv.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers: string[] | null;
      /**
      * **transfers_with_ttr_ttv.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset: string | null;
      /**
      * **transfers_with_ttr_ttv.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount: string | null;
      /**
      * **transfers_with_ttr_ttv.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset: string | null;
      /**
      * **transfers_with_ttr_ttv.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp: number | null;
      /**
      * **transfers_with_ttr_ttv.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number: number | null;
      /**
      * **transfers_with_ttr_ttv.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp: number | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number: number | null;
      /**
      * **transfers_with_ttr_ttv.update_time**
      * - `timestamp` in database
      * - Nullable, no default
      */
      update_time: db.TimestampString | null;
      /**
      * **transfers_with_ttr_ttv.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate: string | null;
      /**
      * **transfers_with_ttr_ttv.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash: string | null;
      /**
      * **transfers_with_ttr_ttv.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain: string | null;
      /**
      * **transfers_with_ttr_ttv.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage: number | null;
      /**
      * **transfers_with_ttr_ttv.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender: string | null;
      /**
      * **transfers_with_ttr_ttv.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt: string | null;
      /**
      * **transfers_with_ttr_ttv.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in: string | null;
      /**
      * **transfers_with_ttr_ttv.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id: string | null;
      /**
      * **transfers_with_ttr_ttv.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee: string | null;
      /**
      * **transfers_with_ttr_ttv.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin: string | null;
      /**
      * **transfers_with_ttr_ttv.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin: string | null;
      /**
      * **transfers_with_ttr_ttv.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin: string | null;
      /**
      * **transfers_with_ttr_ttv.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees: db.JSONValue | null;
      /**
      * **transfers_with_ttr_ttv.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status: string | null;
      /**
      * **transfers_with_ttr_ttv.backoff**
      * - `int4` in database
      * - Nullable, no default
      */
      backoff: number | null;
      /**
      * **transfers_with_ttr_ttv.next_execution_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      next_execution_timestamp: number | null;
      /**
      * **transfers_with_ttr_ttv.ttv**
      * - `int4` in database
      * - Nullable, no default
      */
      ttv: number | null;
      /**
      * **transfers_with_ttr_ttv.ttr**
      * - `int4` in database
      * - Nullable, no default
      */
      ttr: number | null;
    }
    export interface Whereable {
      /**
      * **transfers_with_ttr_ttv.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.origin_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.status**
      * - `transfer_status` in database
      * - Nullable, no default
      */
      status?: transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.update_time**
      * - `timestamp` in database
      * - Nullable, no default
      */
      update_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.backoff**
      * - `int4` in database
      * - Nullable, no default
      */
      backoff?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.next_execution_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      next_execution_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.ttv**
      * - `int4` in database
      * - Nullable, no default
      */
      ttv?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers_with_ttr_ttv.ttr**
      * - `int4` in database
      * - Nullable, no default
      */
      ttr?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **transfers_with_ttr_ttv.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.origin_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.status**
      * - `transfer_status` in database
      * - Nullable, no default
      */
      status?: transfer_status | db.Parameter<transfer_status> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.update_time**
      * - `timestamp` in database
      * - Nullable, no default
      */
      update_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.backoff**
      * - `int4` in database
      * - Nullable, no default
      */
      backoff?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.next_execution_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      next_execution_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.ttv**
      * - `int4` in database
      * - Nullable, no default
      */
      ttv?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers_with_ttr_ttv.ttr**
      * - `int4` in database
      * - Nullable, no default
      */
      ttr?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **transfers_with_ttr_ttv.transfer_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      transfer_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.origin_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.receive_local**
      * - `bool` in database
      * - Nullable, no default
      */
      receive_local?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.origin_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_transacting_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.origin_bridged_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_bridged_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.xcall_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.xcall_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      xcall_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.status**
      * - `transfer_status` in database
      * - Nullable, no default
      */
      status?: transfer_status | db.Parameter<transfer_status> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, transfer_status | db.Parameter<transfer_status> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.destination_transacting_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_transacting_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.destination_local_amount**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_local_amount?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.execute_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.execute_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      execute_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.reconcile_gas_price**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_price?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.reconcile_gas_limit**
      * - `varchar` in database
      * - Nullable, no default
      */
      reconcile_gas_limit?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.update_time**
      * - `timestamp` in database
      * - Nullable, no default
      */
      update_time?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.delegate**
      * - `bpchar` in database
      * - Nullable, no default
      */
      delegate?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.message_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      message_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.canonical_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      canonical_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.slippage**
      * - `numeric` in database
      * - Nullable, no default
      */
      slippage?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_sender?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.bridged_amt**
      * - `varchar` in database
      * - Nullable, no default
      */
      bridged_amt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.normalized_in**
      * - `varchar` in database
      * - Nullable, no default
      */
      normalized_in?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.canonical_id**
      * - `bpchar` in database
      * - Nullable, no default
      */
      canonical_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.router_fee**
      * - `varchar` in database
      * - Nullable, no default
      */
      router_fee?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.xcall_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.execute_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.reconcile_tx_origin**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_tx_origin?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.relayer_fees**
      * - `jsonb` in database
      * - Nullable, no default
      */
      relayer_fees?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.error_status**
      * - `varchar` in database
      * - Nullable, no default
      */
      error_status?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.backoff**
      * - `int4` in database
      * - Nullable, no default
      */
      backoff?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.next_execution_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      next_execution_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.ttv**
      * - `int4` in database
      * - Nullable, no default
      */
      ttv?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers_with_ttr_ttv.ttr**
      * - `int4` in database
      * - Nullable, no default
      */
      ttr?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **weekly_connext_metrics**
   * - View in database
   */
  export namespace weekly_connext_metrics {
    export type Table = 'weekly_connext_metrics';
    export interface Selectable {
      /**
      * **weekly_connext_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date: Date | null;
      /**
      * **weekly_connext_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count: db.Int8String | null;
      /**
      * **weekly_connext_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count: db.Int8String | null;
      /**
      * **weekly_connext_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count: db.Int8String | null;
      /**
      * **weekly_connext_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count: db.Int8String | null;
      /**
      * **weekly_connext_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count: db.Int8String | null;
      /**
      * **weekly_connext_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs: number | null;
      /**
      * **weekly_connext_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs: number | null;
      /**
      * **weekly_connext_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs: number | null;
      /**
      * **weekly_connext_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs: number | null;
    }
    export interface JSONSelectable {
      /**
      * **weekly_connext_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date: db.DateString | null;
      /**
      * **weekly_connext_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count: number | null;
      /**
      * **weekly_connext_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count: number | null;
      /**
      * **weekly_connext_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count: number | null;
      /**
      * **weekly_connext_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count: number | null;
      /**
      * **weekly_connext_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count: number | null;
      /**
      * **weekly_connext_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs: number | null;
      /**
      * **weekly_connext_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs: number | null;
      /**
      * **weekly_connext_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs: number | null;
      /**
      * **weekly_connext_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs: number | null;
    }
    export interface Whereable {
      /**
      * **weekly_connext_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_connext_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_connext_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_connext_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_connext_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_connext_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_connext_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_connext_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_connext_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_connext_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **weekly_transfer_metrics**
   * - View in database
   */
  export namespace weekly_transfer_metrics {
    export type Table = 'weekly_transfer_metrics';
    export interface Selectable {
      /**
      * **weekly_transfer_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date: Date | null;
      /**
      * **weekly_transfer_metrics.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **weekly_transfer_metrics.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **weekly_transfer_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count: db.Int8String | null;
      /**
      * **weekly_transfer_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count: db.Int8String | null;
      /**
      * **weekly_transfer_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count: db.Int8String | null;
      /**
      * **weekly_transfer_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count: db.Int8String | null;
      /**
      * **weekly_transfer_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count: db.Int8String | null;
      /**
      * **weekly_transfer_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs: number | null;
      /**
      * **weekly_transfer_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs: number | null;
      /**
      * **weekly_transfer_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs: number | null;
      /**
      * **weekly_transfer_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs: number | null;
    }
    export interface JSONSelectable {
      /**
      * **weekly_transfer_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date: db.DateString | null;
      /**
      * **weekly_transfer_metrics.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **weekly_transfer_metrics.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **weekly_transfer_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count: number | null;
      /**
      * **weekly_transfer_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count: number | null;
      /**
      * **weekly_transfer_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count: number | null;
      /**
      * **weekly_transfer_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count: number | null;
      /**
      * **weekly_transfer_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count: number | null;
      /**
      * **weekly_transfer_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs: number | null;
      /**
      * **weekly_transfer_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs: number | null;
      /**
      * **weekly_transfer_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs: number | null;
      /**
      * **weekly_transfer_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs: number | null;
    }
    export interface Whereable {
      /**
      * **weekly_transfer_metrics.transfer_date**
      * - `date` in database
      * - Nullable, no default
      */
      transfer_date?: (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.DateString | Date) | db.Parameter<(db.DateString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_transfer_metrics.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_transfer_metrics.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_transfer_metrics.transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_transfer_metrics.unique_user_count**
      * - `int8` in database
      * - Nullable, no default
      */
      unique_user_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_transfer_metrics.zero_amount_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      zero_amount_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_transfer_metrics.completedfast_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedfast_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_transfer_metrics.completedslow_transfer_count**
      * - `int8` in database
      * - Nullable, no default
      */
      completedslow_transfer_count?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_transfer_metrics.fastpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttv_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_transfer_metrics.fastpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      fastpath_avg_ttr_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_transfer_metrics.slowpath_avg_ttv_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttv_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **weekly_transfer_metrics.slowpath_avg_ttr_in_secs**
      * - `numeric` in database
      * - Nullable, no default
      */
      slowpath_avg_ttr_in_secs?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      [key: string]: never;
    }
    export interface Updatable {
      [key: string]: never;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = aggregated_roots.Table | asset_balances.Table | asset_prices.Table | assets.Table | checkpoints.Table | daily_router_tvl.Table | daily_swap_tvl.Table | daily_swap_volume.Table | daily_transfer_metrics.Table | daily_transfer_volume.Table | hourly_swap_volume.Table | hourly_transfer_metrics.Table | hourly_transfer_volume.Table | merkle_cache.Table | messages.Table | propagated_roots.Table | received_aggregate_roots.Table | root_messages.Table | router_liquidity.Table | router_tvl.Table | routers.Table | routers_with_balances.Table | schema_migrations.Table | stableswap_exchanges.Table | stableswap_lp_balances.Table | stableswap_lp_transfers.Table | stableswap_pool_events.Table | stableswap_pools.Table | transfer_count.Table | transfers.Table | transfers_with_price.Table | transfers_with_ttr_ttv.Table | weekly_connext_metrics.Table | weekly_transfer_metrics.Table;
    export type Selectable = aggregated_roots.Selectable | asset_balances.Selectable | asset_prices.Selectable | assets.Selectable | checkpoints.Selectable | daily_router_tvl.Selectable | daily_swap_tvl.Selectable | daily_swap_volume.Selectable | daily_transfer_metrics.Selectable | daily_transfer_volume.Selectable | hourly_swap_volume.Selectable | hourly_transfer_metrics.Selectable | hourly_transfer_volume.Selectable | merkle_cache.Selectable | messages.Selectable | propagated_roots.Selectable | received_aggregate_roots.Selectable | root_messages.Selectable | router_liquidity.Selectable | router_tvl.Selectable | routers.Selectable | routers_with_balances.Selectable | schema_migrations.Selectable | stableswap_exchanges.Selectable | stableswap_lp_balances.Selectable | stableswap_lp_transfers.Selectable | stableswap_pool_events.Selectable | stableswap_pools.Selectable | transfer_count.Selectable | transfers.Selectable | transfers_with_price.Selectable | transfers_with_ttr_ttv.Selectable | weekly_connext_metrics.Selectable | weekly_transfer_metrics.Selectable;
    export type JSONSelectable = aggregated_roots.JSONSelectable | asset_balances.JSONSelectable | asset_prices.JSONSelectable | assets.JSONSelectable | checkpoints.JSONSelectable | daily_router_tvl.JSONSelectable | daily_swap_tvl.JSONSelectable | daily_swap_volume.JSONSelectable | daily_transfer_metrics.JSONSelectable | daily_transfer_volume.JSONSelectable | hourly_swap_volume.JSONSelectable | hourly_transfer_metrics.JSONSelectable | hourly_transfer_volume.JSONSelectable | merkle_cache.JSONSelectable | messages.JSONSelectable | propagated_roots.JSONSelectable | received_aggregate_roots.JSONSelectable | root_messages.JSONSelectable | router_liquidity.JSONSelectable | router_tvl.JSONSelectable | routers.JSONSelectable | routers_with_balances.JSONSelectable | schema_migrations.JSONSelectable | stableswap_exchanges.JSONSelectable | stableswap_lp_balances.JSONSelectable | stableswap_lp_transfers.JSONSelectable | stableswap_pool_events.JSONSelectable | stableswap_pools.JSONSelectable | transfer_count.JSONSelectable | transfers.JSONSelectable | transfers_with_price.JSONSelectable | transfers_with_ttr_ttv.JSONSelectable | weekly_connext_metrics.JSONSelectable | weekly_transfer_metrics.JSONSelectable;
    export type Whereable = aggregated_roots.Whereable | asset_balances.Whereable | asset_prices.Whereable | assets.Whereable | checkpoints.Whereable | daily_router_tvl.Whereable | daily_swap_tvl.Whereable | daily_swap_volume.Whereable | daily_transfer_metrics.Whereable | daily_transfer_volume.Whereable | hourly_swap_volume.Whereable | hourly_transfer_metrics.Whereable | hourly_transfer_volume.Whereable | merkle_cache.Whereable | messages.Whereable | propagated_roots.Whereable | received_aggregate_roots.Whereable | root_messages.Whereable | router_liquidity.Whereable | router_tvl.Whereable | routers.Whereable | routers_with_balances.Whereable | schema_migrations.Whereable | stableswap_exchanges.Whereable | stableswap_lp_balances.Whereable | stableswap_lp_transfers.Whereable | stableswap_pool_events.Whereable | stableswap_pools.Whereable | transfer_count.Whereable | transfers.Whereable | transfers_with_price.Whereable | transfers_with_ttr_ttv.Whereable | weekly_connext_metrics.Whereable | weekly_transfer_metrics.Whereable;
    export type Insertable = aggregated_roots.Insertable | asset_balances.Insertable | asset_prices.Insertable | assets.Insertable | checkpoints.Insertable | daily_router_tvl.Insertable | daily_swap_tvl.Insertable | daily_swap_volume.Insertable | daily_transfer_metrics.Insertable | daily_transfer_volume.Insertable | hourly_swap_volume.Insertable | hourly_transfer_metrics.Insertable | hourly_transfer_volume.Insertable | merkle_cache.Insertable | messages.Insertable | propagated_roots.Insertable | received_aggregate_roots.Insertable | root_messages.Insertable | router_liquidity.Insertable | router_tvl.Insertable | routers.Insertable | routers_with_balances.Insertable | schema_migrations.Insertable | stableswap_exchanges.Insertable | stableswap_lp_balances.Insertable | stableswap_lp_transfers.Insertable | stableswap_pool_events.Insertable | stableswap_pools.Insertable | transfer_count.Insertable | transfers.Insertable | transfers_with_price.Insertable | transfers_with_ttr_ttv.Insertable | weekly_connext_metrics.Insertable | weekly_transfer_metrics.Insertable;
    export type Updatable = aggregated_roots.Updatable | asset_balances.Updatable | asset_prices.Updatable | assets.Updatable | checkpoints.Updatable | daily_router_tvl.Updatable | daily_swap_tvl.Updatable | daily_swap_volume.Updatable | daily_transfer_metrics.Updatable | daily_transfer_volume.Updatable | hourly_swap_volume.Updatable | hourly_transfer_metrics.Updatable | hourly_transfer_volume.Updatable | merkle_cache.Updatable | messages.Updatable | propagated_roots.Updatable | received_aggregate_roots.Updatable | root_messages.Updatable | router_liquidity.Updatable | router_tvl.Updatable | routers.Updatable | routers_with_balances.Updatable | schema_migrations.Updatable | stableswap_exchanges.Updatable | stableswap_lp_balances.Updatable | stableswap_lp_transfers.Updatable | stableswap_pool_events.Updatable | stableswap_pools.Updatable | transfer_count.Updatable | transfers.Updatable | transfers_with_price.Updatable | transfers_with_ttr_ttv.Updatable | weekly_connext_metrics.Updatable | weekly_transfer_metrics.Updatable;
    export type UniqueIndex = aggregated_roots.UniqueIndex | asset_balances.UniqueIndex | asset_prices.UniqueIndex | assets.UniqueIndex | checkpoints.UniqueIndex | daily_router_tvl.UniqueIndex | daily_swap_tvl.UniqueIndex | daily_swap_volume.UniqueIndex | daily_transfer_metrics.UniqueIndex | daily_transfer_volume.UniqueIndex | hourly_swap_volume.UniqueIndex | hourly_transfer_metrics.UniqueIndex | hourly_transfer_volume.UniqueIndex | merkle_cache.UniqueIndex | messages.UniqueIndex | propagated_roots.UniqueIndex | received_aggregate_roots.UniqueIndex | root_messages.UniqueIndex | router_liquidity.UniqueIndex | router_tvl.UniqueIndex | routers.UniqueIndex | routers_with_balances.UniqueIndex | schema_migrations.UniqueIndex | stableswap_exchanges.UniqueIndex | stableswap_lp_balances.UniqueIndex | stableswap_lp_transfers.UniqueIndex | stableswap_pool_events.UniqueIndex | stableswap_pools.UniqueIndex | transfer_count.UniqueIndex | transfers.UniqueIndex | transfers_with_price.UniqueIndex | transfers_with_ttr_ttv.UniqueIndex | weekly_connext_metrics.UniqueIndex | weekly_transfer_metrics.UniqueIndex;
    export type Column = aggregated_roots.Column | asset_balances.Column | asset_prices.Column | assets.Column | checkpoints.Column | daily_router_tvl.Column | daily_swap_tvl.Column | daily_swap_volume.Column | daily_transfer_metrics.Column | daily_transfer_volume.Column | hourly_swap_volume.Column | hourly_transfer_metrics.Column | hourly_transfer_volume.Column | merkle_cache.Column | messages.Column | propagated_roots.Column | received_aggregate_roots.Column | root_messages.Column | router_liquidity.Column | router_tvl.Column | routers.Column | routers_with_balances.Column | schema_migrations.Column | stableswap_exchanges.Column | stableswap_lp_balances.Column | stableswap_lp_transfers.Column | stableswap_pool_events.Column | stableswap_pools.Column | transfer_count.Column | transfers.Column | transfers_with_price.Column | transfers_with_ttr_ttv.Column | weekly_connext_metrics.Column | weekly_transfer_metrics.Column;
  
    export type AllBaseTables = [aggregated_roots.Table, asset_balances.Table, asset_prices.Table, assets.Table, checkpoints.Table, daily_router_tvl.Table, merkle_cache.Table, messages.Table, propagated_roots.Table, received_aggregate_roots.Table, root_messages.Table, routers.Table, schema_migrations.Table, stableswap_exchanges.Table, stableswap_lp_balances.Table, stableswap_lp_transfers.Table, stableswap_pool_events.Table, stableswap_pools.Table, transfers.Table];
    export type AllForeignTables = [];
    export type AllViews = [daily_swap_tvl.Table, daily_swap_volume.Table, daily_transfer_metrics.Table, hourly_swap_volume.Table, hourly_transfer_metrics.Table, router_liquidity.Table, router_tvl.Table, routers_with_balances.Table, transfer_count.Table, transfers_with_price.Table, transfers_with_ttr_ttv.Table, weekly_connext_metrics.Table, weekly_transfer_metrics.Table];
    export type AllMaterializedViews = [daily_transfer_volume.Table, hourly_transfer_volume.Table];
    export type AllTablesAndViews = [aggregated_roots.Table, asset_balances.Table, asset_prices.Table, assets.Table, checkpoints.Table, daily_router_tvl.Table, daily_swap_tvl.Table, daily_swap_volume.Table, daily_transfer_metrics.Table, daily_transfer_volume.Table, hourly_swap_volume.Table, hourly_transfer_metrics.Table, hourly_transfer_volume.Table, merkle_cache.Table, messages.Table, propagated_roots.Table, received_aggregate_roots.Table, root_messages.Table, router_liquidity.Table, router_tvl.Table, routers.Table, routers_with_balances.Table, schema_migrations.Table, stableswap_exchanges.Table, stableswap_lp_balances.Table, stableswap_lp_transfers.Table, stableswap_pool_events.Table, stableswap_pools.Table, transfer_count.Table, transfers.Table, transfers_with_price.Table, transfers_with_ttr_ttv.Table, weekly_connext_metrics.Table, weekly_transfer_metrics.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "aggregated_roots": aggregated_roots.Selectable;
    "asset_balances": asset_balances.Selectable;
    "asset_prices": asset_prices.Selectable;
    "assets": assets.Selectable;
    "checkpoints": checkpoints.Selectable;
    "daily_router_tvl": daily_router_tvl.Selectable;
    "daily_swap_tvl": daily_swap_tvl.Selectable;
    "daily_swap_volume": daily_swap_volume.Selectable;
    "daily_transfer_metrics": daily_transfer_metrics.Selectable;
    "daily_transfer_volume": daily_transfer_volume.Selectable;
    "hourly_swap_volume": hourly_swap_volume.Selectable;
    "hourly_transfer_metrics": hourly_transfer_metrics.Selectable;
    "hourly_transfer_volume": hourly_transfer_volume.Selectable;
    "merkle_cache": merkle_cache.Selectable;
    "messages": messages.Selectable;
    "propagated_roots": propagated_roots.Selectable;
    "received_aggregate_roots": received_aggregate_roots.Selectable;
    "root_messages": root_messages.Selectable;
    "router_liquidity": router_liquidity.Selectable;
    "router_tvl": router_tvl.Selectable;
    "routers": routers.Selectable;
    "routers_with_balances": routers_with_balances.Selectable;
    "schema_migrations": schema_migrations.Selectable;
    "stableswap_exchanges": stableswap_exchanges.Selectable;
    "stableswap_lp_balances": stableswap_lp_balances.Selectable;
    "stableswap_lp_transfers": stableswap_lp_transfers.Selectable;
    "stableswap_pool_events": stableswap_pool_events.Selectable;
    "stableswap_pools": stableswap_pools.Selectable;
    "transfer_count": transfer_count.Selectable;
    "transfers": transfers.Selectable;
    "transfers_with_price": transfers_with_price.Selectable;
    "transfers_with_ttr_ttv": transfers_with_ttr_ttv.Selectable;
    "weekly_connext_metrics": weekly_connext_metrics.Selectable;
    "weekly_transfer_metrics": weekly_transfer_metrics.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "aggregated_roots": aggregated_roots.JSONSelectable;
    "asset_balances": asset_balances.JSONSelectable;
    "asset_prices": asset_prices.JSONSelectable;
    "assets": assets.JSONSelectable;
    "checkpoints": checkpoints.JSONSelectable;
    "daily_router_tvl": daily_router_tvl.JSONSelectable;
    "daily_swap_tvl": daily_swap_tvl.JSONSelectable;
    "daily_swap_volume": daily_swap_volume.JSONSelectable;
    "daily_transfer_metrics": daily_transfer_metrics.JSONSelectable;
    "daily_transfer_volume": daily_transfer_volume.JSONSelectable;
    "hourly_swap_volume": hourly_swap_volume.JSONSelectable;
    "hourly_transfer_metrics": hourly_transfer_metrics.JSONSelectable;
    "hourly_transfer_volume": hourly_transfer_volume.JSONSelectable;
    "merkle_cache": merkle_cache.JSONSelectable;
    "messages": messages.JSONSelectable;
    "propagated_roots": propagated_roots.JSONSelectable;
    "received_aggregate_roots": received_aggregate_roots.JSONSelectable;
    "root_messages": root_messages.JSONSelectable;
    "router_liquidity": router_liquidity.JSONSelectable;
    "router_tvl": router_tvl.JSONSelectable;
    "routers": routers.JSONSelectable;
    "routers_with_balances": routers_with_balances.JSONSelectable;
    "schema_migrations": schema_migrations.JSONSelectable;
    "stableswap_exchanges": stableswap_exchanges.JSONSelectable;
    "stableswap_lp_balances": stableswap_lp_balances.JSONSelectable;
    "stableswap_lp_transfers": stableswap_lp_transfers.JSONSelectable;
    "stableswap_pool_events": stableswap_pool_events.JSONSelectable;
    "stableswap_pools": stableswap_pools.JSONSelectable;
    "transfer_count": transfer_count.JSONSelectable;
    "transfers": transfers.JSONSelectable;
    "transfers_with_price": transfers_with_price.JSONSelectable;
    "transfers_with_ttr_ttv": transfers_with_ttr_ttv.JSONSelectable;
    "weekly_connext_metrics": weekly_connext_metrics.JSONSelectable;
    "weekly_transfer_metrics": weekly_transfer_metrics.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "aggregated_roots": aggregated_roots.Whereable;
    "asset_balances": asset_balances.Whereable;
    "asset_prices": asset_prices.Whereable;
    "assets": assets.Whereable;
    "checkpoints": checkpoints.Whereable;
    "daily_router_tvl": daily_router_tvl.Whereable;
    "daily_swap_tvl": daily_swap_tvl.Whereable;
    "daily_swap_volume": daily_swap_volume.Whereable;
    "daily_transfer_metrics": daily_transfer_metrics.Whereable;
    "daily_transfer_volume": daily_transfer_volume.Whereable;
    "hourly_swap_volume": hourly_swap_volume.Whereable;
    "hourly_transfer_metrics": hourly_transfer_metrics.Whereable;
    "hourly_transfer_volume": hourly_transfer_volume.Whereable;
    "merkle_cache": merkle_cache.Whereable;
    "messages": messages.Whereable;
    "propagated_roots": propagated_roots.Whereable;
    "received_aggregate_roots": received_aggregate_roots.Whereable;
    "root_messages": root_messages.Whereable;
    "router_liquidity": router_liquidity.Whereable;
    "router_tvl": router_tvl.Whereable;
    "routers": routers.Whereable;
    "routers_with_balances": routers_with_balances.Whereable;
    "schema_migrations": schema_migrations.Whereable;
    "stableswap_exchanges": stableswap_exchanges.Whereable;
    "stableswap_lp_balances": stableswap_lp_balances.Whereable;
    "stableswap_lp_transfers": stableswap_lp_transfers.Whereable;
    "stableswap_pool_events": stableswap_pool_events.Whereable;
    "stableswap_pools": stableswap_pools.Whereable;
    "transfer_count": transfer_count.Whereable;
    "transfers": transfers.Whereable;
    "transfers_with_price": transfers_with_price.Whereable;
    "transfers_with_ttr_ttv": transfers_with_ttr_ttv.Whereable;
    "weekly_connext_metrics": weekly_connext_metrics.Whereable;
    "weekly_transfer_metrics": weekly_transfer_metrics.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "aggregated_roots": aggregated_roots.Insertable;
    "asset_balances": asset_balances.Insertable;
    "asset_prices": asset_prices.Insertable;
    "assets": assets.Insertable;
    "checkpoints": checkpoints.Insertable;
    "daily_router_tvl": daily_router_tvl.Insertable;
    "daily_swap_tvl": daily_swap_tvl.Insertable;
    "daily_swap_volume": daily_swap_volume.Insertable;
    "daily_transfer_metrics": daily_transfer_metrics.Insertable;
    "daily_transfer_volume": daily_transfer_volume.Insertable;
    "hourly_swap_volume": hourly_swap_volume.Insertable;
    "hourly_transfer_metrics": hourly_transfer_metrics.Insertable;
    "hourly_transfer_volume": hourly_transfer_volume.Insertable;
    "merkle_cache": merkle_cache.Insertable;
    "messages": messages.Insertable;
    "propagated_roots": propagated_roots.Insertable;
    "received_aggregate_roots": received_aggregate_roots.Insertable;
    "root_messages": root_messages.Insertable;
    "router_liquidity": router_liquidity.Insertable;
    "router_tvl": router_tvl.Insertable;
    "routers": routers.Insertable;
    "routers_with_balances": routers_with_balances.Insertable;
    "schema_migrations": schema_migrations.Insertable;
    "stableswap_exchanges": stableswap_exchanges.Insertable;
    "stableswap_lp_balances": stableswap_lp_balances.Insertable;
    "stableswap_lp_transfers": stableswap_lp_transfers.Insertable;
    "stableswap_pool_events": stableswap_pool_events.Insertable;
    "stableswap_pools": stableswap_pools.Insertable;
    "transfer_count": transfer_count.Insertable;
    "transfers": transfers.Insertable;
    "transfers_with_price": transfers_with_price.Insertable;
    "transfers_with_ttr_ttv": transfers_with_ttr_ttv.Insertable;
    "weekly_connext_metrics": weekly_connext_metrics.Insertable;
    "weekly_transfer_metrics": weekly_transfer_metrics.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "aggregated_roots": aggregated_roots.Updatable;
    "asset_balances": asset_balances.Updatable;
    "asset_prices": asset_prices.Updatable;
    "assets": assets.Updatable;
    "checkpoints": checkpoints.Updatable;
    "daily_router_tvl": daily_router_tvl.Updatable;
    "daily_swap_tvl": daily_swap_tvl.Updatable;
    "daily_swap_volume": daily_swap_volume.Updatable;
    "daily_transfer_metrics": daily_transfer_metrics.Updatable;
    "daily_transfer_volume": daily_transfer_volume.Updatable;
    "hourly_swap_volume": hourly_swap_volume.Updatable;
    "hourly_transfer_metrics": hourly_transfer_metrics.Updatable;
    "hourly_transfer_volume": hourly_transfer_volume.Updatable;
    "merkle_cache": merkle_cache.Updatable;
    "messages": messages.Updatable;
    "propagated_roots": propagated_roots.Updatable;
    "received_aggregate_roots": received_aggregate_roots.Updatable;
    "root_messages": root_messages.Updatable;
    "router_liquidity": router_liquidity.Updatable;
    "router_tvl": router_tvl.Updatable;
    "routers": routers.Updatable;
    "routers_with_balances": routers_with_balances.Updatable;
    "schema_migrations": schema_migrations.Updatable;
    "stableswap_exchanges": stableswap_exchanges.Updatable;
    "stableswap_lp_balances": stableswap_lp_balances.Updatable;
    "stableswap_lp_transfers": stableswap_lp_transfers.Updatable;
    "stableswap_pool_events": stableswap_pool_events.Updatable;
    "stableswap_pools": stableswap_pools.Updatable;
    "transfer_count": transfer_count.Updatable;
    "transfers": transfers.Updatable;
    "transfers_with_price": transfers_with_price.Updatable;
    "transfers_with_ttr_ttv": transfers_with_ttr_ttv.Updatable;
    "weekly_connext_metrics": weekly_connext_metrics.Updatable;
    "weekly_transfer_metrics": weekly_transfer_metrics.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "aggregated_roots": aggregated_roots.UniqueIndex;
    "asset_balances": asset_balances.UniqueIndex;
    "asset_prices": asset_prices.UniqueIndex;
    "assets": assets.UniqueIndex;
    "checkpoints": checkpoints.UniqueIndex;
    "daily_router_tvl": daily_router_tvl.UniqueIndex;
    "daily_swap_tvl": daily_swap_tvl.UniqueIndex;
    "daily_swap_volume": daily_swap_volume.UniqueIndex;
    "daily_transfer_metrics": daily_transfer_metrics.UniqueIndex;
    "daily_transfer_volume": daily_transfer_volume.UniqueIndex;
    "hourly_swap_volume": hourly_swap_volume.UniqueIndex;
    "hourly_transfer_metrics": hourly_transfer_metrics.UniqueIndex;
    "hourly_transfer_volume": hourly_transfer_volume.UniqueIndex;
    "merkle_cache": merkle_cache.UniqueIndex;
    "messages": messages.UniqueIndex;
    "propagated_roots": propagated_roots.UniqueIndex;
    "received_aggregate_roots": received_aggregate_roots.UniqueIndex;
    "root_messages": root_messages.UniqueIndex;
    "router_liquidity": router_liquidity.UniqueIndex;
    "router_tvl": router_tvl.UniqueIndex;
    "routers": routers.UniqueIndex;
    "routers_with_balances": routers_with_balances.UniqueIndex;
    "schema_migrations": schema_migrations.UniqueIndex;
    "stableswap_exchanges": stableswap_exchanges.UniqueIndex;
    "stableswap_lp_balances": stableswap_lp_balances.UniqueIndex;
    "stableswap_lp_transfers": stableswap_lp_transfers.UniqueIndex;
    "stableswap_pool_events": stableswap_pool_events.UniqueIndex;
    "stableswap_pools": stableswap_pools.UniqueIndex;
    "transfer_count": transfer_count.UniqueIndex;
    "transfers": transfers.UniqueIndex;
    "transfers_with_price": transfers_with_price.UniqueIndex;
    "transfers_with_ttr_ttv": transfers_with_ttr_ttv.UniqueIndex;
    "weekly_connext_metrics": weekly_connext_metrics.UniqueIndex;
    "weekly_transfer_metrics": weekly_transfer_metrics.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "aggregated_roots": aggregated_roots.Column;
    "asset_balances": asset_balances.Column;
    "asset_prices": asset_prices.Column;
    "assets": assets.Column;
    "checkpoints": checkpoints.Column;
    "daily_router_tvl": daily_router_tvl.Column;
    "daily_swap_tvl": daily_swap_tvl.Column;
    "daily_swap_volume": daily_swap_volume.Column;
    "daily_transfer_metrics": daily_transfer_metrics.Column;
    "daily_transfer_volume": daily_transfer_volume.Column;
    "hourly_swap_volume": hourly_swap_volume.Column;
    "hourly_transfer_metrics": hourly_transfer_metrics.Column;
    "hourly_transfer_volume": hourly_transfer_volume.Column;
    "merkle_cache": merkle_cache.Column;
    "messages": messages.Column;
    "propagated_roots": propagated_roots.Column;
    "received_aggregate_roots": received_aggregate_roots.Column;
    "root_messages": root_messages.Column;
    "router_liquidity": router_liquidity.Column;
    "router_tvl": router_tvl.Column;
    "routers": routers.Column;
    "routers_with_balances": routers_with_balances.Column;
    "schema_migrations": schema_migrations.Column;
    "stableswap_exchanges": stableswap_exchanges.Column;
    "stableswap_lp_balances": stableswap_lp_balances.Column;
    "stableswap_lp_transfers": stableswap_lp_transfers.Column;
    "stableswap_pool_events": stableswap_pool_events.Column;
    "stableswap_pools": stableswap_pools.Column;
    "transfer_count": transfer_count.Column;
    "transfers": transfers.Column;
    "transfers_with_price": transfers_with_price.Column;
    "transfers_with_ttr_ttv": transfers_with_ttr_ttv.Column;
    "weekly_connext_metrics": weekly_connext_metrics.Column;
    "weekly_transfer_metrics": weekly_transfer_metrics.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "aggregated_roots": aggregated_roots.SQL;
    "asset_balances": asset_balances.SQL;
    "asset_prices": asset_prices.SQL;
    "assets": assets.SQL;
    "checkpoints": checkpoints.SQL;
    "daily_router_tvl": daily_router_tvl.SQL;
    "daily_swap_tvl": daily_swap_tvl.SQL;
    "daily_swap_volume": daily_swap_volume.SQL;
    "daily_transfer_metrics": daily_transfer_metrics.SQL;
    "daily_transfer_volume": daily_transfer_volume.SQL;
    "hourly_swap_volume": hourly_swap_volume.SQL;
    "hourly_transfer_metrics": hourly_transfer_metrics.SQL;
    "hourly_transfer_volume": hourly_transfer_volume.SQL;
    "merkle_cache": merkle_cache.SQL;
    "messages": messages.SQL;
    "propagated_roots": propagated_roots.SQL;
    "received_aggregate_roots": received_aggregate_roots.SQL;
    "root_messages": root_messages.SQL;
    "router_liquidity": router_liquidity.SQL;
    "router_tvl": router_tvl.SQL;
    "routers": routers.SQL;
    "routers_with_balances": routers_with_balances.SQL;
    "schema_migrations": schema_migrations.SQL;
    "stableswap_exchanges": stableswap_exchanges.SQL;
    "stableswap_lp_balances": stableswap_lp_balances.SQL;
    "stableswap_lp_transfers": stableswap_lp_transfers.SQL;
    "stableswap_pool_events": stableswap_pool_events.SQL;
    "stableswap_pools": stableswap_pools.SQL;
    "transfer_count": transfer_count.SQL;
    "transfers": transfers.SQL;
    "transfers_with_price": transfers_with_price.SQL;
    "transfers_with_ttr_ttv": transfers_with_ttr_ttv.SQL;
    "weekly_connext_metrics": weekly_connext_metrics.SQL;
    "weekly_transfer_metrics": weekly_transfer_metrics.SQL;
  }[T];

}
