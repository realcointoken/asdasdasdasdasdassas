schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type consensystest_AggregateRoot {
  id: ID!
  root: consensystest_Bytes!
  blockNumber: BigInt!
}

input consensystest_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: consensystest_Bytes
  root_not: consensystest_Bytes
  root_gt: consensystest_Bytes
  root_lt: consensystest_Bytes
  root_gte: consensystest_Bytes
  root_lte: consensystest_Bytes
  root_in: [consensystest_Bytes!]
  root_not_in: [consensystest_Bytes!]
  root_contains: consensystest_Bytes
  root_not_contains: consensystest_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_AggregateRoot_filter]
  or: [consensystest_AggregateRoot_filter]
}

enum consensystest_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type consensystest_Asset {
  id: ID!
  key: consensystest_Bytes
  decimal: BigInt
  canonicalId: consensystest_Bytes
  canonicalDomain: BigInt
  adoptedAsset: consensystest_Bytes
  localAsset: consensystest_Bytes
  blockNumber: BigInt
  status: consensystest_AssetStatus
}

type consensystest_AssetBalance {
  id: ID!
  amount: BigInt!
  locked: BigInt!
  supplied: BigInt!
  removed: BigInt!
  router: consensystest_Router!
  asset: consensystest_Asset!
  feesEarned: BigInt!
}

input consensystest_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  locked: BigInt
  locked_not: BigInt
  locked_gt: BigInt
  locked_lt: BigInt
  locked_gte: BigInt
  locked_lte: BigInt
  locked_in: [BigInt!]
  locked_not_in: [BigInt!]
  supplied: BigInt
  supplied_not: BigInt
  supplied_gt: BigInt
  supplied_lt: BigInt
  supplied_gte: BigInt
  supplied_lte: BigInt
  supplied_in: [BigInt!]
  supplied_not_in: [BigInt!]
  removed: BigInt
  removed_not: BigInt
  removed_gt: BigInt
  removed_lt: BigInt
  removed_gte: BigInt
  removed_lte: BigInt
  removed_in: [BigInt!]
  removed_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: consensystest_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: consensystest_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_AssetBalance_filter]
  or: [consensystest_AssetBalance_filter]
}

enum consensystest_AssetBalance_orderBy {
  id
  amount
  locked
  supplied
  removed
  router
  asset
  feesEarned
}

type consensystest_AssetStatus {
  id: ID!
  status: Boolean
}

input consensystest_AssetStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: Boolean
  status_not: Boolean
  status_in: [Boolean!]
  status_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_AssetStatus_filter]
  or: [consensystest_AssetStatus_filter]
}

enum consensystest_AssetStatus_orderBy {
  id
  status
}

input consensystest_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: consensystest_Bytes
  key_not: consensystest_Bytes
  key_gt: consensystest_Bytes
  key_lt: consensystest_Bytes
  key_gte: consensystest_Bytes
  key_lte: consensystest_Bytes
  key_in: [consensystest_Bytes!]
  key_not_in: [consensystest_Bytes!]
  key_contains: consensystest_Bytes
  key_not_contains: consensystest_Bytes
  decimal: BigInt
  decimal_not: BigInt
  decimal_gt: BigInt
  decimal_lt: BigInt
  decimal_gte: BigInt
  decimal_lte: BigInt
  decimal_in: [BigInt!]
  decimal_not_in: [BigInt!]
  canonicalId: consensystest_Bytes
  canonicalId_not: consensystest_Bytes
  canonicalId_gt: consensystest_Bytes
  canonicalId_lt: consensystest_Bytes
  canonicalId_gte: consensystest_Bytes
  canonicalId_lte: consensystest_Bytes
  canonicalId_in: [consensystest_Bytes!]
  canonicalId_not_in: [consensystest_Bytes!]
  canonicalId_contains: consensystest_Bytes
  canonicalId_not_contains: consensystest_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: consensystest_Bytes
  adoptedAsset_not: consensystest_Bytes
  adoptedAsset_gt: consensystest_Bytes
  adoptedAsset_lt: consensystest_Bytes
  adoptedAsset_gte: consensystest_Bytes
  adoptedAsset_lte: consensystest_Bytes
  adoptedAsset_in: [consensystest_Bytes!]
  adoptedAsset_not_in: [consensystest_Bytes!]
  adoptedAsset_contains: consensystest_Bytes
  adoptedAsset_not_contains: consensystest_Bytes
  localAsset: consensystest_Bytes
  localAsset_not: consensystest_Bytes
  localAsset_gt: consensystest_Bytes
  localAsset_lt: consensystest_Bytes
  localAsset_gte: consensystest_Bytes
  localAsset_lte: consensystest_Bytes
  localAsset_in: [consensystest_Bytes!]
  localAsset_not_in: [consensystest_Bytes!]
  localAsset_contains: consensystest_Bytes
  localAsset_not_contains: consensystest_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_: consensystest_AssetStatus_filter
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_Asset_filter]
  or: [consensystest_Asset_filter]
}

enum consensystest_Asset_orderBy {
  id
  key
  decimal
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
  status
}

scalar consensystest_BigDecimal

scalar BigInt

input consensystest_BlockChangedFilter {
  number_gte: Int!
}

input consensystest_Block_height {
  hash: consensystest_Bytes
  number: Int
  number_gte: Int
}

scalar consensystest_Bytes

type consensystest_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: consensystest_Bytes
  rootManager: consensystest_Bytes
  mirrorConnector: consensystest_Bytes
}

input consensystest_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: consensystest_Bytes
  amb_not: consensystest_Bytes
  amb_gt: consensystest_Bytes
  amb_lt: consensystest_Bytes
  amb_gte: consensystest_Bytes
  amb_lte: consensystest_Bytes
  amb_in: [consensystest_Bytes!]
  amb_not_in: [consensystest_Bytes!]
  amb_contains: consensystest_Bytes
  amb_not_contains: consensystest_Bytes
  rootManager: consensystest_Bytes
  rootManager_not: consensystest_Bytes
  rootManager_gt: consensystest_Bytes
  rootManager_lt: consensystest_Bytes
  rootManager_gte: consensystest_Bytes
  rootManager_lte: consensystest_Bytes
  rootManager_in: [consensystest_Bytes!]
  rootManager_not_in: [consensystest_Bytes!]
  rootManager_contains: consensystest_Bytes
  rootManager_not_contains: consensystest_Bytes
  mirrorConnector: consensystest_Bytes
  mirrorConnector_not: consensystest_Bytes
  mirrorConnector_gt: consensystest_Bytes
  mirrorConnector_lt: consensystest_Bytes
  mirrorConnector_gte: consensystest_Bytes
  mirrorConnector_lte: consensystest_Bytes
  mirrorConnector_in: [consensystest_Bytes!]
  mirrorConnector_not_in: [consensystest_Bytes!]
  mirrorConnector_contains: consensystest_Bytes
  mirrorConnector_not_contains: consensystest_Bytes
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_ConnectorMeta_filter]
  or: [consensystest_ConnectorMeta_filter]
}

enum consensystest_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type consensystest_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: consensystest_Bytes
  nonce: BigInt
  status: consensystest_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: consensystest_Router_orderBy, orderDirection: consensystest_OrderDirection, where: consensystest_Router_filter): [consensystest_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: consensystest_Bytes
  delegate: consensystest_Bytes
  receiveLocal: Boolean
  callData: consensystest_Bytes
  slippage: BigInt
  bumpSlippageCount: BigInt
  originSender: consensystest_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: consensystest_Bytes
  asset: consensystest_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: consensystest_Bytes
  executedTransactionHash: consensystest_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: consensystest_Bytes
  reconciledCaller: consensystest_Bytes
  reconciledTransactionHash: consensystest_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: consensystest_Bytes
}

input consensystest_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: consensystest_Bytes
  transferId_not: consensystest_Bytes
  transferId_gt: consensystest_Bytes
  transferId_lt: consensystest_Bytes
  transferId_gte: consensystest_Bytes
  transferId_lte: consensystest_Bytes
  transferId_in: [consensystest_Bytes!]
  transferId_not_in: [consensystest_Bytes!]
  transferId_contains: consensystest_Bytes
  transferId_not_contains: consensystest_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: consensystest_TransferStatus
  status_not: consensystest_TransferStatus
  status_in: [consensystest_TransferStatus!]
  status_not_in: [consensystest_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: consensystest_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: consensystest_Bytes
  to_not: consensystest_Bytes
  to_gt: consensystest_Bytes
  to_lt: consensystest_Bytes
  to_gte: consensystest_Bytes
  to_lte: consensystest_Bytes
  to_in: [consensystest_Bytes!]
  to_not_in: [consensystest_Bytes!]
  to_contains: consensystest_Bytes
  to_not_contains: consensystest_Bytes
  delegate: consensystest_Bytes
  delegate_not: consensystest_Bytes
  delegate_gt: consensystest_Bytes
  delegate_lt: consensystest_Bytes
  delegate_gte: consensystest_Bytes
  delegate_lte: consensystest_Bytes
  delegate_in: [consensystest_Bytes!]
  delegate_not_in: [consensystest_Bytes!]
  delegate_contains: consensystest_Bytes
  delegate_not_contains: consensystest_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: consensystest_Bytes
  callData_not: consensystest_Bytes
  callData_gt: consensystest_Bytes
  callData_lt: consensystest_Bytes
  callData_gte: consensystest_Bytes
  callData_lte: consensystest_Bytes
  callData_in: [consensystest_Bytes!]
  callData_not_in: [consensystest_Bytes!]
  callData_contains: consensystest_Bytes
  callData_not_contains: consensystest_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  bumpSlippageCount: BigInt
  bumpSlippageCount_not: BigInt
  bumpSlippageCount_gt: BigInt
  bumpSlippageCount_lt: BigInt
  bumpSlippageCount_gte: BigInt
  bumpSlippageCount_lte: BigInt
  bumpSlippageCount_in: [BigInt!]
  bumpSlippageCount_not_in: [BigInt!]
  originSender: consensystest_Bytes
  originSender_not: consensystest_Bytes
  originSender_gt: consensystest_Bytes
  originSender_lt: consensystest_Bytes
  originSender_gte: consensystest_Bytes
  originSender_lte: consensystest_Bytes
  originSender_in: [consensystest_Bytes!]
  originSender_not_in: [consensystest_Bytes!]
  originSender_contains: consensystest_Bytes
  originSender_not_contains: consensystest_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: consensystest_Bytes
  canonicalId_not: consensystest_Bytes
  canonicalId_gt: consensystest_Bytes
  canonicalId_lt: consensystest_Bytes
  canonicalId_gte: consensystest_Bytes
  canonicalId_lte: consensystest_Bytes
  canonicalId_in: [consensystest_Bytes!]
  canonicalId_not_in: [consensystest_Bytes!]
  canonicalId_contains: consensystest_Bytes
  canonicalId_not_contains: consensystest_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: consensystest_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: consensystest_Bytes
  executedCaller_not: consensystest_Bytes
  executedCaller_gt: consensystest_Bytes
  executedCaller_lt: consensystest_Bytes
  executedCaller_gte: consensystest_Bytes
  executedCaller_lte: consensystest_Bytes
  executedCaller_in: [consensystest_Bytes!]
  executedCaller_not_in: [consensystest_Bytes!]
  executedCaller_contains: consensystest_Bytes
  executedCaller_not_contains: consensystest_Bytes
  executedTransactionHash: consensystest_Bytes
  executedTransactionHash_not: consensystest_Bytes
  executedTransactionHash_gt: consensystest_Bytes
  executedTransactionHash_lt: consensystest_Bytes
  executedTransactionHash_gte: consensystest_Bytes
  executedTransactionHash_lte: consensystest_Bytes
  executedTransactionHash_in: [consensystest_Bytes!]
  executedTransactionHash_not_in: [consensystest_Bytes!]
  executedTransactionHash_contains: consensystest_Bytes
  executedTransactionHash_not_contains: consensystest_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: consensystest_Bytes
  executedTxOrigin_not: consensystest_Bytes
  executedTxOrigin_gt: consensystest_Bytes
  executedTxOrigin_lt: consensystest_Bytes
  executedTxOrigin_gte: consensystest_Bytes
  executedTxOrigin_lte: consensystest_Bytes
  executedTxOrigin_in: [consensystest_Bytes!]
  executedTxOrigin_not_in: [consensystest_Bytes!]
  executedTxOrigin_contains: consensystest_Bytes
  executedTxOrigin_not_contains: consensystest_Bytes
  reconciledCaller: consensystest_Bytes
  reconciledCaller_not: consensystest_Bytes
  reconciledCaller_gt: consensystest_Bytes
  reconciledCaller_lt: consensystest_Bytes
  reconciledCaller_gte: consensystest_Bytes
  reconciledCaller_lte: consensystest_Bytes
  reconciledCaller_in: [consensystest_Bytes!]
  reconciledCaller_not_in: [consensystest_Bytes!]
  reconciledCaller_contains: consensystest_Bytes
  reconciledCaller_not_contains: consensystest_Bytes
  reconciledTransactionHash: consensystest_Bytes
  reconciledTransactionHash_not: consensystest_Bytes
  reconciledTransactionHash_gt: consensystest_Bytes
  reconciledTransactionHash_lt: consensystest_Bytes
  reconciledTransactionHash_gte: consensystest_Bytes
  reconciledTransactionHash_lte: consensystest_Bytes
  reconciledTransactionHash_in: [consensystest_Bytes!]
  reconciledTransactionHash_not_in: [consensystest_Bytes!]
  reconciledTransactionHash_contains: consensystest_Bytes
  reconciledTransactionHash_not_contains: consensystest_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: consensystest_Bytes
  reconciledTxOrigin_not: consensystest_Bytes
  reconciledTxOrigin_gt: consensystest_Bytes
  reconciledTxOrigin_lt: consensystest_Bytes
  reconciledTxOrigin_gte: consensystest_Bytes
  reconciledTxOrigin_lte: consensystest_Bytes
  reconciledTxOrigin_in: [consensystest_Bytes!]
  reconciledTxOrigin_not_in: [consensystest_Bytes!]
  reconciledTxOrigin_contains: consensystest_Bytes
  reconciledTxOrigin_not_contains: consensystest_Bytes
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_DestinationTransfer_filter]
  or: [consensystest_DestinationTransfer_filter]
}

enum consensystest_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  bumpSlippageCount
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

"""Defines the order direction, either ascending or descending"""
enum consensystest_OrderDirection {
  asc
  desc
}

type consensystest_OriginMessage {
  id: ID!
  transferId: consensystest_Bytes
  destinationDomain: BigInt
  leaf: consensystest_Bytes
  index: BigInt
  message: consensystest_Bytes
  root: consensystest_Bytes
  transactionHash: consensystest_Bytes
  blockNumber: BigInt
  rootCount: consensystest_RootCount
}

input consensystest_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: consensystest_Bytes
  transferId_not: consensystest_Bytes
  transferId_gt: consensystest_Bytes
  transferId_lt: consensystest_Bytes
  transferId_gte: consensystest_Bytes
  transferId_lte: consensystest_Bytes
  transferId_in: [consensystest_Bytes!]
  transferId_not_in: [consensystest_Bytes!]
  transferId_contains: consensystest_Bytes
  transferId_not_contains: consensystest_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: consensystest_Bytes
  leaf_not: consensystest_Bytes
  leaf_gt: consensystest_Bytes
  leaf_lt: consensystest_Bytes
  leaf_gte: consensystest_Bytes
  leaf_lte: consensystest_Bytes
  leaf_in: [consensystest_Bytes!]
  leaf_not_in: [consensystest_Bytes!]
  leaf_contains: consensystest_Bytes
  leaf_not_contains: consensystest_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: consensystest_Bytes
  message_not: consensystest_Bytes
  message_gt: consensystest_Bytes
  message_lt: consensystest_Bytes
  message_gte: consensystest_Bytes
  message_lte: consensystest_Bytes
  message_in: [consensystest_Bytes!]
  message_not_in: [consensystest_Bytes!]
  message_contains: consensystest_Bytes
  message_not_contains: consensystest_Bytes
  root: consensystest_Bytes
  root_not: consensystest_Bytes
  root_gt: consensystest_Bytes
  root_lt: consensystest_Bytes
  root_gte: consensystest_Bytes
  root_lte: consensystest_Bytes
  root_in: [consensystest_Bytes!]
  root_not_in: [consensystest_Bytes!]
  root_contains: consensystest_Bytes
  root_not_contains: consensystest_Bytes
  transactionHash: consensystest_Bytes
  transactionHash_not: consensystest_Bytes
  transactionHash_gt: consensystest_Bytes
  transactionHash_lt: consensystest_Bytes
  transactionHash_gte: consensystest_Bytes
  transactionHash_lte: consensystest_Bytes
  transactionHash_in: [consensystest_Bytes!]
  transactionHash_not_in: [consensystest_Bytes!]
  transactionHash_contains: consensystest_Bytes
  transactionHash_not_contains: consensystest_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: consensystest_RootCount_filter
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_OriginMessage_filter]
  or: [consensystest_OriginMessage_filter]
}

enum consensystest_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type consensystest_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: consensystest_Bytes
  nonce: BigInt
  status: consensystest_TransferStatus
  messageHash: consensystest_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: consensystest_Bytes
  delegate: consensystest_Bytes
  receiveLocal: Boolean
  callData: consensystest_Bytes
  slippage: BigInt
  originSender: consensystest_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: consensystest_Bytes
  asset: consensystest_Asset
  transactingAsset: consensystest_Bytes
  message: consensystest_OriginMessage
  bumpRelayerFeeCount: BigInt
  relayerFees(skip: Int = 0, first: Int = 100, orderBy: consensystest_RelayerFee_orderBy, orderDirection: consensystest_OrderDirection, where: consensystest_RelayerFee_filter): [consensystest_RelayerFee!]
  initialRelayerFeeAsset: consensystest_Bytes
  caller: consensystest_Bytes
  transactionHash: consensystest_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: consensystest_Bytes
}

input consensystest_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: consensystest_Bytes
  transferId_not: consensystest_Bytes
  transferId_gt: consensystest_Bytes
  transferId_lt: consensystest_Bytes
  transferId_gte: consensystest_Bytes
  transferId_lte: consensystest_Bytes
  transferId_in: [consensystest_Bytes!]
  transferId_not_in: [consensystest_Bytes!]
  transferId_contains: consensystest_Bytes
  transferId_not_contains: consensystest_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: consensystest_TransferStatus
  status_not: consensystest_TransferStatus
  status_in: [consensystest_TransferStatus!]
  status_not_in: [consensystest_TransferStatus!]
  messageHash: consensystest_Bytes
  messageHash_not: consensystest_Bytes
  messageHash_gt: consensystest_Bytes
  messageHash_lt: consensystest_Bytes
  messageHash_gte: consensystest_Bytes
  messageHash_lte: consensystest_Bytes
  messageHash_in: [consensystest_Bytes!]
  messageHash_not_in: [consensystest_Bytes!]
  messageHash_contains: consensystest_Bytes
  messageHash_not_contains: consensystest_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: consensystest_Bytes
  to_not: consensystest_Bytes
  to_gt: consensystest_Bytes
  to_lt: consensystest_Bytes
  to_gte: consensystest_Bytes
  to_lte: consensystest_Bytes
  to_in: [consensystest_Bytes!]
  to_not_in: [consensystest_Bytes!]
  to_contains: consensystest_Bytes
  to_not_contains: consensystest_Bytes
  delegate: consensystest_Bytes
  delegate_not: consensystest_Bytes
  delegate_gt: consensystest_Bytes
  delegate_lt: consensystest_Bytes
  delegate_gte: consensystest_Bytes
  delegate_lte: consensystest_Bytes
  delegate_in: [consensystest_Bytes!]
  delegate_not_in: [consensystest_Bytes!]
  delegate_contains: consensystest_Bytes
  delegate_not_contains: consensystest_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: consensystest_Bytes
  callData_not: consensystest_Bytes
  callData_gt: consensystest_Bytes
  callData_lt: consensystest_Bytes
  callData_gte: consensystest_Bytes
  callData_lte: consensystest_Bytes
  callData_in: [consensystest_Bytes!]
  callData_not_in: [consensystest_Bytes!]
  callData_contains: consensystest_Bytes
  callData_not_contains: consensystest_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: consensystest_Bytes
  originSender_not: consensystest_Bytes
  originSender_gt: consensystest_Bytes
  originSender_lt: consensystest_Bytes
  originSender_gte: consensystest_Bytes
  originSender_lte: consensystest_Bytes
  originSender_in: [consensystest_Bytes!]
  originSender_not_in: [consensystest_Bytes!]
  originSender_contains: consensystest_Bytes
  originSender_not_contains: consensystest_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: consensystest_Bytes
  canonicalId_not: consensystest_Bytes
  canonicalId_gt: consensystest_Bytes
  canonicalId_lt: consensystest_Bytes
  canonicalId_gte: consensystest_Bytes
  canonicalId_lte: consensystest_Bytes
  canonicalId_in: [consensystest_Bytes!]
  canonicalId_not_in: [consensystest_Bytes!]
  canonicalId_contains: consensystest_Bytes
  canonicalId_not_contains: consensystest_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: consensystest_Asset_filter
  transactingAsset: consensystest_Bytes
  transactingAsset_not: consensystest_Bytes
  transactingAsset_gt: consensystest_Bytes
  transactingAsset_lt: consensystest_Bytes
  transactingAsset_gte: consensystest_Bytes
  transactingAsset_lte: consensystest_Bytes
  transactingAsset_in: [consensystest_Bytes!]
  transactingAsset_not_in: [consensystest_Bytes!]
  transactingAsset_contains: consensystest_Bytes
  transactingAsset_not_contains: consensystest_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: consensystest_OriginMessage_filter
  bumpRelayerFeeCount: BigInt
  bumpRelayerFeeCount_not: BigInt
  bumpRelayerFeeCount_gt: BigInt
  bumpRelayerFeeCount_lt: BigInt
  bumpRelayerFeeCount_gte: BigInt
  bumpRelayerFeeCount_lte: BigInt
  bumpRelayerFeeCount_in: [BigInt!]
  bumpRelayerFeeCount_not_in: [BigInt!]
  relayerFees: [String!]
  relayerFees_not: [String!]
  relayerFees_contains: [String!]
  relayerFees_contains_nocase: [String!]
  relayerFees_not_contains: [String!]
  relayerFees_not_contains_nocase: [String!]
  relayerFees_: consensystest_RelayerFee_filter
  initialRelayerFeeAsset: consensystest_Bytes
  initialRelayerFeeAsset_not: consensystest_Bytes
  initialRelayerFeeAsset_gt: consensystest_Bytes
  initialRelayerFeeAsset_lt: consensystest_Bytes
  initialRelayerFeeAsset_gte: consensystest_Bytes
  initialRelayerFeeAsset_lte: consensystest_Bytes
  initialRelayerFeeAsset_in: [consensystest_Bytes!]
  initialRelayerFeeAsset_not_in: [consensystest_Bytes!]
  initialRelayerFeeAsset_contains: consensystest_Bytes
  initialRelayerFeeAsset_not_contains: consensystest_Bytes
  caller: consensystest_Bytes
  caller_not: consensystest_Bytes
  caller_gt: consensystest_Bytes
  caller_lt: consensystest_Bytes
  caller_gte: consensystest_Bytes
  caller_lte: consensystest_Bytes
  caller_in: [consensystest_Bytes!]
  caller_not_in: [consensystest_Bytes!]
  caller_contains: consensystest_Bytes
  caller_not_contains: consensystest_Bytes
  transactionHash: consensystest_Bytes
  transactionHash_not: consensystest_Bytes
  transactionHash_gt: consensystest_Bytes
  transactionHash_lt: consensystest_Bytes
  transactionHash_gte: consensystest_Bytes
  transactionHash_lte: consensystest_Bytes
  transactionHash_in: [consensystest_Bytes!]
  transactionHash_not_in: [consensystest_Bytes!]
  transactionHash_contains: consensystest_Bytes
  transactionHash_not_contains: consensystest_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: consensystest_Bytes
  txOrigin_not: consensystest_Bytes
  txOrigin_gt: consensystest_Bytes
  txOrigin_lt: consensystest_Bytes
  txOrigin_gte: consensystest_Bytes
  txOrigin_lte: consensystest_Bytes
  txOrigin_in: [consensystest_Bytes!]
  txOrigin_not_in: [consensystest_Bytes!]
  txOrigin_contains: consensystest_Bytes
  txOrigin_not_contains: consensystest_Bytes
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_OriginTransfer_filter]
  or: [consensystest_OriginTransfer_filter]
}

enum consensystest_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transactingAsset
  message
  bumpRelayerFeeCount
  relayerFees
  initialRelayerFeeAsset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type Query {
  consensystest_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_Asset
  consensystest_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_Asset_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_Asset!]!
  consensystest_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_AssetStatus
  consensystest_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_AssetStatus_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_AssetStatus!]!
  consensystest_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_AssetBalance
  consensystest_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_AssetBalance_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_AssetBalance!]!
  consensystest_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_Router
  consensystest_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_Router_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_Router!]!
  consensystest_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_RouterDailyTVL
  consensystest_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_RouterDailyTVL_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_RouterDailyTVL!]!
  consensystest_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_Setting
  consensystest_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_Setting_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_Setting!]!
  consensystest_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_Relayer
  consensystest_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_Relayer_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_Relayer!]!
  consensystest_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_Sequencer
  consensystest_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_Sequencer_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_Sequencer!]!
  consensystest_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_RelayerFee
  consensystest_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_RelayerFee_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_RelayerFee!]!
  consensystest_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_OriginTransfer
  consensystest_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_OriginTransfer_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_OriginTransfer!]!
  consensystest_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_DestinationTransfer
  consensystest_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_DestinationTransfer_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_DestinationTransfer!]!
  consensystest_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_OriginMessage
  consensystest_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_OriginMessage_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_OriginMessage!]!
  consensystest_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_AggregateRoot
  consensystest_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_AggregateRoot_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_AggregateRoot!]!
  consensystest_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_ConnectorMeta
  consensystest_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_ConnectorMeta_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_ConnectorMeta!]!
  consensystest_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_RootCount
  consensystest_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_RootCount_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_RootCount!]!
  consensystest_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_RootMessageSent
  consensystest_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_RootMessageSent_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_RootMessageSent!]!
  consensystest_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_RelayerFeesIncrease
  consensystest_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_RelayerFeesIncrease_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_RelayerFeesIncrease!]!
  consensystest_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_SlippageUpdate
  consensystest_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_SlippageUpdate_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_SlippageUpdate!]!
  """Access to subgraph metadata"""
  consensystest__meta(block: consensystest_Block_height): consensystest__Meta_
}

type consensystest_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: consensystest_Bytes
}

type consensystest_RelayerFee {
  id: ID!
  transfer: consensystest_OriginTransfer!
  fee: BigInt!
  asset: consensystest_Bytes!
}

input consensystest_RelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: consensystest_OriginTransfer_filter
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  asset: consensystest_Bytes
  asset_not: consensystest_Bytes
  asset_gt: consensystest_Bytes
  asset_lt: consensystest_Bytes
  asset_gte: consensystest_Bytes
  asset_lte: consensystest_Bytes
  asset_in: [consensystest_Bytes!]
  asset_not_in: [consensystest_Bytes!]
  asset_contains: consensystest_Bytes
  asset_not_contains: consensystest_Bytes
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_RelayerFee_filter]
  or: [consensystest_RelayerFee_filter]
}

enum consensystest_RelayerFee_orderBy {
  id
  transfer
  fee
  asset
}

type consensystest_RelayerFeesIncrease {
  id: ID!
  transfer: consensystest_OriginTransfer!
  increase: BigInt
  asset: consensystest_Bytes
  caller: consensystest_Bytes!
  transactionHash: consensystest_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input consensystest_RelayerFeesIncrease_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: consensystest_OriginTransfer_filter
  increase: BigInt
  increase_not: BigInt
  increase_gt: BigInt
  increase_lt: BigInt
  increase_gte: BigInt
  increase_lte: BigInt
  increase_in: [BigInt!]
  increase_not_in: [BigInt!]
  asset: consensystest_Bytes
  asset_not: consensystest_Bytes
  asset_gt: consensystest_Bytes
  asset_lt: consensystest_Bytes
  asset_gte: consensystest_Bytes
  asset_lte: consensystest_Bytes
  asset_in: [consensystest_Bytes!]
  asset_not_in: [consensystest_Bytes!]
  asset_contains: consensystest_Bytes
  asset_not_contains: consensystest_Bytes
  caller: consensystest_Bytes
  caller_not: consensystest_Bytes
  caller_gt: consensystest_Bytes
  caller_lt: consensystest_Bytes
  caller_gte: consensystest_Bytes
  caller_lte: consensystest_Bytes
  caller_in: [consensystest_Bytes!]
  caller_not_in: [consensystest_Bytes!]
  caller_contains: consensystest_Bytes
  caller_not_contains: consensystest_Bytes
  transactionHash: consensystest_Bytes
  transactionHash_not: consensystest_Bytes
  transactionHash_gt: consensystest_Bytes
  transactionHash_lt: consensystest_Bytes
  transactionHash_gte: consensystest_Bytes
  transactionHash_lte: consensystest_Bytes
  transactionHash_in: [consensystest_Bytes!]
  transactionHash_not_in: [consensystest_Bytes!]
  transactionHash_contains: consensystest_Bytes
  transactionHash_not_contains: consensystest_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_RelayerFeesIncrease_filter]
  or: [consensystest_RelayerFeesIncrease_filter]
}

enum consensystest_RelayerFeesIncrease_orderBy {
  id
  transfer
  increase
  asset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

input consensystest_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: consensystest_Bytes
  relayer_not: consensystest_Bytes
  relayer_gt: consensystest_Bytes
  relayer_lt: consensystest_Bytes
  relayer_gte: consensystest_Bytes
  relayer_lte: consensystest_Bytes
  relayer_in: [consensystest_Bytes!]
  relayer_not_in: [consensystest_Bytes!]
  relayer_contains: consensystest_Bytes
  relayer_not_contains: consensystest_Bytes
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_Relayer_filter]
  or: [consensystest_Relayer_filter]
}

enum consensystest_Relayer_orderBy {
  id
  isActive
  relayer
}

type consensystest_RootCount {
  id: ID!
  count: BigInt
}

input consensystest_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_RootCount_filter]
  or: [consensystest_RootCount_filter]
}

enum consensystest_RootCount_orderBy {
  id
  count
}

type consensystest_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: consensystest_Bytes
  count: BigInt
  caller: consensystest_Bytes
  transactionHash: consensystest_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input consensystest_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: consensystest_Bytes
  root_not: consensystest_Bytes
  root_gt: consensystest_Bytes
  root_lt: consensystest_Bytes
  root_gte: consensystest_Bytes
  root_lte: consensystest_Bytes
  root_in: [consensystest_Bytes!]
  root_not_in: [consensystest_Bytes!]
  root_contains: consensystest_Bytes
  root_not_contains: consensystest_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: consensystest_Bytes
  caller_not: consensystest_Bytes
  caller_gt: consensystest_Bytes
  caller_lt: consensystest_Bytes
  caller_gte: consensystest_Bytes
  caller_lte: consensystest_Bytes
  caller_in: [consensystest_Bytes!]
  caller_not_in: [consensystest_Bytes!]
  caller_contains: consensystest_Bytes
  caller_not_contains: consensystest_Bytes
  transactionHash: consensystest_Bytes
  transactionHash_not: consensystest_Bytes
  transactionHash_gt: consensystest_Bytes
  transactionHash_lt: consensystest_Bytes
  transactionHash_gte: consensystest_Bytes
  transactionHash_lte: consensystest_Bytes
  transactionHash_in: [consensystest_Bytes!]
  transactionHash_not_in: [consensystest_Bytes!]
  transactionHash_contains: consensystest_Bytes
  transactionHash_not_contains: consensystest_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_RootMessageSent_filter]
  or: [consensystest_RootMessageSent_filter]
}

enum consensystest_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type consensystest_Router {
  id: ID!
  isActive: Boolean!
  owner: consensystest_Bytes
  recipient: consensystest_Bytes
  proposedOwner: consensystest_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: consensystest_AssetBalance_orderBy, orderDirection: consensystest_OrderDirection, where: consensystest_AssetBalance_filter): [consensystest_AssetBalance!]!
}

type consensystest_RouterDailyTVL {
  id: ID!
  router: consensystest_Router!
  asset: consensystest_Asset!
  timestamp: BigInt!
  balance: BigInt!
}

input consensystest_RouterDailyTVL_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: consensystest_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: consensystest_Asset_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_RouterDailyTVL_filter]
  or: [consensystest_RouterDailyTVL_filter]
}

enum consensystest_RouterDailyTVL_orderBy {
  id
  router
  asset
  timestamp
  balance
}

input consensystest_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: consensystest_Bytes
  owner_not: consensystest_Bytes
  owner_gt: consensystest_Bytes
  owner_lt: consensystest_Bytes
  owner_gte: consensystest_Bytes
  owner_lte: consensystest_Bytes
  owner_in: [consensystest_Bytes!]
  owner_not_in: [consensystest_Bytes!]
  owner_contains: consensystest_Bytes
  owner_not_contains: consensystest_Bytes
  recipient: consensystest_Bytes
  recipient_not: consensystest_Bytes
  recipient_gt: consensystest_Bytes
  recipient_lt: consensystest_Bytes
  recipient_gte: consensystest_Bytes
  recipient_lte: consensystest_Bytes
  recipient_in: [consensystest_Bytes!]
  recipient_not_in: [consensystest_Bytes!]
  recipient_contains: consensystest_Bytes
  recipient_not_contains: consensystest_Bytes
  proposedOwner: consensystest_Bytes
  proposedOwner_not: consensystest_Bytes
  proposedOwner_gt: consensystest_Bytes
  proposedOwner_lt: consensystest_Bytes
  proposedOwner_gte: consensystest_Bytes
  proposedOwner_lte: consensystest_Bytes
  proposedOwner_in: [consensystest_Bytes!]
  proposedOwner_not_in: [consensystest_Bytes!]
  proposedOwner_contains: consensystest_Bytes
  proposedOwner_not_contains: consensystest_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: consensystest_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_Router_filter]
  or: [consensystest_Router_filter]
}

enum consensystest_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type consensystest_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: consensystest_Bytes
}

input consensystest_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: consensystest_Bytes
  sequencer_not: consensystest_Bytes
  sequencer_gt: consensystest_Bytes
  sequencer_lt: consensystest_Bytes
  sequencer_gte: consensystest_Bytes
  sequencer_lte: consensystest_Bytes
  sequencer_in: [consensystest_Bytes!]
  sequencer_not_in: [consensystest_Bytes!]
  sequencer_contains: consensystest_Bytes
  sequencer_not_contains: consensystest_Bytes
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_Sequencer_filter]
  or: [consensystest_Sequencer_filter]
}

enum consensystest_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type consensystest_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: consensystest_Bytes!
}

input consensystest_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: consensystest_Bytes
  caller_not: consensystest_Bytes
  caller_gt: consensystest_Bytes
  caller_lt: consensystest_Bytes
  caller_gte: consensystest_Bytes
  caller_lte: consensystest_Bytes
  caller_in: [consensystest_Bytes!]
  caller_not_in: [consensystest_Bytes!]
  caller_contains: consensystest_Bytes
  caller_not_contains: consensystest_Bytes
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_Setting_filter]
  or: [consensystest_Setting_filter]
}

enum consensystest_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type consensystest_SlippageUpdate {
  id: ID!
  transfer: consensystest_DestinationTransfer!
  slippage: BigInt!
  caller: consensystest_Bytes!
  transactionHash: consensystest_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input consensystest_SlippageUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: consensystest_DestinationTransfer_filter
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  caller: consensystest_Bytes
  caller_not: consensystest_Bytes
  caller_gt: consensystest_Bytes
  caller_lt: consensystest_Bytes
  caller_gte: consensystest_Bytes
  caller_lte: consensystest_Bytes
  caller_in: [consensystest_Bytes!]
  caller_not_in: [consensystest_Bytes!]
  caller_contains: consensystest_Bytes
  caller_not_contains: consensystest_Bytes
  transactionHash: consensystest_Bytes
  transactionHash_not: consensystest_Bytes
  transactionHash_gt: consensystest_Bytes
  transactionHash_lt: consensystest_Bytes
  transactionHash_gte: consensystest_Bytes
  transactionHash_lte: consensystest_Bytes
  transactionHash_in: [consensystest_Bytes!]
  transactionHash_not_in: [consensystest_Bytes!]
  transactionHash_contains: consensystest_Bytes
  transactionHash_not_contains: consensystest_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: consensystest_BlockChangedFilter
  and: [consensystest_SlippageUpdate_filter]
  or: [consensystest_SlippageUpdate_filter]
}

enum consensystest_SlippageUpdate_orderBy {
  id
  transfer
  slippage
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type Subscription {
  consensystest_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_Asset
  consensystest_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_Asset_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_Asset!]!
  consensystest_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_AssetStatus
  consensystest_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_AssetStatus_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_AssetStatus!]!
  consensystest_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_AssetBalance
  consensystest_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_AssetBalance_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_AssetBalance!]!
  consensystest_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_Router
  consensystest_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_Router_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_Router!]!
  consensystest_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_RouterDailyTVL
  consensystest_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_RouterDailyTVL_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_RouterDailyTVL!]!
  consensystest_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_Setting
  consensystest_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_Setting_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_Setting!]!
  consensystest_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_Relayer
  consensystest_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_Relayer_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_Relayer!]!
  consensystest_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_Sequencer
  consensystest_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_Sequencer_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_Sequencer!]!
  consensystest_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_RelayerFee
  consensystest_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_RelayerFee_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_RelayerFee!]!
  consensystest_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_OriginTransfer
  consensystest_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_OriginTransfer_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_OriginTransfer!]!
  consensystest_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_DestinationTransfer
  consensystest_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_DestinationTransfer_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_DestinationTransfer!]!
  consensystest_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_OriginMessage
  consensystest_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_OriginMessage_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_OriginMessage!]!
  consensystest_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_AggregateRoot
  consensystest_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_AggregateRoot_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_AggregateRoot!]!
  consensystest_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_ConnectorMeta
  consensystest_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_ConnectorMeta_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_ConnectorMeta!]!
  consensystest_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_RootCount
  consensystest_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_RootCount_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_RootCount!]!
  consensystest_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_RootMessageSent
  consensystest_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_RootMessageSent_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_RootMessageSent!]!
  consensystest_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_RelayerFeesIncrease
  consensystest_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_RelayerFeesIncrease_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_RelayerFeesIncrease!]!
  consensystest_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): consensystest_SlippageUpdate
  consensystest_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: consensystest_SlippageUpdate_orderBy
    orderDirection: consensystest_OrderDirection
    where: consensystest_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: consensystest_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [consensystest_SlippageUpdate!]!
  """Access to subgraph metadata"""
  consensystest__meta(block: consensystest_Block_height): consensystest__Meta_
}

enum consensystest_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type consensystest__Block_ {
  """The hash of the block"""
  hash: consensystest_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type consensystest__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: consensystest__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}