schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type mainnet_AggregatedMessageRoot {
  id: ID!
  index: BigInt!
  receivedRoot: mainnet_Bytes!
  domain: BigInt
}

input mainnet_AggregatedMessageRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  receivedRoot: mainnet_Bytes
  receivedRoot_not: mainnet_Bytes
  receivedRoot_gt: mainnet_Bytes
  receivedRoot_lt: mainnet_Bytes
  receivedRoot_gte: mainnet_Bytes
  receivedRoot_lte: mainnet_Bytes
  receivedRoot_in: [mainnet_Bytes!]
  receivedRoot_not_in: [mainnet_Bytes!]
  receivedRoot_contains: mainnet_Bytes
  receivedRoot_not_contains: mainnet_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
  and: [mainnet_AggregatedMessageRoot_filter]
  or: [mainnet_AggregatedMessageRoot_filter]
}

enum mainnet_AggregatedMessageRoot_orderBy {
  id
  index
  receivedRoot
  domain
}

type mainnet_ArbitrumConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: mainnet_Bytes!
  rootManager: mainnet_Bytes!
  mirrorConnector: mainnet_Bytes!
}

input mainnet_ArbitrumConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_gt: mainnet_Bytes
  amb_lt: mainnet_Bytes
  amb_gte: mainnet_Bytes
  amb_lte: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_gt: mainnet_Bytes
  rootManager_lt: mainnet_Bytes
  rootManager_gte: mainnet_Bytes
  rootManager_lte: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_gt: mainnet_Bytes
  mirrorConnector_lt: mainnet_Bytes
  mirrorConnector_gte: mainnet_Bytes
  mirrorConnector_lte: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
  and: [mainnet_ArbitrumConnectorMeta_filter]
  or: [mainnet_ArbitrumConnectorMeta_filter]
}

enum mainnet_ArbitrumConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar mainnet_BigDecimal

scalar BigInt

input mainnet_BlockChangedFilter {
  number_gte: Int!
}

input mainnet_Block_height {
  hash: mainnet_Bytes
  number: Int
  number_gte: Int
}

type mainnet_BnbConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: mainnet_Bytes!
  rootManager: mainnet_Bytes!
  mirrorConnector: mainnet_Bytes!
}

input mainnet_BnbConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_gt: mainnet_Bytes
  amb_lt: mainnet_Bytes
  amb_gte: mainnet_Bytes
  amb_lte: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_gt: mainnet_Bytes
  rootManager_lt: mainnet_Bytes
  rootManager_gte: mainnet_Bytes
  rootManager_lte: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_gt: mainnet_Bytes
  mirrorConnector_lt: mainnet_Bytes
  mirrorConnector_gte: mainnet_Bytes
  mirrorConnector_lte: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
  and: [mainnet_BnbConnectorMeta_filter]
  or: [mainnet_BnbConnectorMeta_filter]
}

enum mainnet_BnbConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar mainnet_Bytes

type mainnet_GnosisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: mainnet_Bytes!
  rootManager: mainnet_Bytes!
  mirrorConnector: mainnet_Bytes!
}

input mainnet_GnosisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_gt: mainnet_Bytes
  amb_lt: mainnet_Bytes
  amb_gte: mainnet_Bytes
  amb_lte: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_gt: mainnet_Bytes
  rootManager_lt: mainnet_Bytes
  rootManager_gte: mainnet_Bytes
  rootManager_lte: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_gt: mainnet_Bytes
  mirrorConnector_lt: mainnet_Bytes
  mirrorConnector_gte: mainnet_Bytes
  mirrorConnector_lte: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
  and: [mainnet_GnosisConnectorMeta_filter]
  or: [mainnet_GnosisConnectorMeta_filter]
}

enum mainnet_GnosisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type mainnet_OptimismConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: mainnet_Bytes!
  rootManager: mainnet_Bytes!
  mirrorConnector: mainnet_Bytes!
}

input mainnet_OptimismConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_gt: mainnet_Bytes
  amb_lt: mainnet_Bytes
  amb_gte: mainnet_Bytes
  amb_lte: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_gt: mainnet_Bytes
  rootManager_lt: mainnet_Bytes
  rootManager_gte: mainnet_Bytes
  rootManager_lte: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_gt: mainnet_Bytes
  mirrorConnector_lt: mainnet_Bytes
  mirrorConnector_gte: mainnet_Bytes
  mirrorConnector_lte: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
  and: [mainnet_OptimismConnectorMeta_filter]
  or: [mainnet_OptimismConnectorMeta_filter]
}

enum mainnet_OptimismConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

"""Defines the order direction, either ascending or descending"""
enum mainnet_OrderDirection {
  asc
  desc
}

type mainnet_PolygonConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: mainnet_Bytes!
  rootManager: mainnet_Bytes!
  mirrorConnector: mainnet_Bytes!
}

input mainnet_PolygonConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_gt: mainnet_Bytes
  amb_lt: mainnet_Bytes
  amb_gte: mainnet_Bytes
  amb_lte: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_gt: mainnet_Bytes
  rootManager_lt: mainnet_Bytes
  rootManager_gte: mainnet_Bytes
  rootManager_lte: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_gt: mainnet_Bytes
  mirrorConnector_lt: mainnet_Bytes
  mirrorConnector_gte: mainnet_Bytes
  mirrorConnector_lte: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
  and: [mainnet_PolygonConnectorMeta_filter]
  or: [mainnet_PolygonConnectorMeta_filter]
}

enum mainnet_PolygonConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type Query {
  mainnet_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootAggregated
  mainnet_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootAggregated_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootAggregated!]!
  mainnet_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootPropagated
  mainnet_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootPropagated_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootPropagated!]!
  mainnet_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AggregatedMessageRoot
  mainnet_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AggregatedMessageRoot_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AggregatedMessageRoot!]!
  mainnet_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootManagerMeta
  mainnet_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootManagerMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootManagerMeta!]!
  mainnet_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_PolygonConnectorMeta
  mainnet_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_PolygonConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_PolygonConnectorMeta!]!
  mainnet_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OptimismConnectorMeta
  mainnet_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OptimismConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OptimismConnectorMeta!]!
  mainnet_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_BnbConnectorMeta
  mainnet_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_BnbConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_BnbConnectorMeta!]!
  mainnet_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_ArbitrumConnectorMeta
  mainnet_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_ArbitrumConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_ArbitrumConnectorMeta!]!
  mainnet_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_GnosisConnectorMeta
  mainnet_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_GnosisConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_GnosisConnectorMeta!]!
  mainnet_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootMessageProcessed
  mainnet_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootMessageProcessed_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  mainnet__meta(block: mainnet_Block_height): mainnet__Meta_
}

type mainnet_RootAggregated {
  id: ID!
  domain: BigInt!
  receivedRoot: mainnet_Bytes!
  index: BigInt!
}

input mainnet_RootAggregated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  receivedRoot: mainnet_Bytes
  receivedRoot_not: mainnet_Bytes
  receivedRoot_gt: mainnet_Bytes
  receivedRoot_lt: mainnet_Bytes
  receivedRoot_gte: mainnet_Bytes
  receivedRoot_lte: mainnet_Bytes
  receivedRoot_in: [mainnet_Bytes!]
  receivedRoot_not_in: [mainnet_Bytes!]
  receivedRoot_contains: mainnet_Bytes
  receivedRoot_not_contains: mainnet_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
  and: [mainnet_RootAggregated_filter]
  or: [mainnet_RootAggregated_filter]
}

enum mainnet_RootAggregated_orderBy {
  id
  domain
  receivedRoot
  index
}

type mainnet_RootManagerMeta {
  id: ID!
  domains: [BigInt!]
  connectors: [mainnet_Bytes!]
}

input mainnet_RootManagerMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  connectors: [mainnet_Bytes!]
  connectors_not: [mainnet_Bytes!]
  connectors_contains: [mainnet_Bytes!]
  connectors_contains_nocase: [mainnet_Bytes!]
  connectors_not_contains: [mainnet_Bytes!]
  connectors_not_contains_nocase: [mainnet_Bytes!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
  and: [mainnet_RootManagerMeta_filter]
  or: [mainnet_RootManagerMeta_filter]
}

enum mainnet_RootManagerMeta_orderBy {
  id
  domains
  connectors
}

type mainnet_RootMessageProcessed {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  root: mainnet_Bytes
  caller: mainnet_Bytes
  transactionHash: mainnet_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input mainnet_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: mainnet_Bytes
  root_not: mainnet_Bytes
  root_gt: mainnet_Bytes
  root_lt: mainnet_Bytes
  root_gte: mainnet_Bytes
  root_lte: mainnet_Bytes
  root_in: [mainnet_Bytes!]
  root_not_in: [mainnet_Bytes!]
  root_contains: mainnet_Bytes
  root_not_contains: mainnet_Bytes
  caller: mainnet_Bytes
  caller_not: mainnet_Bytes
  caller_gt: mainnet_Bytes
  caller_lt: mainnet_Bytes
  caller_gte: mainnet_Bytes
  caller_lte: mainnet_Bytes
  caller_in: [mainnet_Bytes!]
  caller_not_in: [mainnet_Bytes!]
  caller_contains: mainnet_Bytes
  caller_not_contains: mainnet_Bytes
  transactionHash: mainnet_Bytes
  transactionHash_not: mainnet_Bytes
  transactionHash_gt: mainnet_Bytes
  transactionHash_lt: mainnet_Bytes
  transactionHash_gte: mainnet_Bytes
  transactionHash_lte: mainnet_Bytes
  transactionHash_in: [mainnet_Bytes!]
  transactionHash_not_in: [mainnet_Bytes!]
  transactionHash_contains: mainnet_Bytes
  transactionHash_not_contains: mainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
  and: [mainnet_RootMessageProcessed_filter]
  or: [mainnet_RootMessageProcessed_filter]
}

enum mainnet_RootMessageProcessed_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type mainnet_RootPropagated {
  id: ID!
  aggregate: mainnet_Bytes!
  domainsHash: mainnet_Bytes!
  count: BigInt!
}

input mainnet_RootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregate: mainnet_Bytes
  aggregate_not: mainnet_Bytes
  aggregate_gt: mainnet_Bytes
  aggregate_lt: mainnet_Bytes
  aggregate_gte: mainnet_Bytes
  aggregate_lte: mainnet_Bytes
  aggregate_in: [mainnet_Bytes!]
  aggregate_not_in: [mainnet_Bytes!]
  aggregate_contains: mainnet_Bytes
  aggregate_not_contains: mainnet_Bytes
  domainsHash: mainnet_Bytes
  domainsHash_not: mainnet_Bytes
  domainsHash_gt: mainnet_Bytes
  domainsHash_lt: mainnet_Bytes
  domainsHash_gte: mainnet_Bytes
  domainsHash_lte: mainnet_Bytes
  domainsHash_in: [mainnet_Bytes!]
  domainsHash_not_in: [mainnet_Bytes!]
  domainsHash_contains: mainnet_Bytes
  domainsHash_not_contains: mainnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
  and: [mainnet_RootPropagated_filter]
  or: [mainnet_RootPropagated_filter]
}

enum mainnet_RootPropagated_orderBy {
  id
  aggregate
  domainsHash
  count
}

type Subscription {
  mainnet_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootAggregated
  mainnet_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootAggregated_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootAggregated!]!
  mainnet_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootPropagated
  mainnet_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootPropagated_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootPropagated!]!
  mainnet_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AggregatedMessageRoot
  mainnet_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AggregatedMessageRoot_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AggregatedMessageRoot!]!
  mainnet_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootManagerMeta
  mainnet_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootManagerMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootManagerMeta!]!
  mainnet_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_PolygonConnectorMeta
  mainnet_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_PolygonConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_PolygonConnectorMeta!]!
  mainnet_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OptimismConnectorMeta
  mainnet_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OptimismConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OptimismConnectorMeta!]!
  mainnet_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_BnbConnectorMeta
  mainnet_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_BnbConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_BnbConnectorMeta!]!
  mainnet_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_ArbitrumConnectorMeta
  mainnet_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_ArbitrumConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_ArbitrumConnectorMeta!]!
  mainnet_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_GnosisConnectorMeta
  mainnet_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_GnosisConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_GnosisConnectorMeta!]!
  mainnet_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootMessageProcessed
  mainnet_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootMessageProcessed_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  mainnet__meta(block: mainnet_Block_height): mainnet__Meta_
}

type mainnet__Block_ {
  """The hash of the block"""
  hash: mainnet_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type mainnet__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: mainnet__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}