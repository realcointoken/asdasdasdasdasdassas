/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface RateLimitedInterface extends utils.Interface {
  functions: {
    "lastSentBlock()": FunctionFragment;
    "rateLimitBlocks()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "lastSentBlock" | "rateLimitBlocks"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "lastSentBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateLimitBlocks",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "lastSentBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateLimitBlocks",
    data: BytesLike
  ): Result;

  events: {
    "SendRateLimitUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SendRateLimitUpdated"): EventFragment;
}

export interface SendRateLimitUpdatedEventObject {
  updater: string;
  newRateLimit: BigNumber;
}
export type SendRateLimitUpdatedEvent = TypedEvent<
  [string, BigNumber],
  SendRateLimitUpdatedEventObject
>;

export type SendRateLimitUpdatedEventFilter =
  TypedEventFilter<SendRateLimitUpdatedEvent>;

export interface RateLimited extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RateLimitedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lastSentBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    rateLimitBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  lastSentBlock(overrides?: CallOverrides): Promise<BigNumber>;

  rateLimitBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    lastSentBlock(overrides?: CallOverrides): Promise<BigNumber>;

    rateLimitBlocks(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "SendRateLimitUpdated(address,uint256)"(
      updater?: null,
      newRateLimit?: null
    ): SendRateLimitUpdatedEventFilter;
    SendRateLimitUpdated(
      updater?: null,
      newRateLimit?: null
    ): SendRateLimitUpdatedEventFilter;
  };

  estimateGas: {
    lastSentBlock(overrides?: CallOverrides): Promise<BigNumber>;

    rateLimitBlocks(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    lastSentBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateLimitBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
