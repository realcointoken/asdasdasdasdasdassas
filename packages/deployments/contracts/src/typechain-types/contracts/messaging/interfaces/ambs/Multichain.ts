/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface MultichainInterface extends utils.Interface {
  functions: {
    "anyCall(address,bytes,address,uint256,uint256)": FunctionFragment;
    "calcSrcFees(string,uint256,uint256)": FunctionFragment;
    "context()": FunctionFragment;
    "executor()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "anyCall" | "calcSrcFees" | "context" | "executor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "anyCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSrcFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "context", values?: undefined): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;

  decodeFunctionResult(functionFragment: "anyCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcSrcFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "context", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;

  events: {};
}

export interface Multichain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultichainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    anyCall(
      _to: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _fallback: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<BigNumberish>,
      _flags: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calcSrcFees(
      _appID: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<BigNumberish>,
      _dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    context(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        from: string;
        fromChainID: BigNumber;
        nonce: BigNumber;
      }
    >;

    executor(
      overrides?: CallOverrides
    ): Promise<[string] & { executor: string }>;
  };

  anyCall(
    _to: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    _fallback: PromiseOrValue<string>,
    _toChainID: PromiseOrValue<BigNumberish>,
    _flags: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calcSrcFees(
    _appID: PromiseOrValue<string>,
    _toChainID: PromiseOrValue<BigNumberish>,
    _dataLength: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  context(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      from: string;
      fromChainID: BigNumber;
      nonce: BigNumber;
    }
  >;

  executor(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    anyCall(
      _to: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _fallback: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<BigNumberish>,
      _flags: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calcSrcFees(
      _appID: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<BigNumberish>,
      _dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    context(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        from: string;
        fromChainID: BigNumber;
        nonce: BigNumber;
      }
    >;

    executor(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    anyCall(
      _to: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _fallback: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<BigNumberish>,
      _flags: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calcSrcFees(
      _appID: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<BigNumberish>,
      _dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    context(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    anyCall(
      _to: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      _fallback: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<BigNumberish>,
      _flags: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calcSrcFees(
      _appID: PromiseOrValue<string>,
      _toChainID: PromiseOrValue<BigNumberish>,
      _dataLength: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    context(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
