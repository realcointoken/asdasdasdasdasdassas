/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ConsensysAmbInterface extends utils.Interface {
  functions: {
    "deliverMessage(address,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "dispatchMessage(address,uint256,uint256,bytes)": FunctionFragment;
    "sender()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "deliverMessage" | "dispatchMessage" | "sender"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deliverMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "sender", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "deliverMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sender", data: BytesLike): Result;

  events: {
    "MessageDelivered(address,address,uint256,uint256,uint256,bytes)": EventFragment;
    "MessageDispatched(address,address,uint256,uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageDelivered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageDispatched"): EventFragment;
}

export interface MessageDeliveredEventObject {
  _from: string;
  _to: string;
  _fee: BigNumber;
  _value: BigNumber;
  _deadline: BigNumber;
  _calldata: string;
}
export type MessageDeliveredEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  MessageDeliveredEventObject
>;

export type MessageDeliveredEventFilter =
  TypedEventFilter<MessageDeliveredEvent>;

export interface MessageDispatchedEventObject {
  _from: string;
  _to: string;
  _fee: BigNumber;
  _value: BigNumber;
  _deadline: BigNumber;
  _calldata: string;
}
export type MessageDispatchedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  MessageDispatchedEventObject
>;

export type MessageDispatchedEventFilter =
  TypedEventFilter<MessageDispatchedEvent>;

export interface ConsensysAmb extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConsensysAmbInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deliverMessage(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dispatchMessage(
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sender(overrides?: CallOverrides): Promise<[string]>;
  };

  deliverMessage(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dispatchMessage(
    _to: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sender(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deliverMessage(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dispatchMessage(
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sender(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MessageDelivered(address,address,uint256,uint256,uint256,bytes)"(
      _from?: null,
      _to?: null,
      _fee?: null,
      _value?: null,
      _deadline?: null,
      _calldata?: null
    ): MessageDeliveredEventFilter;
    MessageDelivered(
      _from?: null,
      _to?: null,
      _fee?: null,
      _value?: null,
      _deadline?: null,
      _calldata?: null
    ): MessageDeliveredEventFilter;

    "MessageDispatched(address,address,uint256,uint256,uint256,bytes)"(
      _from?: null,
      _to?: null,
      _fee?: null,
      _value?: null,
      _deadline?: null,
      _calldata?: null
    ): MessageDispatchedEventFilter;
    MessageDispatched(
      _from?: null,
      _to?: null,
      _fee?: null,
      _value?: null,
      _deadline?: null,
      _calldata?: null
    ): MessageDispatchedEventFilter;
  };

  estimateGas: {
    deliverMessage(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dispatchMessage(
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sender(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deliverMessage(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dispatchMessage(
      _to: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
