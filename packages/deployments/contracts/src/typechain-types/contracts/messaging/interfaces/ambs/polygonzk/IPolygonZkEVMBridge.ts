/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IPolygonZkEVMBridgeInterface extends utils.Interface {
  functions: {
    "activateEmergencyState()": FunctionFragment;
    "bridgeAsset(uint32,address,uint256,address,bool,bytes)": FunctionFragment;
    "bridgeMessage(uint32,address,bool,bytes)": FunctionFragment;
    "claimAsset(bytes32[32],uint32,bytes32,bytes32,uint32,address,uint32,address,uint256,bytes)": FunctionFragment;
    "claimMessage(bytes32[32],uint32,bytes32,bytes32,uint32,address,uint32,address,uint256,bytes)": FunctionFragment;
    "deactivateEmergencyState()": FunctionFragment;
    "updateGlobalExitRoot()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateEmergencyState"
      | "bridgeAsset"
      | "bridgeMessage"
      | "claimAsset"
      | "claimMessage"
      | "deactivateEmergencyState"
      | "updateGlobalExitRoot"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateEmergencyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAsset",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAsset",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMessage",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateGlobalExitRoot",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activateEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGlobalExitRoot",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPolygonZkEVMBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPolygonZkEVMBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeAsset(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      permitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeMessage(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAsset(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMessage(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateGlobalExitRoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activateEmergencyState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeAsset(
    destinationNetwork: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
    permitData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeMessage(
    destinationNetwork: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
    metadata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAsset(
    smtProof: PromiseOrValue<BytesLike>[],
    index: PromiseOrValue<BigNumberish>,
    mainnetExitRoot: PromiseOrValue<BytesLike>,
    rollupExitRoot: PromiseOrValue<BytesLike>,
    originNetwork: PromiseOrValue<BigNumberish>,
    originTokenAddress: PromiseOrValue<string>,
    destinationNetwork: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    metadata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMessage(
    smtProof: PromiseOrValue<BytesLike>[],
    index: PromiseOrValue<BigNumberish>,
    mainnetExitRoot: PromiseOrValue<BytesLike>,
    rollupExitRoot: PromiseOrValue<BytesLike>,
    originNetwork: PromiseOrValue<BigNumberish>,
    originAddress: PromiseOrValue<string>,
    destinationNetwork: PromiseOrValue<BigNumberish>,
    destinationAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    metadata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deactivateEmergencyState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateGlobalExitRoot(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activateEmergencyState(overrides?: CallOverrides): Promise<void>;

    bridgeAsset(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      permitData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeMessage(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAsset(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMessage(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateEmergencyState(overrides?: CallOverrides): Promise<void>;

    updateGlobalExitRoot(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    activateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeAsset(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      permitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeMessage(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAsset(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMessage(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deactivateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateGlobalExitRoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeAsset(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      permitData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeMessage(
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      forceUpdateGlobalExitRoot: PromiseOrValue<boolean>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAsset(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originTokenAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMessage(
      smtProof: PromiseOrValue<BytesLike>[],
      index: PromiseOrValue<BigNumberish>,
      mainnetExitRoot: PromiseOrValue<BytesLike>,
      rollupExitRoot: PromiseOrValue<BytesLike>,
      originNetwork: PromiseOrValue<BigNumberish>,
      originAddress: PromiseOrValue<string>,
      destinationNetwork: PromiseOrValue<BigNumberish>,
      destinationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deactivateEmergencyState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateGlobalExitRoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
