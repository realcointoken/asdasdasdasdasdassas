/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface InboxFacetInterface extends utils.Interface {
  functions: {
    "handle(uint32,uint32,bytes32,bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "handle"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "handle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "handle", data: BytesLike): Result;

  events: {
    "Receive(uint64,address,address,address,uint256)": EventFragment;
    "Reconciled(bytes32,uint32,address,address[],uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Receive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reconciled"): EventFragment;
}

export interface ReceiveEventObject {
  originAndNonce: BigNumber;
  token: string;
  recipient: string;
  liquidityProvider: string;
  amount: BigNumber;
}
export type ReceiveEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  ReceiveEventObject
>;

export type ReceiveEventFilter = TypedEventFilter<ReceiveEvent>;

export interface ReconciledEventObject {
  transferId: string;
  originDomain: number;
  local: string;
  routers: string[];
  amount: BigNumber;
  caller: string;
}
export type ReconciledEvent = TypedEvent<
  [string, number, string, string[], BigNumber, string],
  ReconciledEventObject
>;

export type ReconciledEventFilter = TypedEventFilter<ReconciledEvent>;

export interface InboxFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InboxFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  handle(
    _origin: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<BytesLike>,
    _message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Receive(uint64,address,address,address,uint256)"(
      originAndNonce?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      liquidityProvider?: null,
      amount?: null
    ): ReceiveEventFilter;
    Receive(
      originAndNonce?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      liquidityProvider?: null,
      amount?: null
    ): ReceiveEventFilter;

    "Reconciled(bytes32,uint32,address,address[],uint256,address)"(
      transferId?: PromiseOrValue<BytesLike> | null,
      originDomain?: PromiseOrValue<BigNumberish> | null,
      local?: PromiseOrValue<string> | null,
      routers?: null,
      amount?: null,
      caller?: null
    ): ReconciledEventFilter;
    Reconciled(
      transferId?: PromiseOrValue<BytesLike> | null,
      originDomain?: PromiseOrValue<BigNumberish> | null,
      local?: PromiseOrValue<string> | null,
      routers?: null,
      amount?: null,
      caller?: null
    ): ReconciledEventFilter;
  };

  estimateGas: {
    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
