/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export type TransferInfoStruct = {
  originDomain: PromiseOrValue<BigNumberish>;
  destinationDomain: PromiseOrValue<BigNumberish>;
  canonicalDomain: PromiseOrValue<BigNumberish>;
  to: PromiseOrValue<string>;
  delegate: PromiseOrValue<string>;
  receiveLocal: PromiseOrValue<boolean>;
  callData: PromiseOrValue<BytesLike>;
  slippage: PromiseOrValue<BigNumberish>;
  originSender: PromiseOrValue<string>;
  bridgedAmt: PromiseOrValue<BigNumberish>;
  normalizedIn: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  canonicalId: PromiseOrValue<BytesLike>;
};

export type TransferInfoStructOutput = [
  number,
  number,
  number,
  string,
  string,
  boolean,
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  originDomain: number;
  destinationDomain: number;
  canonicalDomain: number;
  to: string;
  delegate: string;
  receiveLocal: boolean;
  callData: string;
  slippage: BigNumber;
  originSender: string;
  bridgedAmt: BigNumber;
  normalizedIn: BigNumber;
  nonce: BigNumber;
  canonicalId: string;
};

export type ExecuteArgsStruct = {
  params: TransferInfoStruct;
  routers: PromiseOrValue<string>[];
  routerSignatures: PromiseOrValue<BytesLike>[];
  sequencer: PromiseOrValue<string>;
  sequencerSignature: PromiseOrValue<BytesLike>;
};

export type ExecuteArgsStructOutput = [
  TransferInfoStructOutput,
  string[],
  string[],
  string,
  string
] & {
  params: TransferInfoStructOutput;
  routers: string[];
  routerSignatures: string[];
  sequencer: string;
  sequencerSignature: string;
};

export declare namespace ISpokeConnector {
  export type ProofStruct = {
    message: PromiseOrValue<BytesLike>;
    path: PromiseOrValue<BytesLike>[];
    index: PromiseOrValue<BigNumberish>;
  };

  export type ProofStructOutput = [string, string[], BigNumber] & {
    message: string;
    path: string[];
    index: BigNumber;
  };
}

export interface RelayerProxyInterface extends utils.Interface {
  functions: {
    "acceptProposedOwner()": FunctionFragment;
    "addRelayer(address)": FunctionFragment;
    "allowedRelayer(address)": FunctionFragment;
    "autonolas()": FunctionFragment;
    "autonolasPriority()": FunctionFragment;
    "connext()": FunctionFragment;
    "delay()": FunctionFragment;
    "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),uint256)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "gelatoRelayer()": FunctionFragment;
    "keep3r()": FunctionFragment;
    "owner()": FunctionFragment;
    "priorityKeepers(address)": FunctionFragment;
    "proposeNewOwner(address)": FunctionFragment;
    "proposed()": FunctionFragment;
    "proposedTimestamp()": FunctionFragment;
    "proveAndProcess((bytes,bytes32[32],uint256)[],bytes32,bytes32[32],uint256,uint256)": FunctionFragment;
    "removeRelayer(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounced()": FunctionFragment;
    "send(bytes,uint256,uint256)": FunctionFragment;
    "setAutonolas(address)": FunctionFragment;
    "setAutonolasPriority(uint8)": FunctionFragment;
    "setConnext(address)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setGelatoRelayer(address)": FunctionFragment;
    "setKeep3r(address)": FunctionFragment;
    "setSpokeConnector(address)": FunctionFragment;
    "spokeConnector()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptProposedOwner"
      | "addRelayer"
      | "allowedRelayer"
      | "autonolas"
      | "autonolasPriority"
      | "connext"
      | "delay"
      | "execute"
      | "feeCollector"
      | "gelatoRelayer"
      | "keep3r"
      | "owner"
      | "priorityKeepers"
      | "proposeNewOwner"
      | "proposed"
      | "proposedTimestamp"
      | "proveAndProcess"
      | "removeRelayer"
      | "renounceOwnership"
      | "renounced"
      | "send"
      | "setAutonolas"
      | "setAutonolasPriority"
      | "setConnext"
      | "setFeeCollector"
      | "setGelatoRelayer"
      | "setKeep3r"
      | "setSpokeConnector"
      | "spokeConnector"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptProposedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "autonolas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "autonolasPriority",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "connext", values?: undefined): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [ExecuteArgsStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gelatoRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keep3r", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priorityKeepers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proveAndProcess",
    values: [
      ISpokeConnector.ProofStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "renounced", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutonolas",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutonolasPriority",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConnext",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGelatoRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeep3r",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpokeConnector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "spokeConnector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptProposedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "autonolas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autonolasPriority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gelatoRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keep3r", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priorityKeepers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveAndProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renounced", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAutonolas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutonolasPriority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConnext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGelatoRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeep3r", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSpokeConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spokeConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AutonolasChanged(address,address)": EventFragment;
    "AutonolasPriorityChanged(uint8,uint8)": EventFragment;
    "ConnextChanged(address,address)": EventFragment;
    "FeeCollectorChanged(address,address)": EventFragment;
    "FundsDeducted(uint256,uint256)": EventFragment;
    "FundsReceived(uint256,uint256)": EventFragment;
    "GelatoRelayerChanged(address,address)": EventFragment;
    "Keep3rChanged(address,address)": EventFragment;
    "OwnershipProposed(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RelayerAdded(address)": EventFragment;
    "RelayerRemoved(address)": EventFragment;
    "SpokeConnectorChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AutonolasChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AutonolasPriorityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConnextChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsDeducted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GelatoRelayerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Keep3rChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpokeConnectorChanged"): EventFragment;
}

export interface AutonolasChangedEventObject {
  updated: string;
  previous: string;
}
export type AutonolasChangedEvent = TypedEvent<
  [string, string],
  AutonolasChangedEventObject
>;

export type AutonolasChangedEventFilter =
  TypedEventFilter<AutonolasChangedEvent>;

export interface AutonolasPriorityChangedEventObject {
  updated: number;
  previous: number;
}
export type AutonolasPriorityChangedEvent = TypedEvent<
  [number, number],
  AutonolasPriorityChangedEventObject
>;

export type AutonolasPriorityChangedEventFilter =
  TypedEventFilter<AutonolasPriorityChangedEvent>;

export interface ConnextChangedEventObject {
  updated: string;
  previous: string;
}
export type ConnextChangedEvent = TypedEvent<
  [string, string],
  ConnextChangedEventObject
>;

export type ConnextChangedEventFilter = TypedEventFilter<ConnextChangedEvent>;

export interface FeeCollectorChangedEventObject {
  updated: string;
  previous: string;
}
export type FeeCollectorChangedEvent = TypedEvent<
  [string, string],
  FeeCollectorChangedEventObject
>;

export type FeeCollectorChangedEventFilter =
  TypedEventFilter<FeeCollectorChangedEvent>;

export interface FundsDeductedEventObject {
  amount: BigNumber;
  balance: BigNumber;
}
export type FundsDeductedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FundsDeductedEventObject
>;

export type FundsDeductedEventFilter = TypedEventFilter<FundsDeductedEvent>;

export interface FundsReceivedEventObject {
  amount: BigNumber;
  balance: BigNumber;
}
export type FundsReceivedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FundsReceivedEventObject
>;

export type FundsReceivedEventFilter = TypedEventFilter<FundsReceivedEvent>;

export interface GelatoRelayerChangedEventObject {
  updated: string;
  previous: string;
}
export type GelatoRelayerChangedEvent = TypedEvent<
  [string, string],
  GelatoRelayerChangedEventObject
>;

export type GelatoRelayerChangedEventFilter =
  TypedEventFilter<GelatoRelayerChangedEvent>;

export interface Keep3rChangedEventObject {
  updated: string;
  previous: string;
}
export type Keep3rChangedEvent = TypedEvent<
  [string, string],
  Keep3rChangedEventObject
>;

export type Keep3rChangedEventFilter = TypedEventFilter<Keep3rChangedEvent>;

export interface OwnershipProposedEventObject {
  proposedOwner: string;
}
export type OwnershipProposedEvent = TypedEvent<
  [string],
  OwnershipProposedEventObject
>;

export type OwnershipProposedEventFilter =
  TypedEventFilter<OwnershipProposedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RelayerAddedEventObject {
  relayer: string;
}
export type RelayerAddedEvent = TypedEvent<[string], RelayerAddedEventObject>;

export type RelayerAddedEventFilter = TypedEventFilter<RelayerAddedEvent>;

export interface RelayerRemovedEventObject {
  relayer: string;
}
export type RelayerRemovedEvent = TypedEvent<
  [string],
  RelayerRemovedEventObject
>;

export type RelayerRemovedEventFilter = TypedEventFilter<RelayerRemovedEvent>;

export interface SpokeConnectorChangedEventObject {
  updated: string;
  previous: string;
}
export type SpokeConnectorChangedEvent = TypedEvent<
  [string, string],
  SpokeConnectorChangedEventObject
>;

export type SpokeConnectorChangedEventFilter =
  TypedEventFilter<SpokeConnectorChangedEvent>;

export interface RelayerProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelayerProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowedRelayer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    autonolas(overrides?: CallOverrides): Promise<[string]>;

    autonolasPriority(overrides?: CallOverrides): Promise<[number]>;

    connext(overrides?: CallOverrides): Promise<[string]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    execute(
      _args: ExecuteArgsStruct,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    gelatoRelayer(overrides?: CallOverrides): Promise<[string]>;

    keep3r(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priorityKeepers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposed(overrides?: CallOverrides): Promise<[string]>;

    proposedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounced(overrides?: CallOverrides): Promise<[boolean]>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      _messageFee: PromiseOrValue<BigNumberish>,
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutonolas(
      _autonolas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutonolasPriority(
      _autonolasPriority: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGelatoRelayer(
      _gelatoRelayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeep3r(
      _keep3r: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpokeConnector(
      _spokeConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spokeConnector(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptProposedOwner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowedRelayer(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  autonolas(overrides?: CallOverrides): Promise<string>;

  autonolasPriority(overrides?: CallOverrides): Promise<number>;

  connext(overrides?: CallOverrides): Promise<string>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    _args: ExecuteArgsStruct,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  gelatoRelayer(overrides?: CallOverrides): Promise<string>;

  keep3r(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  priorityKeepers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proposeNewOwner(
    newlyProposed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposed(overrides?: CallOverrides): Promise<string>;

  proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  proveAndProcess(
    _proofs: ISpokeConnector.ProofStruct[],
    _aggregateRoot: PromiseOrValue<BytesLike>,
    _aggregatePath: PromiseOrValue<BytesLike>[],
    _aggregateIndex: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRelayer(
    _relayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounced(overrides?: CallOverrides): Promise<boolean>;

  send(
    _encodedData: PromiseOrValue<BytesLike>,
    _messageFee: PromiseOrValue<BigNumberish>,
    _relayerFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutonolas(
    _autonolas: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutonolasPriority(
    _autonolasPriority: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConnext(
    _connext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGelatoRelayer(
    _gelatoRelayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeep3r(
    _keep3r: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpokeConnector(
    _spokeConnector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spokeConnector(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptProposedOwner(overrides?: CallOverrides): Promise<void>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedRelayer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    autonolas(overrides?: CallOverrides): Promise<string>;

    autonolasPriority(overrides?: CallOverrides): Promise<number>;

    connext(overrides?: CallOverrides): Promise<string>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _args: ExecuteArgsStruct,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    gelatoRelayer(overrides?: CallOverrides): Promise<string>;

    keep3r(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    priorityKeepers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposed(overrides?: CallOverrides): Promise<string>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounced(overrides?: CallOverrides): Promise<boolean>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      _messageFee: PromiseOrValue<BigNumberish>,
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAutonolas(
      _autonolas: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAutonolasPriority(
      _autonolasPriority: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGelatoRelayer(
      _gelatoRelayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeep3r(
      _keep3r: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpokeConnector(
      _spokeConnector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    spokeConnector(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AutonolasChanged(address,address)"(
      updated?: null,
      previous?: null
    ): AutonolasChangedEventFilter;
    AutonolasChanged(
      updated?: null,
      previous?: null
    ): AutonolasChangedEventFilter;

    "AutonolasPriorityChanged(uint8,uint8)"(
      updated?: null,
      previous?: null
    ): AutonolasPriorityChangedEventFilter;
    AutonolasPriorityChanged(
      updated?: null,
      previous?: null
    ): AutonolasPriorityChangedEventFilter;

    "ConnextChanged(address,address)"(
      updated?: null,
      previous?: null
    ): ConnextChangedEventFilter;
    ConnextChanged(updated?: null, previous?: null): ConnextChangedEventFilter;

    "FeeCollectorChanged(address,address)"(
      updated?: null,
      previous?: null
    ): FeeCollectorChangedEventFilter;
    FeeCollectorChanged(
      updated?: null,
      previous?: null
    ): FeeCollectorChangedEventFilter;

    "FundsDeducted(uint256,uint256)"(
      amount?: null,
      balance?: null
    ): FundsDeductedEventFilter;
    FundsDeducted(amount?: null, balance?: null): FundsDeductedEventFilter;

    "FundsReceived(uint256,uint256)"(
      amount?: null,
      balance?: null
    ): FundsReceivedEventFilter;
    FundsReceived(amount?: null, balance?: null): FundsReceivedEventFilter;

    "GelatoRelayerChanged(address,address)"(
      updated?: null,
      previous?: null
    ): GelatoRelayerChangedEventFilter;
    GelatoRelayerChanged(
      updated?: null,
      previous?: null
    ): GelatoRelayerChangedEventFilter;

    "Keep3rChanged(address,address)"(
      updated?: null,
      previous?: null
    ): Keep3rChangedEventFilter;
    Keep3rChanged(updated?: null, previous?: null): Keep3rChangedEventFilter;

    "OwnershipProposed(address)"(
      proposedOwner?: PromiseOrValue<string> | null
    ): OwnershipProposedEventFilter;
    OwnershipProposed(
      proposedOwner?: PromiseOrValue<string> | null
    ): OwnershipProposedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RelayerAdded(address)"(relayer?: null): RelayerAddedEventFilter;
    RelayerAdded(relayer?: null): RelayerAddedEventFilter;

    "RelayerRemoved(address)"(relayer?: null): RelayerRemovedEventFilter;
    RelayerRemoved(relayer?: null): RelayerRemovedEventFilter;

    "SpokeConnectorChanged(address,address)"(
      updated?: null,
      previous?: null
    ): SpokeConnectorChangedEventFilter;
    SpokeConnectorChanged(
      updated?: null,
      previous?: null
    ): SpokeConnectorChangedEventFilter;
  };

  estimateGas: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowedRelayer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    autonolas(overrides?: CallOverrides): Promise<BigNumber>;

    autonolasPriority(overrides?: CallOverrides): Promise<BigNumber>;

    connext(overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _args: ExecuteArgsStruct,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    gelatoRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    keep3r(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priorityKeepers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposed(overrides?: CallOverrides): Promise<BigNumber>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounced(overrides?: CallOverrides): Promise<BigNumber>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      _messageFee: PromiseOrValue<BigNumberish>,
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutonolas(
      _autonolas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutonolasPriority(
      _autonolasPriority: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGelatoRelayer(
      _gelatoRelayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeep3r(
      _keep3r: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpokeConnector(
      _spokeConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spokeConnector(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowedRelayer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    autonolas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    autonolasPriority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _args: ExecuteArgsStruct,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gelatoRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3r(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priorityKeepers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayer(
      _relayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounced(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      _messageFee: PromiseOrValue<BigNumberish>,
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutonolas(
      _autonolas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutonolasPriority(
      _autonolasPriority: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConnext(
      _connext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGelatoRelayer(
      _gelatoRelayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeep3r(
      _keep3r: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpokeConnector(
      _spokeConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spokeConnector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
