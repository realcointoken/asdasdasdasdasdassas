[
  "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
  "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
  "error AssetLogic__handleOutgoingAsset_notNative()",
  "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
  "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
  "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
  "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error RoutersFacet__acceptProposedRouterOwner_badCaller()",
  "error RoutersFacet__acceptProposedRouterOwner_notElapsed()",
  "error RoutersFacet__addLiquidityForRouter_amountIsZero()",
  "error RoutersFacet__addLiquidityForRouter_badRouter()",
  "error RoutersFacet__addLiquidityForRouter_capReached()",
  "error RoutersFacet__addLiquidityForRouter_routerEmpty()",
  "error RoutersFacet__approveRouterForPortal_alreadyApproved()",
  "error RoutersFacet__approveRouterForPortal_notAdded()",
  "error RoutersFacet__approveRouter_alreadyAdded()",
  "error RoutersFacet__approveRouter_routerEmpty()",
  "error RoutersFacet__initializeRouter_configNotEmpty()",
  "error RoutersFacet__onlyRouterOwner_notRouterOwner()",
  "error RoutersFacet__proposeRouterOwner_badRouter()",
  "error RoutersFacet__proposeRouterOwner_notNewOwner()",
  "error RoutersFacet__removeRouterLiquidityFor_notOwner()",
  "error RoutersFacet__removeRouterLiquidity_amountIsZero()",
  "error RoutersFacet__removeRouterLiquidity_insufficientFunds()",
  "error RoutersFacet__removeRouterLiquidity_recipientEmpty()",
  "error RoutersFacet__setLiquidityFeeNumerator_tooLarge()",
  "error RoutersFacet__setLiquidityFeeNumerator_tooSmall()",
  "error RoutersFacet__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer()",
  "error RoutersFacet__setRouterOwner_noChange()",
  "error RoutersFacet__setRouterRecipient_notNewRecipient()",
  "error RoutersFacet__unapproveRouterForPortal_notApproved()",
  "error RoutersFacet__unapproveRouter_notAdded()",
  "error RoutersFacet__unapproveRouter_routerEmpty()",
  "event LiquidityFeeNumeratorUpdated(uint256 liquidityFeeNumerator, address caller)",
  "event MaxRoutersPerTransferUpdated(uint256 maxRoutersPerTransfer, address caller)",
  "event RouterAdded(address indexed router, address caller)",
  "event RouterApprovedForPortal(address router, address caller)",
  "event RouterInitialized(address indexed router)",
  "event RouterLiquidityAdded(address indexed router, address local, bytes32 key, uint256 amount, address caller)",
  "event RouterLiquidityRemoved(address indexed router, address to, address local, bytes32 key, uint256 amount, address caller)",
  "event RouterOwnerAccepted(address indexed router, address indexed prevOwner, address indexed newOwner)",
  "event RouterOwnerProposed(address indexed router, address indexed prevProposed, address indexed newProposed)",
  "event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient)",
  "event RouterRemoved(address indexed router, address caller)",
  "event RouterUnapprovedForPortal(address router, address caller)",
  "function LIQUIDITY_FEE_DENOMINATOR() pure returns (uint256)",
  "function LIQUIDITY_FEE_NUMERATOR() view returns (uint256)",
  "function acceptProposedRouterOwner(address _router)",
  "function addRouterLiquidity(uint256 _amount, address _local) payable",
  "function addRouterLiquidityFor(uint256 _amount, address _local, address _router) payable",
  "function approveRouter(address _router)",
  "function approveRouterForPortal(address _router)",
  "function getProposedRouterOwner(address _router) view returns (address)",
  "function getProposedRouterOwnerTimestamp(address _router) view returns (uint256)",
  "function getRouterApproval(address _router) view returns (bool)",
  "function getRouterApprovalForPortal(address _router) view returns (bool)",
  "function getRouterOwner(address _router) view returns (address)",
  "function getRouterRecipient(address _router) view returns (address)",
  "function initializeRouter(address _owner, address _recipient)",
  "function maxRoutersPerTransfer() view returns (uint256)",
  "function proposeRouterOwner(address _router, address _proposed)",
  "function removeRouterLiquidity(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to)",
  "function removeRouterLiquidityFor(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to, address _router)",
  "function routerBalances(address _router, address _asset) view returns (uint256)",
  "function setLiquidityFeeNumerator(uint256 _numerator)",
  "function setMaxRoutersPerTransfer(uint256 _newMaxRouters)",
  "function setRouterRecipient(address _router, address _recipient)",
  "function unapproveRouter(address _router)",
  "function unapproveRouterForPortal(address _router)"
]
