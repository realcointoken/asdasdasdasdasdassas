[
  "error AssetLogic__getConfig_notRegistered()",
  "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
  "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
  "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
  "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error TokenFacet__addAssetId_alreadyAdded()",
  "error TokenFacet__addAssetId_badBurn()",
  "error TokenFacet__addAssetId_badMint()",
  "error TokenFacet__enrollAdoptedAndLocalAssets_emptyCanonical()",
  "error TokenFacet__removeAssetId_invalidParams()",
  "error TokenFacet__removeAssetId_notAdded()",
  "error TokenFacet__removeAssetId_remainsCustodied()",
  "error TokenFacet__setLiquidityCap_notCanonicalDomain()",
  "error TokenFacet__setupAssetWithDeployedRepresentation_invalidRepresentation()",
  "error TokenFacet__setupAssetWithDeployedRepresentation_onCanonicalDomain()",
  "error TokenFacet__setupAsset_invalidCanonicalConfiguration()",
  "error TokenFacet__setupAsset_representationListed()",
  "error TokenFacet__updateDetails_localNotFound()",
  "error TokenFacet__updateDetails_notApproved()",
  "error TokenFacet__updateDetails_onlyRemote()",
  "event AssetAdded(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, address adoptedAsset, address localAsset, address caller)",
  "event AssetRemoved(bytes32 indexed key, address caller)",
  "event LiquidityCapUpdated(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, uint256 cap, address caller)",
  "event StableSwapAdded(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, address swapPool, address caller)",
  "event TokenDeployed(uint32 indexed domain, bytes32 indexed id, address indexed representation)",
  "function addStableSwapPool(tuple(uint32 domain, bytes32 id) _canonical, address _stableSwapPool)",
  "function adoptedToCanonical(address _adopted) view returns (tuple(uint32 domain, bytes32 id))",
  "function adoptedToLocalExternalPools(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
  "function adoptedToLocalExternalPools(bytes32 _key) view returns (address)",
  "function approvedAssets(bytes32 _key) view returns (bool)",
  "function approvedAssets(tuple(uint32 domain, bytes32 id) _canonical) view returns (bool)",
  "function canonicalToAdopted(bytes32 _key) view returns (address)",
  "function canonicalToAdopted(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
  "function canonicalToRepresentation(bytes32 _key) view returns (address)",
  "function canonicalToRepresentation(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
  "function getCustodiedAmount(bytes32 _key) view returns (uint256)",
  "function getLocalAndAdoptedToken(bytes32 _id, uint32 _domain) view returns (address, address)",
  "function getTokenId(address _candidate) view returns (tuple(uint32 domain, bytes32 id))",
  "function removeAssetId(tuple(uint32 domain, bytes32 id) _canonical, address _adoptedAssetId, address _representation)",
  "function removeAssetId(bytes32 _key, address _adoptedAssetId, address _representation)",
  "function representationToCanonical(address _representation) view returns (tuple(uint32 domain, bytes32 id))",
  "function setupAsset(tuple(uint32 domain, bytes32 id) _canonical, uint8 _canonicalDecimals, string _representationName, string _representationSymbol, address _adoptedAssetId, address _stableSwapPool, uint256 _cap) returns (address _local)",
  "function setupAssetWithDeployedRepresentation(tuple(uint32 domain, bytes32 id) _canonical, address _representation, address _adoptedAssetId, address _stableSwapPool) returns (address)",
  "function updateDetails(tuple(uint32 domain, bytes32 id) _canonical, string _name, string _symbol)",
  "function updateLiquidityCap(tuple(uint32 domain, bytes32 id) _canonical, uint256 _updated)"
]
