[
  "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
  "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
  "error AssetLogic__handleOutgoingAsset_notNative()",
  "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
  "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
  "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
  "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error StableSwapFacet__deadlineCheck_deadlineNotMet()",
  "error StableSwapFacet__getSwapTokenBalance_indexOutOfRange()",
  "error StableSwapFacet__getSwapTokenIndex_notExist()",
  "error StableSwapFacet__getSwapToken_outOfRange()",
  "event AddLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 lpTokenSupply)",
  "event NewAdminFee(bytes32 indexed key, uint256 newAdminFee)",
  "event NewSwapFee(bytes32 indexed key, uint256 newSwapFee)",
  "event RemoveLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply)",
  "event RemoveLiquidityImbalance(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 lpTokenSupply)",
  "event RemoveLiquidityOne(bytes32 indexed key, address indexed provider, uint256 lpTokenAmount, uint256 lpTokenSupply, uint256 boughtId, uint256 tokensBought)",
  "event TokenSwap(bytes32 indexed key, address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId)",
  "function addSwapLiquidity(bytes32 key, uint256[] amounts, uint256 minToMint, uint256 deadline) returns (uint256)",
  "function calculateRemoveSwapLiquidity(bytes32 key, uint256 amount) view returns (uint256[])",
  "function calculateRemoveSwapLiquidityOneToken(bytes32 key, uint256 tokenAmount, uint8 tokenIndex) view returns (uint256 availableTokenAmount)",
  "function calculateSwap(bytes32 key, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx) view returns (uint256)",
  "function calculateSwapTokenAmount(bytes32 key, uint256[] amounts, bool deposit) view returns (uint256)",
  "function getSwapA(bytes32 key) view returns (uint256)",
  "function getSwapAPrecise(bytes32 key) view returns (uint256)",
  "function getSwapAdminBalance(bytes32 key, uint256 index) view returns (uint256)",
  "function getSwapLPToken(bytes32 key) view returns (address)",
  "function getSwapStorage(bytes32 key) view returns (tuple(bytes32 key, uint256 initialA, uint256 futureA, uint256 initialATime, uint256 futureATime, uint256 swapFee, uint256 adminFee, address lpToken, address[] pooledTokens, uint256[] tokenPrecisionMultipliers, uint256[] balances, uint256[] adminFees, bool disabled, uint256 removeTime))",
  "function getSwapToken(bytes32 key, uint8 index) view returns (address)",
  "function getSwapTokenBalance(bytes32 key, uint8 index) view returns (uint256)",
  "function getSwapTokenIndex(bytes32 key, address tokenAddress) view returns (uint8)",
  "function getSwapVirtualPrice(bytes32 key) view returns (uint256)",
  "function removeSwapLiquidity(bytes32 key, uint256 amount, uint256[] minAmounts, uint256 deadline) returns (uint256[])",
  "function removeSwapLiquidityImbalance(bytes32 key, uint256[] amounts, uint256 maxBurnAmount, uint256 deadline) returns (uint256)",
  "function removeSwapLiquidityOneToken(bytes32 key, uint256 tokenAmount, uint8 tokenIndex, uint256 minAmount, uint256 deadline) returns (uint256)",
  "function swap(bytes32 key, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) returns (uint256)",
  "function swapExact(bytes32 key, uint256 amountIn, address assetIn, address assetOut, uint256 minAmountOut, uint256 deadline) returns (uint256)",
  "function swapExactOut(bytes32 key, uint256 amountOut, address assetIn, address assetOut, uint256 maxAmountIn, uint256 deadline) returns (uint256)"
]
