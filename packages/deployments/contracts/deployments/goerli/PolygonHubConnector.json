{
  "address": "0x9060E2B92a4e8D4EAd05B7f3D736e3DA33955fa5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_mirrorDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_amb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_checkPointManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Connector__processMessage_notUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__ownershipDelayElapsed_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_noProposal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "current",
          "type": "address"
        }
      ],
      "name": "MirrorConnectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "mirrorDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "amb",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rootManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mirrorConnector",
          "type": "address"
        }
      ],
      "name": "NewConnector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AMB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIRROR_DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mirrorConnector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "processMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedData",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        }
      ],
      "name": "setMirrorConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_expected",
          "type": "address"
        }
      ],
      "name": "verifySender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd9f8be825d122d913b5a3b7cc1a08cbef8e0559f91c3d56982469d825026feec",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0x9060E2B92a4e8D4EAd05B7f3D736e3DA33955fa5",
    "transactionIndex": 0,
    "gasUsed": "2297857",
    "logsBloom": "0x00080000030000000000000000000000000010000000001000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000401000000000000000000000000000000000000020000000000000000000800000000000010000000000000000000400000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000020000000000000000000000000000000000008000000000000000000000000000080000000080000000020000020000000000000000000000000000000000000000002000000000000000000",
    "blockHash": "0x261dc4d22b91fa4fffac17579051c6d4a1f02f9b9bfe7ca14aac0cf376b226a0",
    "transactionHash": "0xd9f8be825d122d913b5a3b7cc1a08cbef8e0559f91c3d56982469d825026feec",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8173346,
        "transactionHash": "0xd9f8be825d122d913b5a3b7cc1a08cbef8e0559f91c3d56982469d825026feec",
        "address": "0x9060E2B92a4e8D4EAd05B7f3D736e3DA33955fa5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000054baa998771639628ffc0206c3b916c466b79c89"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x261dc4d22b91fa4fffac17579051c6d4a1f02f9b9bfe7ca14aac0cf376b226a0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8173346,
        "transactionHash": "0xd9f8be825d122d913b5a3b7cc1a08cbef8e0559f91c3d56982469d825026feec",
        "address": "0x9060E2B92a4e8D4EAd05B7f3D736e3DA33955fa5",
        "topics": [
          "0x4f9c27c2fe3f84576ea469d367d044da53c45e951617e8389f2b5ed8db9d25f0",
          "0x00000000000000000000000000000000000000000000000000000000676f6572",
          "0x0000000000000000000000000000000000000000000000000000000000002707"
        ],
        "data": "0x0000000000000000000000003d1d3e34f7fb6d26245e6640e1c50710efff15ba00000000000000000000000094e1c90fb33fec184b183625bbf096f713ca74a30000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x261dc4d22b91fa4fffac17579051c6d4a1f02f9b9bfe7ca14aac0cf376b226a0"
      }
    ],
    "blockNumber": 8173346,
    "cumulativeGasUsed": "2297857",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1735353714",
    "9991",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA",
    "0x94e1c90fb33FEc184B183625BBf096F713CA74a3",
    "0x0000000000000000000000000000000000000000",
    "0x2890bA17EfE978480615e330ecB65333b880928e"
  ],
  "numDeployments": 1,
  "solcInputHash": "78f268419430b8a8c2343170cc581183",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_mirrorDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_amb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_checkPointManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Connector__processMessage_notUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__ownershipDelayElapsed_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"MirrorConnectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"mirrorDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amb\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rootManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mirrorConnector\",\"type\":\"address\"}],\"name\":\"NewConnector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIRROR_DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedData\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"}],\"name\":\"setMirrorConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_expected\",\"type\":\"address\"}],\"name\":\"verifySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"processMessage(bytes)\":{\"details\":\"This is called by AMBs to process messages originating from mirror connector\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"sendMessage(bytes,bytes)\":{\"details\":\"This is called by the root manager *only* on mainnet to propagate the aggregate root\"}},\"version\":1},\"userdoc\":{\"events\":{\"MessageProcessed(bytes,address)\":{\"notice\":\"Emitted whenever a message is successfully received over an AMB\"},\"MessageSent(bytes,bytes,address)\":{\"notice\":\"Emitted whenever a message is successfully sent over an AMB\"}},\"kind\":\"user\",\"methods\":{\"AMB()\":{\"notice\":\"Address of the AMB on this domain.\"},\"DOMAIN()\":{\"notice\":\"The domain of this Messaging (i.e. Connector) contract.\"},\"MIRROR_DOMAIN()\":{\"notice\":\"The domain of the corresponding messaging (i.e. Connector) contract.\"},\"ROOT_MANAGER()\":{\"notice\":\"RootManager contract address.\"},\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"mirrorConnector()\":{\"notice\":\"Connector on L2 for L1 connectors, and vice versa.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"processMessage(bytes)\":{\"notice\":\"Processes a message received by an AMB\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"},\"renounceOwnership()\":{\"notice\":\"Renounces ownership of the contract after a delay\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"sendMessage(bytes,bytes)\":{\"notice\":\"Sends a message over the amb\"},\"setMirrorConnector(address)\":{\"notice\":\"Sets the address of the l2Connector for this domain\"},\"verifySender(address)\":{\"notice\":\"Checks the cross domain sender for a given address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/connectors/polygon/PolygonHubConnector.sol\":\"PolygonHubConnector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/messaging/connectors/Connector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {ProposedOwnable} from \\\"../../shared/ProposedOwnable.sol\\\";\\nimport {IConnector} from \\\"../interfaces/IConnector.sol\\\";\\n\\n/**\\n * @title Connector\\n * @author Connext Labs, Inc.\\n * @notice This contract has the messaging interface functions used by all connectors.\\n *\\n * @dev This contract stores information about mirror connectors, but can be used as a\\n * base for contracts that do not have a mirror (i.e. the connector handling messaging on\\n * mainnet). In this case, the `mirrorConnector` and `MIRROR_DOMAIN`\\n * will be empty\\n *\\n * @dev If ownership is renounced, this contract will be unable to update its `mirrorConnector`\\n * or `mirrorGas`\\n */\\nabstract contract Connector is ProposedOwnable, IConnector {\\n  // ========== Custom Errors ===========\\n\\n  error Connector__processMessage_notUsed();\\n\\n  // ============ Events ============\\n\\n  event NewConnector(\\n    uint32 indexed domain,\\n    uint32 indexed mirrorDomain,\\n    address amb,\\n    address rootManager,\\n    address mirrorConnector\\n  );\\n\\n  event MirrorConnectorUpdated(address previous, address current);\\n\\n  // ============ Public Storage ============\\n\\n  /**\\n   * @notice The domain of this Messaging (i.e. Connector) contract.\\n   */\\n  uint32 public immutable DOMAIN;\\n\\n  /**\\n   * @notice Address of the AMB on this domain.\\n   */\\n  address public immutable AMB;\\n\\n  /**\\n   * @notice RootManager contract address.\\n   */\\n  address public immutable ROOT_MANAGER;\\n\\n  /**\\n   * @notice The domain of the corresponding messaging (i.e. Connector) contract.\\n   */\\n  uint32 public immutable MIRROR_DOMAIN;\\n\\n  /**\\n   * @notice Connector on L2 for L1 connectors, and vice versa.\\n   */\\n  address public mirrorConnector;\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Errors if the msg.sender is not the registered AMB\\n   */\\n  modifier onlyAMB() {\\n    require(msg.sender == AMB, \\\"!AMB\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Errors if the msg.sender is not the registered ROOT_MANAGER\\n   */\\n  modifier onlyRootManager() {\\n    // NOTE: RootManager will be zero address for spoke connectors.\\n    // Only root manager can dispatch a message to spokes/L2s via the hub connector.\\n    require(msg.sender == ROOT_MANAGER, \\\"!rootManager\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Creates a new HubConnector instance\\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\\n   * for optimism, there is one connector on optimism and one connector on mainnet)\\n   * @param _domain The domain this connector lives on\\n   * @param _mirrorDomain The spoke domain\\n   * @param _amb The address of the amb on the domain this connector lives on\\n   * @param _rootManager The address of the RootManager on mainnet\\n   * @param _mirrorConnector The address of the spoke connector\\n   */\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector\\n  ) ProposedOwnable() {\\n    // set the owner\\n    _setOwner(msg.sender);\\n\\n    // sanity checks on values\\n    require(_domain != 0, \\\"empty domain\\\");\\n    require(_rootManager != address(0), \\\"empty rootManager\\\");\\n    // see note at top of contract on why the mirror values are not sanity checked\\n\\n    // set immutables\\n    DOMAIN = _domain;\\n    AMB = _amb;\\n    ROOT_MANAGER = _rootManager;\\n    MIRROR_DOMAIN = _mirrorDomain;\\n    // set mutables if defined\\n    if (_mirrorConnector != address(0)) {\\n      _setMirrorConnector(_mirrorConnector);\\n    }\\n\\n    emit NewConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector);\\n  }\\n\\n  // ============ Receivable ============\\n  /**\\n   * @notice Connectors may need to receive native asset to handle fees when sending a\\n   * message\\n   */\\n  receive() external payable {}\\n\\n  // ============ Admin Functions ============\\n\\n  /**\\n   * @notice Sets the address of the l2Connector for this domain\\n   */\\n  function setMirrorConnector(address _mirrorConnector) public onlyOwner {\\n    _setMirrorConnector(_mirrorConnector);\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Processes a message received by an AMB\\n   * @dev This is called by AMBs to process messages originating from mirror connector\\n   */\\n  function processMessage(bytes memory _data) external virtual onlyAMB {\\n    _processMessage(_data);\\n    emit MessageProcessed(_data, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Checks the cross domain sender for a given address\\n   */\\n  function verifySender(address _expected) external returns (bool) {\\n    return _verifySender(_expected);\\n  }\\n\\n  // ============ Virtual Functions ============\\n\\n  /**\\n   * @notice This function is used by the Connext contract on the l2 domain to send a message to the\\n   * l1 domain (i.e. called by Connext on optimism to send a message to mainnet with roots)\\n   * @param _data The contents of the message\\n   * @param _encodedData Data used to send the message; specific to connector\\n   */\\n  function _sendMessage(bytes memory _data, bytes memory _encodedData) internal virtual;\\n\\n  /**\\n   * @notice This function is used by the AMBs to handle incoming messages. Should store the latest\\n   * root generated on the l2 domain.\\n   */\\n  function _processMessage(\\n    bytes memory /* _data */\\n  ) internal virtual {\\n    // By default, reverts. This is to ensure the call path is not used unless this function is\\n    // overridden by the inheriting class\\n    revert Connector__processMessage_notUsed();\\n  }\\n\\n  /**\\n   * @notice Verify that the msg.sender is the correct AMB contract, and that the message's origin sender\\n   * is the expected address.\\n   * @dev Should be overridden by the implementing Connector contract.\\n   */\\n  function _verifySender(address _expected) internal virtual returns (bool);\\n\\n  // ============ Private Functions ============\\n\\n  function _setMirrorConnector(address _mirrorConnector) internal virtual {\\n    emit MirrorConnectorUpdated(mirrorConnector, _mirrorConnector);\\n    mirrorConnector = _mirrorConnector;\\n  }\\n}\\n\",\"keccak256\":\"0x08d4077a1b5caf9f46491206064bb24bee467dd741b42fed3d30a608eea83368\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/HubConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {Connector} from \\\"./Connector.sol\\\";\\n\\n/**\\n * @title HubConnector\\n * @author Connext Labs, Inc.\\n * @notice This contract implements the messaging functions needed on the hub-side of a given AMB.\\n * The HubConnector has a limited set of functionality compared to the SpokeConnector, namely that\\n * it contains no logic to store or prove messages.\\n *\\n * @dev This contract should be deployed on the hub-side of an AMB (i.e. on L1), and contracts\\n * which extend this should implement the virtual functions defined in the BaseConnector class\\n */\\nabstract contract HubConnector is Connector {\\n  /**\\n   * @notice Creates a new HubConnector instance\\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\\n   * for optimism, there is one connector on optimism and one connector on mainnet)\\n   * @param _domain The domain this connector lives on\\n   * @param _mirrorDomain The spoke domain\\n   * @param _amb The address of the amb on the domain this connector lives on\\n   * @param _rootManager The address of the RootManager on mainnet\\n   * @param _mirrorConnector The address of the spoke connector\\n   */\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector\\n  ) Connector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector) {}\\n\\n  // ============ Public fns ============\\n  /**\\n   * @notice Sends a message over the amb\\n   * @dev This is called by the root manager *only* on mainnet to propagate the aggregate root\\n   */\\n  function sendMessage(bytes memory _data, bytes memory _encodedData) external payable onlyRootManager {\\n    _sendMessage(_data, _encodedData);\\n    emit MessageSent(_data, _encodedData, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0xc35621419ca872ed0550b0943a577b39942f3d2c9b54de008fee382d5ad290e4\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/polygon/PolygonHubConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IRootManager} from \\\"../../interfaces/IRootManager.sol\\\";\\n\\nimport {FxBaseRootTunnel} from \\\"./tunnel/FxBaseRootTunnel.sol\\\";\\n\\nimport {HubConnector} from \\\"../HubConnector.sol\\\";\\n\\ncontract PolygonHubConnector is HubConnector, FxBaseRootTunnel {\\n  // ============ Constructor ============\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    address _checkPointManager\\n  )\\n    HubConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector)\\n    FxBaseRootTunnel(_checkPointManager, _amb)\\n  {}\\n\\n  // ============ Private fns ============\\n\\n  function _verifySender(address _expected) internal view override returns (bool) {\\n    // NOTE: always return false on polygon\\n    return false;\\n  }\\n\\n  function _sendMessage(bytes memory _data, bytes memory _encodedData) internal override {\\n    // Should not include specialized calldata\\n    require(_encodedData.length == 0, \\\"!data length\\\");\\n    _sendMessageToChild(_data);\\n  }\\n\\n  function _processMessageFromChild(bytes memory message) internal override {\\n    // NOTE: crosschain sender is not directly exposed by the child message\\n\\n    // do not need any additional sender or origin checks here since the proof contains inclusion proofs of the snapshots\\n\\n    // get the data (should be the aggregate root)\\n    require(message.length == 32, \\\"!length\\\");\\n    // update the root on the root manager\\n    IRootManager(ROOT_MANAGER).aggregate(MIRROR_DOMAIN, bytes32(message));\\n\\n    emit MessageProcessed(message, msg.sender);\\n  }\\n\\n  // DO NOT override _processMessage, should revert from `Connector` class. All messages must use the\\n  // `_processMessageFromChild` flow.\\n\\n  function _setMirrorConnector(address _mirrorConnector) internal override {\\n    // NOTE: FxBaseRootTunnel has the following code in their `setFxChildTunnel`:\\n    // ```\\n    // require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n    // ```\\n    // Which means this function will revert if updating the `mirrorConnector`. In that case, in\\n    // changes  the\\n    // hub connector should also be redeployed\\n    super._setMirrorConnector(_mirrorConnector);\\n\\n    setFxChildTunnel(_mirrorConnector);\\n  }\\n}\\n\",\"keccak256\":\"0x7b259dfd950d7e954365f66256629398ce3801ab4bf5e2ffba79d1ca3ccf9433\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/polygon/lib/ExitPayloadReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/ExitPayloadReader.sol\\npragma solidity 0.8.17;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(\\n    uint256 src,\\n    uint256 dest,\\n    uint256 len\\n  ) private pure {\\n    if (len == 0) return;\\n\\n    // copy as many word sizes as possible\\n    for (; len > WORD_SIZE - 1; len -= WORD_SIZE) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n\\n      src += WORD_SIZE;\\n      dest += WORD_SIZE;\\n    }\\n\\n    if (len == 0) return;\\n\\n    // left over bytes. Mask is used to remove unwanted bytes from the word\\n    uint256 mask = 256**(WORD_SIZE - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask)) // zero out src\\n      let destpart := and(mload(dest), mask) // retrieve the bytes\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  function toExitPayload(bytes memory data) internal pure returns (ExitPayload memory) {\\n    RLPReader.RLPItem[] memory payloadData = data.toRlpItem().toList();\\n\\n    return ExitPayload(payloadData);\\n  }\\n\\n  function getHeaderNumber(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[0].toUint();\\n  }\\n\\n  function getBlockProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\n    return payload.data[1].toBytes();\\n  }\\n\\n  function getBlockNumber(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[2].toUint();\\n  }\\n\\n  function getBlockTime(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[3].toUint();\\n  }\\n\\n  function getTxRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\n    return bytes32(payload.data[4].toUint());\\n  }\\n\\n  function getReceiptRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\n    return bytes32(payload.data[5].toUint());\\n  }\\n\\n  function getReceipt(ExitPayload memory payload) internal pure returns (Receipt memory receipt) {\\n    receipt.raw = payload.data[6].toBytes();\\n    RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n    if (receiptItem.isList()) {\\n      // legacy tx\\n      receipt.data = receiptItem.toList();\\n    } else {\\n      // pop first byte before parsting receipt\\n      bytes memory typedBytes = receipt.raw;\\n      bytes memory result = new bytes(typedBytes.length - 1);\\n      uint256 srcPtr;\\n      uint256 destPtr;\\n      assembly {\\n        srcPtr := add(33, typedBytes)\\n        destPtr := add(0x20, result)\\n      }\\n\\n      copy(srcPtr, destPtr, result.length);\\n      receipt.data = result.toRlpItem().toList();\\n    }\\n\\n    receipt.logIndex = getReceiptLogIndex(payload);\\n    return receipt;\\n  }\\n\\n  function getReceiptProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\n    return payload.data[7].toBytes();\\n  }\\n\\n  function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns (bytes memory) {\\n    return payload.data[8].toBytes();\\n  }\\n\\n  function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[8].toUint();\\n  }\\n\\n  function getReceiptLogIndex(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[9].toUint();\\n  }\\n\\n  // Receipt methods\\n  function toBytes(Receipt memory receipt) internal pure returns (bytes memory) {\\n    return receipt.raw;\\n  }\\n\\n  function getLog(Receipt memory receipt) internal pure returns (Log memory) {\\n    RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n    return Log(logData, logData.toList());\\n  }\\n\\n  // Log methods\\n  function getEmitter(Log memory log) internal pure returns (address) {\\n    return RLPReader.toAddress(log.list[0]);\\n  }\\n\\n  function getTopics(Log memory log) internal pure returns (LogTopics memory) {\\n    return LogTopics(log.list[1].toList());\\n  }\\n\\n  function getData(Log memory log) internal pure returns (bytes memory) {\\n    return log.list[2].toBytes();\\n  }\\n\\n  function toRlpBytes(Log memory log) internal pure returns (bytes memory) {\\n    return log.data.toRlpBytes();\\n  }\\n\\n  // LogTopics methods\\n  function getField(LogTopics memory topics, uint256 index) internal pure returns (RLPReader.RLPItem memory) {\\n    return topics.data[index];\\n  }\\n}\\n\",\"keccak256\":\"0x0d07d60a794df4d3c0a41032f0ee46912daeb73369a3a112f376fcd0487fc107\",\"license\":\"MIT\"},\"contracts/messaging/connectors/polygon/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/Merkle.sol\\npragma solidity 0.8.17;\\n\\nlibrary Merkle {\\n  function checkMembership(\\n    bytes32 leaf,\\n    uint256 index,\\n    bytes32 rootHash,\\n    bytes memory proof\\n  ) internal pure returns (bool) {\\n    require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n    uint256 proofHeight = proof.length / 32;\\n    // Proof of size n means, height of the tree is n+1.\\n    // In a tree of height n+1, max #leafs possible is 2 ^ n\\n    require(index < 2**proofHeight, \\\"Leaf index is too big\\\");\\n\\n    bytes32 proofElement;\\n    bytes32 computedHash = leaf;\\n    uint256 len = proof.length + 1;\\n    for (uint256 i = 32; i < len; ) {\\n      assembly {\\n        proofElement := mload(add(proof, i))\\n      }\\n\\n      if (index % 2 == 0) {\\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n      } else {\\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n      }\\n\\n      index = index / 2;\\n\\n      unchecked {\\n        i += 32;\\n      }\\n    }\\n    return computedHash == rootHash;\\n  }\\n}\\n\",\"keccak256\":\"0xc7282da570239b7d6c774fa6e829a605d73bdfcc7812b727f4a5b42b17b6d64f\",\"license\":\"MIT\"},\"contracts/messaging/connectors/polygon/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/MerklePatriciaProof.sol\\npragma solidity 0.8.17;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n  /*\\n   * @dev Verifies a merkle patricia proof.\\n   * @param value The terminating value in the trie.\\n   * @param encodedPath The path in the trie leading to value.\\n   * @param rlpParentNodes The rlp encoded stack of nodes.\\n   * @param root The root hash of the trie.\\n   * @return The boolean validity of the proof.\\n   */\\n  function verify(\\n    bytes memory value,\\n    bytes memory encodedPath,\\n    bytes memory rlpParentNodes,\\n    bytes32 root\\n  ) internal pure returns (bool) {\\n    RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n    RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n    bytes memory currentNode;\\n    RLPReader.RLPItem[] memory currentNodeList;\\n\\n    bytes32 nodeKey = root;\\n    uint256 pathPtr = 0;\\n\\n    bytes memory path = _getNibbleArray(encodedPath);\\n    if (path.length == 0) {\\n      return false;\\n    }\\n\\n    uint256 len = parentNodes.length;\\n    for (uint256 i = 0; i < len; ) {\\n      if (pathPtr > path.length) {\\n        return false;\\n      }\\n\\n      currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n      if (nodeKey != keccak256(currentNode)) {\\n        return false;\\n      }\\n      currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n      if (currentNodeList.length == 17) {\\n        if (pathPtr == path.length) {\\n          if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        }\\n\\n        uint8 nextPathNibble = uint8(path[pathPtr]);\\n        if (nextPathNibble > 16) {\\n          return false;\\n        }\\n        nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\\n        pathPtr += 1;\\n      } else if (currentNodeList.length == 2) {\\n        uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\\n        if (pathPtr + traversed == path.length) {\\n          //leaf node\\n          if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        }\\n\\n        //extension node\\n        if (traversed == 0) {\\n          return false;\\n        }\\n\\n        pathPtr += traversed;\\n        nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n      } else {\\n        return false;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function _nibblesToTraverse(\\n    bytes memory encodedPartialPath,\\n    bytes memory path,\\n    uint256 pathPtr\\n  ) private pure returns (uint256) {\\n    uint256 len = 0;\\n    // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n    // and slicedPath have elements that are each one hex character (1 nibble)\\n    bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n    bytes memory slicedPath = new bytes(partialPath.length);\\n\\n    // pathPtr counts nibbles in path\\n    // partialPath.length is a number of nibbles\\n    uint256 _len = pathPtr + partialPath.length;\\n    for (uint256 i = pathPtr; i < _len; ) {\\n      bytes1 pathNibble = path[i];\\n      slicedPath[i - pathPtr] = pathNibble;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    if (keccak256(partialPath) == keccak256(slicedPath)) {\\n      len = partialPath.length;\\n    } else {\\n      len = 0;\\n    }\\n    return len;\\n  }\\n\\n  // bytes b must be hp encoded\\n  function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\\n    bytes memory nibbles = \\\"\\\";\\n    if (b.length > 0) {\\n      uint8 offset;\\n      uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n      if (hpNibble == 1 || hpNibble == 3) {\\n        nibbles = new bytes(b.length * 2 - 1);\\n        bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n        nibbles[0] = oddNibble;\\n        offset = 1;\\n      } else {\\n        nibbles = new bytes(b.length * 2 - 2);\\n        offset = 0;\\n      }\\n\\n      uint256 len = nibbles.length;\\n      for (uint256 i = offset; i < len; ) {\\n        nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n    }\\n    return nibbles;\\n  }\\n\\n  function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\\n    return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\\n  }\\n}\\n\",\"keccak256\":\"0x5132cb2535739352bac5f6cd66689cbd1bc086e048a05f7524079ef74ad693b3\",\"license\":\"MIT\"},\"contracts/messaging/connectors/polygon/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/RLPReader.sol\\npragma solidity 0.8.17;\\n\\nlibrary RLPReader {\\n  uint8 constant STRING_SHORT_START = 0x80;\\n  uint8 constant STRING_LONG_START = 0xb8;\\n  uint8 constant LIST_SHORT_START = 0xc0;\\n  uint8 constant LIST_LONG_START = 0xf8;\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct RLPItem {\\n    uint256 len;\\n    uint256 memPtr;\\n  }\\n\\n  struct Iterator {\\n    RLPItem item; // Item that's being iterated over.\\n    uint256 nextPtr; // Position of the next item in the list.\\n  }\\n\\n  /*\\n   * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n   * @param self The iterator.\\n   * @return The next element in the iteration.\\n   */\\n  function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n    require(hasNext(self));\\n\\n    uint256 ptr = self.nextPtr;\\n    uint256 itemLength = _itemLength(ptr);\\n    self.nextPtr = ptr + itemLength;\\n\\n    return RLPItem(itemLength, ptr);\\n  }\\n\\n  /*\\n   * @dev Returns true if the iteration has more elements.\\n   * @param self The iterator.\\n   * @return true if the iteration has more elements.\\n   */\\n  function hasNext(Iterator memory self) internal pure returns (bool) {\\n    RLPItem memory item = self.item;\\n    return self.nextPtr < item.memPtr + item.len;\\n  }\\n\\n  /*\\n   * @param item RLP encoded bytes\\n   */\\n  function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n    uint256 memPtr;\\n    assembly {\\n      memPtr := add(item, 0x20)\\n    }\\n\\n    return RLPItem(item.length, memPtr);\\n  }\\n\\n  /*\\n   * @dev Create an iterator. Reverts if item is not a list.\\n   * @param self The RLP item.\\n   * @return An 'Iterator' over the item.\\n   */\\n  function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n    require(isList(self));\\n\\n    uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n    return Iterator(self, ptr);\\n  }\\n\\n  /*\\n   * @param item RLP encoded bytes\\n   */\\n  function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n    return item.len;\\n  }\\n\\n  /*\\n   * @param item RLP encoded bytes\\n   */\\n  function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n    return item.len - _payloadOffset(item.memPtr);\\n  }\\n\\n  /*\\n   * @param item RLP encoded list in bytes\\n   */\\n  function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n    require(isList(item));\\n\\n    uint256 items = numItems(item);\\n    RLPItem[] memory result = new RLPItem[](items);\\n\\n    uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n    uint256 dataLen;\\n    for (uint256 i = 0; i < items; ) {\\n      dataLen = _itemLength(memPtr);\\n      result[i] = RLPItem(dataLen, memPtr);\\n      memPtr = memPtr + dataLen;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  // @return indicator whether encoded payload is a list. negate this function call for isData.\\n  function isList(RLPItem memory item) internal pure returns (bool) {\\n    if (item.len == 0) return false;\\n\\n    uint8 byte0;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < LIST_SHORT_START) return false;\\n    return true;\\n  }\\n\\n  /*\\n   * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n   * @return keccak256 hash of RLP encoded bytes.\\n   */\\n  function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n    uint256 ptr = item.memPtr;\\n    uint256 len = item.len;\\n    bytes32 result;\\n    assembly {\\n      result := keccak256(ptr, len)\\n    }\\n    return result;\\n  }\\n\\n  function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n    uint256 offset = _payloadOffset(item.memPtr);\\n    uint256 memPtr = item.memPtr + offset;\\n    uint256 len = item.len - offset; // data length\\n    return (memPtr, len);\\n  }\\n\\n  /*\\n   * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n   * @return keccak256 hash of the item payload.\\n   */\\n  function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n    (uint256 memPtr, uint256 len) = payloadLocation(item);\\n    bytes32 result;\\n    assembly {\\n      result := keccak256(memPtr, len)\\n    }\\n    return result;\\n  }\\n\\n  /** RLPItem conversions into data types **/\\n\\n  // @returns raw rlp encoding in bytes\\n  function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n    bytes memory result = new bytes(item.len);\\n    if (result.length == 0) return result;\\n\\n    uint256 ptr;\\n    assembly {\\n      ptr := add(0x20, result)\\n    }\\n\\n    copy(item.memPtr, ptr, item.len);\\n    return result;\\n  }\\n\\n  // any non-zero byte is considered true\\n  function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n    require(item.len == 1);\\n    uint256 result;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      result := byte(0, mload(memPtr))\\n    }\\n\\n    return result == 0 ? false : true;\\n  }\\n\\n  function toAddress(RLPItem memory item) internal pure returns (address) {\\n    // 1 byte for the length prefix\\n    require(item.len == 21);\\n\\n    return address(uint160(toUint(item)));\\n  }\\n\\n  function toUint(RLPItem memory item) internal pure returns (uint256) {\\n    require(item.len > 0 && item.len < 33 + 1);\\n\\n    uint256 offset = _payloadOffset(item.memPtr);\\n    uint256 len = item.len - offset;\\n\\n    uint256 result;\\n    uint256 memPtr = item.memPtr + offset;\\n    assembly {\\n      result := mload(memPtr)\\n\\n      // shfit to the correct location if neccesary\\n      if lt(len, 32) {\\n        result := div(result, exp(256, sub(32, len)))\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  // enforces 32 byte length\\n  function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n    // one byte prefix\\n    require(item.len == 33);\\n\\n    uint256 result;\\n    uint256 memPtr = item.memPtr + 1;\\n    assembly {\\n      result := mload(memPtr)\\n    }\\n\\n    return result;\\n  }\\n\\n  function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n    require(item.len > 0);\\n\\n    uint256 offset = _payloadOffset(item.memPtr);\\n    uint256 len = item.len - offset; // data length\\n    bytes memory result = new bytes(len);\\n\\n    uint256 destPtr;\\n    assembly {\\n      destPtr := add(0x20, result)\\n    }\\n\\n    copy(item.memPtr + offset, destPtr, len);\\n    return result;\\n  }\\n\\n  /*\\n   * Private Helpers\\n   */\\n\\n  // @return number of payload items inside an encoded list.\\n  function numItems(RLPItem memory item) private pure returns (uint256) {\\n    if (item.len == 0) return 0;\\n\\n    uint256 count = 0;\\n    uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n    uint256 endPtr = item.memPtr + item.len;\\n    while (currPtr < endPtr) {\\n      currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n      count++;\\n    }\\n\\n    return count;\\n  }\\n\\n  // @return entire rlp item byte length\\n  function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n    uint256 itemLen;\\n    uint256 byte0;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < STRING_SHORT_START) itemLen = 1;\\n    else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\\n    else if (byte0 < LIST_SHORT_START) {\\n      assembly {\\n        let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n        memPtr := add(memPtr, 1) // skip over the first byte\\n        /* 32 byte word size */\\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n        itemLen := add(dataLen, add(byteLen, 1))\\n      }\\n    } else if (byte0 < LIST_LONG_START) {\\n      itemLen = byte0 - LIST_SHORT_START + 1;\\n    } else {\\n      assembly {\\n        let byteLen := sub(byte0, 0xf7)\\n        memPtr := add(memPtr, 1)\\n\\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n        itemLen := add(dataLen, add(byteLen, 1))\\n      }\\n    }\\n\\n    return itemLen;\\n  }\\n\\n  // @return number of bytes until the data\\n  function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n    uint256 byte0;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < STRING_SHORT_START) return 0;\\n    else if (byte0 < STRING_LONG_START || (byte0 > LIST_SHORT_START - 1 && byte0 < LIST_LONG_START)) return 1;\\n    else if (byte0 < LIST_SHORT_START)\\n      // being explicit\\n      return byte0 - (STRING_LONG_START - 1) + 1;\\n    else return byte0 - (LIST_LONG_START - 1) + 1;\\n  }\\n\\n  /*\\n   * @param src Pointer to source\\n   * @param dest Pointer to destination\\n   * @param len Amount of memory to copy from the source\\n   */\\n  function copy(\\n    uint256 src,\\n    uint256 dest,\\n    uint256 len\\n  ) private pure {\\n    if (len == 0) return;\\n\\n    // copy as many word sizes as possible\\n    for (; len > WORD_SIZE - 1; len -= WORD_SIZE) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n\\n      src += WORD_SIZE;\\n      dest += WORD_SIZE;\\n    }\\n\\n    if (len == 0) return;\\n\\n    // left over bytes. Mask is used to remove unwanted bytes from the word\\n    uint256 mask = 256**(WORD_SIZE - len) - 1;\\n\\n    assembly {\\n      let srcpart := and(mload(src), not(mask)) // zero out src\\n      let destpart := and(mload(dest), mask) // retrieve the bytes\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x213834ee76145029ef22fab9575fbffec4309f7b52b63e23d840aeab7f5a6f44\",\"license\":\"MIT\"},\"contracts/messaging/connectors/polygon/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/tunnel/FxBaseRootTunnel.sol\\npragma solidity 0.8.17;\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\ninterface IFxStateSender {\\n  function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n  struct HeaderBlock {\\n    bytes32 root;\\n    uint256 start;\\n    uint256 end;\\n    uint256 createdAt;\\n    address proposer;\\n  }\\n\\n  /**\\n   * @notice mapping of checkpoint header numbers to block details\\n   * @dev These checkpoints are submited by plasma contracts\\n   */\\n  mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n  using RLPReader for RLPReader.RLPItem;\\n  using Merkle for bytes32;\\n  using ExitPayloadReader for bytes;\\n  using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n  using ExitPayloadReader for ExitPayloadReader.Log;\\n  using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n  using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n  // keccak256(MessageSent(bytes))\\n  bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n  // state sender contract\\n  IFxStateSender public fxRoot;\\n  // root chain manager\\n  ICheckpointManager public checkpointManager;\\n  // child tunnel contract which receives and sends messages\\n  address public fxChildTunnel;\\n\\n  // storage to avoid duplicate exits\\n  mapping(bytes32 => bool) public processedExits;\\n\\n  constructor(address _checkpointManager, address _fxRoot) {\\n    checkpointManager = ICheckpointManager(_checkpointManager);\\n    fxRoot = IFxStateSender(_fxRoot);\\n  }\\n\\n  // set fxChildTunnel if not set already\\n  function setFxChildTunnel(address _fxChildTunnel) internal virtual {\\n    require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n    fxChildTunnel = _fxChildTunnel;\\n  }\\n\\n  /**\\n   * @notice Send bytes message to Child Tunnel\\n   * @param message bytes message that will be sent to Child Tunnel\\n   * some message examples -\\n   *   abi.encode(tokenId);\\n   *   abi.encode(tokenId, tokenMetadata);\\n   *   abi.encode(messageType, messageData);\\n   */\\n  function _sendMessageToChild(bytes memory message) internal {\\n    fxRoot.sendMessageToChild(fxChildTunnel, message);\\n  }\\n\\n  function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n    ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n    bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n    uint256 blockNumber = payload.getBlockNumber();\\n    // checking if exit has already been processed\\n    // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n    bytes32 exitHash = keccak256(\\n      abi.encodePacked(\\n        blockNumber,\\n        // first 2 nibbles are dropped while generating nibble array\\n        // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n        // so converting to nibble array and then hashing it\\n        MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n        payload.getReceiptLogIndex()\\n      )\\n    );\\n    require(processedExits[exitHash] == false, \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\");\\n    processedExits[exitHash] = true;\\n\\n    ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n    ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n    // check child tunnel\\n    require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n    bytes32 receiptRoot = payload.getReceiptRoot();\\n    // verify receipt inclusion\\n    require(\\n      MerklePatriciaProof.verify(receipt.toBytes(), branchMaskBytes, payload.getReceiptProof(), receiptRoot),\\n      \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n    );\\n\\n    // verify checkpoint inclusion\\n    _checkBlockMembershipInCheckpoint(\\n      blockNumber,\\n      payload.getBlockTime(),\\n      payload.getTxRoot(),\\n      receiptRoot,\\n      payload.getHeaderNumber(),\\n      payload.getBlockProof()\\n    );\\n\\n    ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n    require(\\n      bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n      \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n    );\\n\\n    // received message data\\n    bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n    return message;\\n  }\\n\\n  function _checkBlockMembershipInCheckpoint(\\n    uint256 blockNumber,\\n    uint256 blockTime,\\n    bytes32 txRoot,\\n    bytes32 receiptRoot,\\n    uint256 headerNumber,\\n    bytes memory blockProof\\n  ) private view returns (uint256) {\\n    (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\\n\\n    require(\\n      keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\\n        blockNumber - startBlock,\\n        headerRoot,\\n        blockProof\\n      ),\\n      \\\"FxRootTunnel: INVALID_HEADER\\\"\\n    );\\n    return createdAt;\\n  }\\n\\n  /**\\n   * @notice receive message from  L2 to L1, validated by proof\\n   * @dev This function verifies if the transaction actually happened on child chain\\n   *\\n   * @param inputData RLP encoded data of the reference tx containing following list of fields\\n   *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n   *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n   *  2 - blockNumber - Block number containing the reference tx on child chain\\n   *  3 - blockTime - Reference tx block time\\n   *  4 - txRoot - Transactions root of block\\n   *  5 - receiptRoot - Receipts root of block\\n   *  6 - receipt - Receipt of the reference transaction\\n   *  7 - receiptProof - Merkle proof of the reference receipt\\n   *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n   *  9 - receiptLogIndex - Log Index to read from the receipt\\n   */\\n  function receiveMessage(bytes memory inputData) public virtual {\\n    bytes memory message = _validateAndExtractMessage(inputData);\\n    _processMessageFromChild(message);\\n  }\\n\\n  /**\\n   * @notice Process message received from Child Tunnel\\n   * @dev function needs to be implemented to handle message as per requirement\\n   * This is called by onStateReceive function.\\n   * Since it is called via a system call, any event will not be emitted during its execution.\\n   * @param message bytes message that was sent from Child Tunnel\\n   */\\n  function _processMessageFromChild(bytes memory message) internal virtual;\\n}\\n\",\"keccak256\":\"0x7b5d6a3850d1aba92864c1f7361e2a0f1ecd2073e9ef5783b2ff543f45a7e42d\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IProposedOwnable} from \\\"../../shared/interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @notice This interface is what the Connext contract will send and receive messages through.\\n * The messaging layer should conform to this interface, and should be interchangeable (i.e.\\n * could be Nomad or a generic AMB under the hood).\\n *\\n * @dev This uses the nomad format to ensure nomad can be added in as it comes back online.\\n *\\n * Flow from transfer from polygon to optimism:\\n * 1. User calls `xcall` with destination specified\\n * 2. This will swap in to the bridge assets\\n * 3. The swapped assets will get burned\\n * 4. The Connext contract will call `dispatch` on the messaging contract to add the transfer\\n *    to the root\\n * 5. [At some time interval] Relayers call `send` to send the current root from polygon to\\n *    mainnet. This is done on all \\\"spoke\\\" domains.\\n * 6. [At some time interval] Relayers call `propagate` [better name] on mainnet, this generates a new merkle\\n *    root from all of the AMBs\\n *    - This function must be able to read root data from all AMBs and aggregate them into a single merkle\\n *      tree root\\n *    - Will send the mixed root from all chains back through the respective AMBs to all other chains\\n * 7. AMB will call `update` to update the latest root on the messaging contract on spoke domains\\n * 8. [At any point] Relayers can call `proveAndProcess` to prove inclusion of dispatched message, and call\\n *    process on the `Connext` contract\\n * 9. Takes minted bridge tokens and credits the LP\\n *\\n * AMB requirements:\\n * - Access `msg.sender` both from mainnet -> spoke and vice versa\\n * - Ability to read *our root* from the AMB\\n *\\n * AMBs:\\n * - PoS bridge from polygon\\n * - arbitrum bridge\\n * - optimism bridge\\n * - gnosis chain\\n * - bsc (use multichain for messaging)\\n */\\ninterface IConnector is IProposedOwnable {\\n  // ============ Events ============\\n  /**\\n   * @notice Emitted whenever a message is successfully sent over an AMB\\n   * @param data The contents of the message\\n   * @param encodedData Data used to send the message; specific to connector\\n   * @param caller Who called the function (sent the message)\\n   */\\n  event MessageSent(bytes data, bytes encodedData, address caller);\\n\\n  /**\\n   * @notice Emitted whenever a message is successfully received over an AMB\\n   * @param data The contents of the message\\n   * @param caller Who called the function\\n   */\\n  event MessageProcessed(bytes data, address caller);\\n\\n  // ============ Public fns ============\\n\\n  function processMessage(bytes memory _data) external;\\n\\n  function verifySender(address _expected) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfba166354b442fa72b05be07aed38400b47f68498e8dfdd94fc43df00c401ed1\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IRootManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\ninterface IRootManager {\\n  /**\\n   * @notice This is called by relayers to generate + send the mixed root from mainnet via AMB to\\n   * spoke domains.\\n   * @dev This must read information for the root from the registered AMBs.\\n   */\\n  function propagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData\\n  ) external payable;\\n\\n  /**\\n   * @notice Called by the connectors for various domains on the hub to aggregate their latest\\n   * inbound root.\\n   * @dev This must read information for the root from the registered AMBs\\n   */\\n  function aggregate(uint32 _domain, bytes32 _outbound) external;\\n}\\n\",\"keccak256\":\"0xa895dfaa4baad37a636e7e7e7da72a0a4badfd2d3d8256f975e5101cd5a98236\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnable is IProposedOwnable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnable__onlyOwner_notOwner();\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\n  error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnable__renounceOwnership_noProposal();\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  // ======== Getters =========\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if the ownership delay has not elapsed\\n   */\\n  modifier ownershipDelayElapsed() {\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  // ======== External =========\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && _proposedOwnershipTimestamp != 0)\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner ownershipDelayElapsed {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(address(0));\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed ownershipDelayElapsed {\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\n    // is 0-d out and this check is implicitly enforced by modifier\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  // ======== Internal =========\\n\\n  function _setOwner(address newOwner) internal {\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n    delete _proposedOwnershipTimestamp;\\n    delete _proposed;\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(newlyProposed);\\n  }\\n}\\n\",\"keccak256\":\"0xa96eff4fdff55ffa29cda5c18285a9af04c3cbaf55f83696085cdd2251a8d6c0\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IProposedOwnable\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\n * process\\n */\\ninterface IProposedOwnable {\\n  /**\\n   * @dev This emits when change in ownership of a contract is proposed.\\n   */\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  /**\\n   * @dev This emits when ownership of a contract changes.\\n   */\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Get the address of the owner\\n   * @return owner_ The address of the owner.\\n   */\\n  function owner() external view returns (address owner_);\\n\\n  /**\\n   * @notice Get the address of the proposed owner\\n   * @return proposed_ The address of the proposed.\\n   */\\n  function proposed() external view returns (address proposed_);\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   * @param newlyProposed The proposed new owner of the contract\\n   */\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   */\\n  function acceptProposedOwner() external;\\n}\\n\",\"keccak256\":\"0x4ec1aa589d37d0c1eac9966e26d2d3540d1661b81763e678f14d2c6fa0682323\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162002b3b38038062002b3b83398101604081905262000035916200036e565b8084878782878784848484846200004c33620001ba565b8463ffffffff16600003620000975760405162461bcd60e51b815260206004820152600c60248201526b32b6b83a3c903237b6b0b4b760a11b60448201526064015b60405180910390fd5b6001600160a01b038216620000e35760405162461bcd60e51b815260206004820152601160248201527032b6b83a3c903937b7ba26b0b730b3b2b960791b60448201526064016200008e565b63ffffffff8086166080526001600160a01b0380851660a05283811660c05290851660e0528116156200011b576200011b816200021f565b604080516001600160a01b0385811682528481166020830152831681830152905163ffffffff86811692908816917f4f9c27c2fe3f84576ea469d367d044da53c45e951617e8389f2b5ed8db9d25f09181900360600190a35050600580546001600160a01b039b8c166001600160a01b031991821617909155600480549a909b1699169890981790985550620003ef9c50505050505050505050505050565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b62000235816200024360201b620008311760201c565b6200024081620002ac565b50565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b0316156200031a5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b60648201526084016200008e565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b805163ffffffff811681146200035157600080fd5b919050565b80516001600160a01b03811681146200035157600080fd5b60008060008060008060c087890312156200038857600080fd5b62000393876200033c565b9550620003a3602088016200033c565b9450620003b36040880162000356565b9350620003c36060880162000356565b9250620003d36080880162000356565b9150620003e360a0880162000356565b90509295509295509295565b60805160a05160c05160e0516126f662000445600039600081816101a90152610d11015260008181610290015281816104c40152610cea01526000818161043701526105790152600061023c01526126f66000f3fe6080604052600436106101445760003560e01c80638da5cb5b116100b6578063d1851c921161006f578063d1851c92146103e8578063d232c22014610406578063d69f9d6114610425578063db1b765914610459578063de9b771f14610479578063f953cec71461049957600080fd5b80638da5cb5b14610335578063972c492814610353578063b1f8100d14610373578063c0857ba014610393578063c5b350df146103b3578063cc394283146103c857600080fd5b806352a9674b1161010857806352a9674b1461022a5780635bd11efc1461025e5780635f61e3ec1461027e578063607f2d42146102ca5780636a42b8f81461030a578063715018a61461032057600080fd5b80630e387de61461015057806314168416146101975780633cf52ffb146101e057806348e6fa23146101f55780634ff746f61461020a57600080fd5b3661014b57005b600080fd5b34801561015c57600080fd5b506101847f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6040519081526020015b60405180910390f35b3480156101a357600080fd5b506101cb7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161018e565b3480156101ec57600080fd5b50600254610184565b6102086102033660046121de565b6104b9565b005b34801561021657600080fd5b50610208610225366004612242565b61056e565b34801561023657600080fd5b506101cb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561026a57600080fd5b5061020861027936600461228c565b610614565b34801561028a57600080fd5b506102b27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018e565b3480156102d657600080fd5b506102fa6102e53660046122a9565b60076020526000908152604090205460ff1681565b604051901515815260200161018e565b34801561031657600080fd5b5062093a80610184565b34801561032c57600080fd5b5061020861064b565b34801561034157600080fd5b506000546001600160a01b03166102b2565b34801561035f57600080fd5b506006546102b2906001600160a01b031681565b34801561037f57600080fd5b5061020861038e36600461228c565b6106ff565b34801561039f57600080fd5b506005546102b2906001600160a01b031681565b3480156103bf57600080fd5b5061020861079d565b3480156103d457600080fd5b506003546102b2906001600160a01b031681565b3480156103f457600080fd5b506001546001600160a01b03166102b2565b34801561041257600080fd5b506000546001600160a01b0316156102fa565b34801561043157600080fd5b506102b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561046557600080fd5b506102fa61047436600461228c565b61080d565b34801561048557600080fd5b506004546102b2906001600160a01b031681565b3480156104a557600080fd5b506102086104b4366004612242565b610817565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105255760405162461bcd60e51b815260206004820152600c60248201526b10b937b7ba26b0b730b3b2b960a11b60448201526064015b60405180910390fd5b61052f828261089a565b7fdcaa37a042a0087de79018c629bbd29cee82ca80bd9be394e1696bf9e935507782823360405161056293929190612312565b60405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105cf5760405162461bcd60e51b815260040161051c9060208082526004908201526310a0a6a160e11b604082015260600190565b6105d8816108e1565b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced8133604051610609929190612350565b60405180910390a150565b6000546001600160a01b0316331461063f576040516311a8a1bb60e31b815260040160405180910390fd5b610648816108fa565b50565b6000546001600160a01b03163314610676576040516311a8a1bb60e31b815260040160405180910390fd5b62093a80600254426106889190612390565b116106a6576040516324e0285f60e21b815260040160405180910390fd5b6002546000036106c957604051630e4b303f60e21b815260040160405180910390fd5b6001546001600160a01b0316156106f3576040516323295ef960e01b815260040160405180910390fd5b6106fd600061090c565b565b6000546001600160a01b0316331461072a576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610748575060025415155b15610766576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b0380831691160361079457604051634a2fb73f60e11b815260040160405180910390fd5b61064881610971565b6001546001600160a01b031633146107c8576040516311a7f27160e11b815260040160405180910390fd5b62093a80600254426107da9190612390565b116107f8576040516324e0285f60e21b815260040160405180910390fd5b6001546106fd906001600160a01b031661090c565b6000805b92915050565b6000610822826109bf565b905061082d81610ca5565b5050565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b8051156108d85760405162461bcd60e51b815260206004820152600c60248201526b042c8c2e8c240d8cadccee8d60a31b604482015260640161051c565b61082d82610dc6565b6040516316c2fdb560e21b815260040160405180910390fd5b61090381610831565b61064881610e2f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b606060006109cc83610ebd565b905060006109d982610f1c565b905060006109e683610f45565b90506000816109f484610f6e565b6109fd86611124565b604051602001610a0f939291906123a3565b60408051601f1981840301815291815281516020928301206000818152600790935291205490915060ff1615610a935760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201526314d4d15160e21b606482015260840161051c565b6000818152600760205260408120805460ff19166001179055610ab585611140565b90506000610ac28261128a565b9050610acd8161131a565b6006546001600160a01b03908116911614610b385760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604482015264155393915360da1b606482015260840161051c565b6000610b4387611343565b9050610b63610b53846020015190565b87610b5d8a61135f565b8461137b565b610bbb5760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201526227a7a360e91b606482015260840161051c565b610be985610bc88961162e565b610bd18a61164a565b84610bdb8c611666565b610be48d611682565b61169e565b506000610bf5836117c4565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610c2b610c26836000611800565b611838565b14610c785760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604482015260640161051c565b6000610c83846118b2565b806020019051810190610c9691906123d0565b9b9a5050505050505050505050565b8051602014610ce05760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b604482015260640161051c565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016638e7d93fa7f0000000000000000000000000000000000000000000000000000000000000000610d3984612447565b6040516001600160e01b031960e085901b16815263ffffffff9290921660048301526024820152604401600060405180830381600087803b158015610d7d57600080fd5b505af1158015610d91573d6000803e3d6000fd5b505050507fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced8133604051610609929190612350565b6004805460065460405163b472047760e01b81526001600160a01b039283169363b472047793610dfa93169186910161246b565b600060405180830381600087803b158015610e1457600080fd5b505af1158015610e28573d6000803e3d6000fd5b5050505050565b6006546001600160a01b031615610e9b5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b606482015260840161051c565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6040805160208101909152606081526000610f07610f028460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6118ce565b60408051602081019091529081529392505050565b60606108118260000151600881518110610f3857610f3861248f565b60200260200101516119da565b60006108118260000151600281518110610f6157610f6161248f565b6020026020010151611838565b6040805160208101909152600081528151606091901561081157600080610f96600086611a77565b60f81c90506001811480610fad57508060ff166003145b1561105557600185516002610fc291906124a5565b610fcc9190612390565b67ffffffffffffffff811115610fe457610fe4612119565b6040519080825280601f01601f19166020018201604052801561100e576020820181803683370190505b509250600061101e600187611a77565b905080846000815181106110345761103461248f565b60200101906001600160f81b031916908160001a90535060019250506110b9565b60028551600261106591906124a5565b61106f9190612390565b67ffffffffffffffff81111561108757611087612119565b6040519080825280601f01601f1916602001820160405280156110b1576020820181803683370190505b509250600091505b825160ff83165b8181101561111a576110e96110d860ff861683612390565b6110e39060026124bc565b88611a77565b8582815181106110fb576110fb61248f565b60200101906001600160f81b031916908160001a9053506001016110c0565b5050505092915050565b60006108118260000151600981518110610f6157610f6161248f565b61116460405180606001604052806060815260200160608152602001600081525090565b61117e8260000151600681518110610f3857610f3861248f565b6020828101829052604080518082018252600080825290830152805180820190915282518152918101908201526111b481611af8565b156111c9576111c2816118ce565b8252611276565b602082015180516000906111df90600190612390565b67ffffffffffffffff8111156111f7576111f7612119565b6040519080825280601f01601f191660200182016040528015611221576020820181803683370190505b50905060008083602101915082602001905061123f82828551611b33565b60408051808201825260008082526020918201528151808301909252845182528085019082015261126f906118ce565b8652505050505b61127f83611124565b604083015250919050565b6040805160808101825260009181018281526060808301939093528152602081019190915260006112d883600001516003815181106112cb576112cb61248f565b60200260200101516118ce565b8360400151815181106112ed576112ed61248f565b602002602001015190506040518060400160405280828152602001611311836118ce565b90529392505050565b600061081182602001516000815181106113365761133661248f565b6020026020010151611bcc565b60006108118260000151600581518110610f6157610f6161248f565b60606108118260000151600781518110610f3857610f3861248f565b6000806113af8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006113bc826118ce565b9050606080856000806113ce8b610f6e565b905080516000036113e9576000975050505050505050611626565b855160005b8181101561161c5782518411156114115760009950505050505050505050611626565b6114338882815181106114265761142661248f565b6020026020010151611be6565b9650868051906020012085146114555760009950505050505050505050611626565b61146a8882815181106112cb576112cb61248f565b9550855160110361153f57825184036114cb578d8051906020012061149b87601081518110610f3857610f3861248f565b80519060200120036114b95760019950505050505050505050611626565b60009950505050505050505050611626565b60008385815181106114df576114df61248f565b016020015160f81c905060108111156115055760009a5050505050505050505050611626565b61152a878260ff168151811061151d5761151d61248f565b6020026020010151611c65565b95506115376001866124bc565b945050611614565b85516002036114b957600061156a61156388600081518110610f3857610f3861248f565b8587611c93565b845190915061157982876124bc565b036115ce578e8051906020012061159c88600181518110610f3857610f3861248f565b80519060200120036115bb5760019a5050505050505050505050611626565b60009a5050505050505050505050611626565b806000036115e95760009a5050505050505050505050611626565b6115f381866124bc565b945061160b8760018151811061151d5761151d61248f565b95506116149050565b6001016113ee565b5050505050505050505b949350505050565b60006108118260000151600381518110610f6157610f6161248f565b60006108118260000151600481518110610f6157610f6161248f565b60006108118260000151600081518110610f6157610f6161248f565b60606108118260000151600181518110610f3857610f3861248f565b6005546040516320a9cea560e11b8152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a060405180830381865afa1580156116f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171491906124cf565b509350509250925061176b828b61172b9190612390565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588611d97565b6117b75760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604482015260640161051c565b9998505050505050505050565b60408051602081019091526060815260405180602001604052806117f884602001516001815181106112cb576112cb61248f565b905292915050565b604080518082019091526000808252602082015282518051839081106118285761182861248f565b6020026020010151905092915050565b80516000901580159061184c575081516022115b61185557600080fd5b60006118648360200151611f09565b905060008184600001516118789190612390565b905060008083866020015161188d91906124bc565b90508051915060208310156118a957826020036101000a820491505b50949350505050565b60606108118260200151600281518110610f3857610f3861248f565b60606118d982611af8565b6118e257600080fd5b60006118ed83611f9d565b905060008167ffffffffffffffff81111561190a5761190a612119565b60405190808252806020026020018201604052801561194f57816020015b60408051808201909152600080825260208201528152602001906001900390816119285790505b50905060006119618560200151611f09565b856020015161197091906124bc565b90506000805b848110156119cf5761198783612022565b91506040518060400160405280838152602001848152508482815181106119b0576119b061248f565b60209081029190910101526119c582846124bc565b9250600101611976565b509195945050505050565b80516060906119e857600080fd5b60006119f78360200151611f09565b90506000818460000151611a0b9190612390565b905060008167ffffffffffffffff811115611a2857611a28612119565b6040519080825280601f01601f191660200182016040528015611a52576020820181803683370190505b50905060008160200190506118a9848760200151611a7091906124bc565b82856120c6565b6000611a84600284612532565b15611abe57601082611a97600286612546565b81518110611aa757611aa761248f565b0160200151611ab9919060f81c61255a565b611aee565b601082611acc600286612546565b81518110611adc57611adc61248f565b0160200151611aee919060f81c61257c565b60f81b9392505050565b80516000908103611b0b57506000919050565b6020820151805160001a9060c0821015611b29575060009392505050565b5060019392505050565b80600003611b4057505050565b611b4c6001602061259e565b60ff16811115611b865782518252611b656020846124bc565b9250611b726020836124bc565b9150611b7f602082612390565b9050611b40565b80600003611b9357505050565b60006001611ba2836020612390565b611bae9061010061269b565b611bb89190612390565b935183518516941916939093179091525050565b8051600090601514611bdd57600080fd5b61081182611838565b60606000826000015167ffffffffffffffff811115611c0757611c07612119565b6040519080825280601f01601f191660200182016040528015611c31576020820181803683370190505b5090508051600003611c435792915050565b6000816020019050611c5e84602001518286600001516120c6565b5092915050565b8051600090602114611c7657600080fd5b60008083602001516001611c8a91906124bc565b51949350505050565b60008080611ca086610f6e565b90506000815167ffffffffffffffff811115611cbe57611cbe612119565b6040519080825280601f01601f191660200182016040528015611ce8576020820181803683370190505b5090506000825186611cfa91906124bc565b9050855b81811015611d67576000888281518110611d1a57611d1a61248f565b01602001516001600160f81b03191690508084611d378a85612390565b81518110611d4757611d4761248f565b60200101906001600160f81b031916908160001a90535050600101611cfe565b508180519060200120838051906020012003611d865782519350611d8b565b600093505b50919695505050505050565b600060208251611da79190612532565b15611deb5760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015260640161051c565b600060208351611dfb9190612546565b9050611e0881600261269b565b8510611e4e5760405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b604482015260640161051c565b825160009087908290611e629060016124bc565b905060205b81811015611efa57868101519350611e8060028a612532565b600003611eb8576040805160208101859052908101859052606001604051602081830303815290604052805190602001209250611ee5565b60408051602081018690529081018490526060016040516020818303038152906040528051906020012092505b611ef060028a612546565b9850602001611e67565b50509094149695505050505050565b8051600090811a6080811015611f225750600092915050565b60b8811080611f495750611f38600160c061259e565b60ff1681118015611f49575060f881105b15611f575750600192915050565b60c0811015611f8b57611f6c600160b861259e565b611f799060ff1682612390565b611f849060016124bc565b9392505050565b611f6c600160f861259e565b50919050565b80516000908103611fb057506000919050565b600080611fc08460200151611f09565b8460200151611fcf91906124bc565b9050600084600001518560200151611fe791906124bc565b90505b8082101561201957611ffb82612022565b61200590836124bc565b915082612011816126a7565b935050611fea565b50909392505050565b80516000908190811a608081101561203d5760019150611c5e565b60b881101561206357612051608082612390565b61205c9060016124bc565b9150611c5e565b60c08110156120905760b78103600185019450806020036101000a85510460018201810193505050611c5e565b60f88110156120a45761205160c082612390565b60019390930151602084900360f7016101000a900490920160f5190192915050565b806000036120d357505050565b6120df6001602061259e565b60ff16811115611b8657825182526120f86020846124bc565b92506121056020836124bc565b9150612112602082612390565b90506120d3565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561215857612158612119565b604052919050565b600067ffffffffffffffff82111561217a5761217a612119565b50601f01601f191660200190565b600082601f83011261219957600080fd5b81356121ac6121a782612160565b61212f565b8181528460208386010111156121c157600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156121f157600080fd5b823567ffffffffffffffff8082111561220957600080fd5b61221586838701612188565b9350602085013591508082111561222b57600080fd5b5061223885828601612188565b9150509250929050565b60006020828403121561225457600080fd5b813567ffffffffffffffff81111561226b57600080fd5b61162684828501612188565b6001600160a01b038116811461064857600080fd5b60006020828403121561229e57600080fd5b8135611f8481612277565b6000602082840312156122bb57600080fd5b5035919050565b60005b838110156122dd5781810151838201526020016122c5565b50506000910152565b600081518084526122fe8160208601602086016122c2565b601f01601f19169290920160200192915050565b60608152600061232560608301866122e6565b828103602084015261233781866122e6565b91505060018060a01b0383166040830152949350505050565b60408152600061236360408301856122e6565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108115761081161237a565b838152600083516123bb8160208501602088016122c2565b60209201918201929092526040019392505050565b6000602082840312156123e257600080fd5b815167ffffffffffffffff8111156123f957600080fd5b8201601f8101841361240a57600080fd5b80516124186121a782612160565b81815285602083850101111561242d57600080fd5b61243e8260208301602086016122c2565b95945050505050565b80516020808301519190811015611f975760001960209190910360031b1b16919050565b6001600160a01b0383168152604060208201819052600090611626908301846122e6565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176108115761081161237a565b808201808211156108115761081161237a565b600080600080600060a086880312156124e757600080fd5b85519450602086015193506040860151925060608601519150608086015161250e81612277565b809150509295509295909350565b634e487b7160e01b600052601260045260246000fd5b6000826125415761254161251c565b500690565b6000826125555761255561251c565b500490565b600060ff83168061256d5761256d61251c565b8060ff84160691505092915050565b600060ff83168061258f5761258f61251c565b8060ff84160491505092915050565b60ff82811682821603908111156108115761081161237a565b600181815b808511156125f25781600019048211156125d8576125d861237a565b808516156125e557918102915b93841c93908002906125bc565b509250929050565b60008261260957506001610811565b8161261657506000610811565b816001811461262c576002811461263657612652565b6001915050610811565b60ff8411156126475761264761237a565b50506001821b610811565b5060208310610133831016604e8410600b8410161715612675575081810a610811565b61267f83836125b7565b80600019048211156126935761269361237a565b029392505050565b6000611f8483836125fa565b6000600182016126b9576126b961237a565b506001019056fea2646970667358221220be914e6f3dfeddf3d452269e093e5fe0dbea3f244152c7e04a21363d6d0e6e3764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c80638da5cb5b116100b6578063d1851c921161006f578063d1851c92146103e8578063d232c22014610406578063d69f9d6114610425578063db1b765914610459578063de9b771f14610479578063f953cec71461049957600080fd5b80638da5cb5b14610335578063972c492814610353578063b1f8100d14610373578063c0857ba014610393578063c5b350df146103b3578063cc394283146103c857600080fd5b806352a9674b1161010857806352a9674b1461022a5780635bd11efc1461025e5780635f61e3ec1461027e578063607f2d42146102ca5780636a42b8f81461030a578063715018a61461032057600080fd5b80630e387de61461015057806314168416146101975780633cf52ffb146101e057806348e6fa23146101f55780634ff746f61461020a57600080fd5b3661014b57005b600080fd5b34801561015c57600080fd5b506101847f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6040519081526020015b60405180910390f35b3480156101a357600080fd5b506101cb7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161018e565b3480156101ec57600080fd5b50600254610184565b6102086102033660046121de565b6104b9565b005b34801561021657600080fd5b50610208610225366004612242565b61056e565b34801561023657600080fd5b506101cb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561026a57600080fd5b5061020861027936600461228c565b610614565b34801561028a57600080fd5b506102b27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018e565b3480156102d657600080fd5b506102fa6102e53660046122a9565b60076020526000908152604090205460ff1681565b604051901515815260200161018e565b34801561031657600080fd5b5062093a80610184565b34801561032c57600080fd5b5061020861064b565b34801561034157600080fd5b506000546001600160a01b03166102b2565b34801561035f57600080fd5b506006546102b2906001600160a01b031681565b34801561037f57600080fd5b5061020861038e36600461228c565b6106ff565b34801561039f57600080fd5b506005546102b2906001600160a01b031681565b3480156103bf57600080fd5b5061020861079d565b3480156103d457600080fd5b506003546102b2906001600160a01b031681565b3480156103f457600080fd5b506001546001600160a01b03166102b2565b34801561041257600080fd5b506000546001600160a01b0316156102fa565b34801561043157600080fd5b506102b27f000000000000000000000000000000000000000000000000000000000000000081565b34801561046557600080fd5b506102fa61047436600461228c565b61080d565b34801561048557600080fd5b506004546102b2906001600160a01b031681565b3480156104a557600080fd5b506102086104b4366004612242565b610817565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105255760405162461bcd60e51b815260206004820152600c60248201526b10b937b7ba26b0b730b3b2b960a11b60448201526064015b60405180910390fd5b61052f828261089a565b7fdcaa37a042a0087de79018c629bbd29cee82ca80bd9be394e1696bf9e935507782823360405161056293929190612312565b60405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105cf5760405162461bcd60e51b815260040161051c9060208082526004908201526310a0a6a160e11b604082015260600190565b6105d8816108e1565b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced8133604051610609929190612350565b60405180910390a150565b6000546001600160a01b0316331461063f576040516311a8a1bb60e31b815260040160405180910390fd5b610648816108fa565b50565b6000546001600160a01b03163314610676576040516311a8a1bb60e31b815260040160405180910390fd5b62093a80600254426106889190612390565b116106a6576040516324e0285f60e21b815260040160405180910390fd5b6002546000036106c957604051630e4b303f60e21b815260040160405180910390fd5b6001546001600160a01b0316156106f3576040516323295ef960e01b815260040160405180910390fd5b6106fd600061090c565b565b6000546001600160a01b0316331461072a576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610748575060025415155b15610766576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b0380831691160361079457604051634a2fb73f60e11b815260040160405180910390fd5b61064881610971565b6001546001600160a01b031633146107c8576040516311a7f27160e11b815260040160405180910390fd5b62093a80600254426107da9190612390565b116107f8576040516324e0285f60e21b815260040160405180910390fd5b6001546106fd906001600160a01b031661090c565b6000805b92915050565b6000610822826109bf565b905061082d81610ca5565b5050565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b8051156108d85760405162461bcd60e51b815260206004820152600c60248201526b042c8c2e8c240d8cadccee8d60a31b604482015260640161051c565b61082d82610dc6565b6040516316c2fdb560e21b815260040160405180910390fd5b61090381610831565b61064881610e2f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b606060006109cc83610ebd565b905060006109d982610f1c565b905060006109e683610f45565b90506000816109f484610f6e565b6109fd86611124565b604051602001610a0f939291906123a3565b60408051601f1981840301815291815281516020928301206000818152600790935291205490915060ff1615610a935760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201526314d4d15160e21b606482015260840161051c565b6000818152600760205260408120805460ff19166001179055610ab585611140565b90506000610ac28261128a565b9050610acd8161131a565b6006546001600160a01b03908116911614610b385760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604482015264155393915360da1b606482015260840161051c565b6000610b4387611343565b9050610b63610b53846020015190565b87610b5d8a61135f565b8461137b565b610bbb5760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201526227a7a360e91b606482015260840161051c565b610be985610bc88961162e565b610bd18a61164a565b84610bdb8c611666565b610be48d611682565b61169e565b506000610bf5836117c4565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036610c2b610c26836000611800565b611838565b14610c785760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500604482015260640161051c565b6000610c83846118b2565b806020019051810190610c9691906123d0565b9b9a5050505050505050505050565b8051602014610ce05760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b604482015260640161051c565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016638e7d93fa7f0000000000000000000000000000000000000000000000000000000000000000610d3984612447565b6040516001600160e01b031960e085901b16815263ffffffff9290921660048301526024820152604401600060405180830381600087803b158015610d7d57600080fd5b505af1158015610d91573d6000803e3d6000fd5b505050507fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced8133604051610609929190612350565b6004805460065460405163b472047760e01b81526001600160a01b039283169363b472047793610dfa93169186910161246b565b600060405180830381600087803b158015610e1457600080fd5b505af1158015610e28573d6000803e3d6000fd5b5050505050565b6006546001600160a01b031615610e9b5760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b606482015260840161051c565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6040805160208101909152606081526000610f07610f028460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6118ce565b60408051602081019091529081529392505050565b60606108118260000151600881518110610f3857610f3861248f565b60200260200101516119da565b60006108118260000151600281518110610f6157610f6161248f565b6020026020010151611838565b6040805160208101909152600081528151606091901561081157600080610f96600086611a77565b60f81c90506001811480610fad57508060ff166003145b1561105557600185516002610fc291906124a5565b610fcc9190612390565b67ffffffffffffffff811115610fe457610fe4612119565b6040519080825280601f01601f19166020018201604052801561100e576020820181803683370190505b509250600061101e600187611a77565b905080846000815181106110345761103461248f565b60200101906001600160f81b031916908160001a90535060019250506110b9565b60028551600261106591906124a5565b61106f9190612390565b67ffffffffffffffff81111561108757611087612119565b6040519080825280601f01601f1916602001820160405280156110b1576020820181803683370190505b509250600091505b825160ff83165b8181101561111a576110e96110d860ff861683612390565b6110e39060026124bc565b88611a77565b8582815181106110fb576110fb61248f565b60200101906001600160f81b031916908160001a9053506001016110c0565b5050505092915050565b60006108118260000151600981518110610f6157610f6161248f565b61116460405180606001604052806060815260200160608152602001600081525090565b61117e8260000151600681518110610f3857610f3861248f565b6020828101829052604080518082018252600080825290830152805180820190915282518152918101908201526111b481611af8565b156111c9576111c2816118ce565b8252611276565b602082015180516000906111df90600190612390565b67ffffffffffffffff8111156111f7576111f7612119565b6040519080825280601f01601f191660200182016040528015611221576020820181803683370190505b50905060008083602101915082602001905061123f82828551611b33565b60408051808201825260008082526020918201528151808301909252845182528085019082015261126f906118ce565b8652505050505b61127f83611124565b604083015250919050565b6040805160808101825260009181018281526060808301939093528152602081019190915260006112d883600001516003815181106112cb576112cb61248f565b60200260200101516118ce565b8360400151815181106112ed576112ed61248f565b602002602001015190506040518060400160405280828152602001611311836118ce565b90529392505050565b600061081182602001516000815181106113365761133661248f565b6020026020010151611bcc565b60006108118260000151600581518110610f6157610f6161248f565b60606108118260000151600781518110610f3857610f3861248f565b6000806113af8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006113bc826118ce565b9050606080856000806113ce8b610f6e565b905080516000036113e9576000975050505050505050611626565b855160005b8181101561161c5782518411156114115760009950505050505050505050611626565b6114338882815181106114265761142661248f565b6020026020010151611be6565b9650868051906020012085146114555760009950505050505050505050611626565b61146a8882815181106112cb576112cb61248f565b9550855160110361153f57825184036114cb578d8051906020012061149b87601081518110610f3857610f3861248f565b80519060200120036114b95760019950505050505050505050611626565b60009950505050505050505050611626565b60008385815181106114df576114df61248f565b016020015160f81c905060108111156115055760009a5050505050505050505050611626565b61152a878260ff168151811061151d5761151d61248f565b6020026020010151611c65565b95506115376001866124bc565b945050611614565b85516002036114b957600061156a61156388600081518110610f3857610f3861248f565b8587611c93565b845190915061157982876124bc565b036115ce578e8051906020012061159c88600181518110610f3857610f3861248f565b80519060200120036115bb5760019a5050505050505050505050611626565b60009a5050505050505050505050611626565b806000036115e95760009a5050505050505050505050611626565b6115f381866124bc565b945061160b8760018151811061151d5761151d61248f565b95506116149050565b6001016113ee565b5050505050505050505b949350505050565b60006108118260000151600381518110610f6157610f6161248f565b60006108118260000151600481518110610f6157610f6161248f565b60006108118260000151600081518110610f6157610f6161248f565b60606108118260000151600181518110610f3857610f3861248f565b6005546040516320a9cea560e11b8152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a060405180830381865afa1580156116f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171491906124cf565b509350509250925061176b828b61172b9190612390565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588611d97565b6117b75760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000604482015260640161051c565b9998505050505050505050565b60408051602081019091526060815260405180602001604052806117f884602001516001815181106112cb576112cb61248f565b905292915050565b604080518082019091526000808252602082015282518051839081106118285761182861248f565b6020026020010151905092915050565b80516000901580159061184c575081516022115b61185557600080fd5b60006118648360200151611f09565b905060008184600001516118789190612390565b905060008083866020015161188d91906124bc565b90508051915060208310156118a957826020036101000a820491505b50949350505050565b60606108118260200151600281518110610f3857610f3861248f565b60606118d982611af8565b6118e257600080fd5b60006118ed83611f9d565b905060008167ffffffffffffffff81111561190a5761190a612119565b60405190808252806020026020018201604052801561194f57816020015b60408051808201909152600080825260208201528152602001906001900390816119285790505b50905060006119618560200151611f09565b856020015161197091906124bc565b90506000805b848110156119cf5761198783612022565b91506040518060400160405280838152602001848152508482815181106119b0576119b061248f565b60209081029190910101526119c582846124bc565b9250600101611976565b509195945050505050565b80516060906119e857600080fd5b60006119f78360200151611f09565b90506000818460000151611a0b9190612390565b905060008167ffffffffffffffff811115611a2857611a28612119565b6040519080825280601f01601f191660200182016040528015611a52576020820181803683370190505b50905060008160200190506118a9848760200151611a7091906124bc565b82856120c6565b6000611a84600284612532565b15611abe57601082611a97600286612546565b81518110611aa757611aa761248f565b0160200151611ab9919060f81c61255a565b611aee565b601082611acc600286612546565b81518110611adc57611adc61248f565b0160200151611aee919060f81c61257c565b60f81b9392505050565b80516000908103611b0b57506000919050565b6020820151805160001a9060c0821015611b29575060009392505050565b5060019392505050565b80600003611b4057505050565b611b4c6001602061259e565b60ff16811115611b865782518252611b656020846124bc565b9250611b726020836124bc565b9150611b7f602082612390565b9050611b40565b80600003611b9357505050565b60006001611ba2836020612390565b611bae9061010061269b565b611bb89190612390565b935183518516941916939093179091525050565b8051600090601514611bdd57600080fd5b61081182611838565b60606000826000015167ffffffffffffffff811115611c0757611c07612119565b6040519080825280601f01601f191660200182016040528015611c31576020820181803683370190505b5090508051600003611c435792915050565b6000816020019050611c5e84602001518286600001516120c6565b5092915050565b8051600090602114611c7657600080fd5b60008083602001516001611c8a91906124bc565b51949350505050565b60008080611ca086610f6e565b90506000815167ffffffffffffffff811115611cbe57611cbe612119565b6040519080825280601f01601f191660200182016040528015611ce8576020820181803683370190505b5090506000825186611cfa91906124bc565b9050855b81811015611d67576000888281518110611d1a57611d1a61248f565b01602001516001600160f81b03191690508084611d378a85612390565b81518110611d4757611d4761248f565b60200101906001600160f81b031916908160001a90535050600101611cfe565b508180519060200120838051906020012003611d865782519350611d8b565b600093505b50919695505050505050565b600060208251611da79190612532565b15611deb5760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b604482015260640161051c565b600060208351611dfb9190612546565b9050611e0881600261269b565b8510611e4e5760405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b604482015260640161051c565b825160009087908290611e629060016124bc565b905060205b81811015611efa57868101519350611e8060028a612532565b600003611eb8576040805160208101859052908101859052606001604051602081830303815290604052805190602001209250611ee5565b60408051602081018690529081018490526060016040516020818303038152906040528051906020012092505b611ef060028a612546565b9850602001611e67565b50509094149695505050505050565b8051600090811a6080811015611f225750600092915050565b60b8811080611f495750611f38600160c061259e565b60ff1681118015611f49575060f881105b15611f575750600192915050565b60c0811015611f8b57611f6c600160b861259e565b611f799060ff1682612390565b611f849060016124bc565b9392505050565b611f6c600160f861259e565b50919050565b80516000908103611fb057506000919050565b600080611fc08460200151611f09565b8460200151611fcf91906124bc565b9050600084600001518560200151611fe791906124bc565b90505b8082101561201957611ffb82612022565b61200590836124bc565b915082612011816126a7565b935050611fea565b50909392505050565b80516000908190811a608081101561203d5760019150611c5e565b60b881101561206357612051608082612390565b61205c9060016124bc565b9150611c5e565b60c08110156120905760b78103600185019450806020036101000a85510460018201810193505050611c5e565b60f88110156120a45761205160c082612390565b60019390930151602084900360f7016101000a900490920160f5190192915050565b806000036120d357505050565b6120df6001602061259e565b60ff16811115611b8657825182526120f86020846124bc565b92506121056020836124bc565b9150612112602082612390565b90506120d3565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561215857612158612119565b604052919050565b600067ffffffffffffffff82111561217a5761217a612119565b50601f01601f191660200190565b600082601f83011261219957600080fd5b81356121ac6121a782612160565b61212f565b8181528460208386010111156121c157600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156121f157600080fd5b823567ffffffffffffffff8082111561220957600080fd5b61221586838701612188565b9350602085013591508082111561222b57600080fd5b5061223885828601612188565b9150509250929050565b60006020828403121561225457600080fd5b813567ffffffffffffffff81111561226b57600080fd5b61162684828501612188565b6001600160a01b038116811461064857600080fd5b60006020828403121561229e57600080fd5b8135611f8481612277565b6000602082840312156122bb57600080fd5b5035919050565b60005b838110156122dd5781810151838201526020016122c5565b50506000910152565b600081518084526122fe8160208601602086016122c2565b601f01601f19169290920160200192915050565b60608152600061232560608301866122e6565b828103602084015261233781866122e6565b91505060018060a01b0383166040830152949350505050565b60408152600061236360408301856122e6565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108115761081161237a565b838152600083516123bb8160208501602088016122c2565b60209201918201929092526040019392505050565b6000602082840312156123e257600080fd5b815167ffffffffffffffff8111156123f957600080fd5b8201601f8101841361240a57600080fd5b80516124186121a782612160565b81815285602083850101111561242d57600080fd5b61243e8260208301602086016122c2565b95945050505050565b80516020808301519190811015611f975760001960209190910360031b1b16919050565b6001600160a01b0383168152604060208201819052600090611626908301846122e6565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176108115761081161237a565b808201808211156108115761081161237a565b600080600080600060a086880312156124e757600080fd5b85519450602086015193506040860151925060608601519150608086015161250e81612277565b809150509295509295909350565b634e487b7160e01b600052601260045260246000fd5b6000826125415761254161251c565b500690565b6000826125555761255561251c565b500490565b600060ff83168061256d5761256d61251c565b8060ff84160691505092915050565b600060ff83168061258f5761258f61251c565b8060ff84160491505092915050565b60ff82811682821603908111156108115761081161237a565b600181815b808511156125f25781600019048211156125d8576125d861237a565b808516156125e557918102915b93841c93908002906125bc565b509250929050565b60008261260957506001610811565b8161261657506000610811565b816001811461262c576002811461263657612652565b6001915050610811565b60ff8411156126475761264761237a565b50506001821b610811565b5060208310610133831016604e8410600b8410161715612675575081810a610811565b61267f83836125b7565b80600019048211156126935761269361237a565b029392505050565b6000611f8483836125fa565b6000600182016126b9576126b961237a565b506001019056fea2646970667358221220be914e6f3dfeddf3d452269e093e5fe0dbea3f244152c7e04a21363d6d0e6e3764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "processMessage(bytes)": {
        "details": "This is called by AMBs to process messages originating from mirror connector"
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "sendMessage(bytes,bytes)": {
        "details": "This is called by the root manager *only* on mainnet to propagate the aggregate root"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MessageProcessed(bytes,address)": {
        "notice": "Emitted whenever a message is successfully received over an AMB"
      },
      "MessageSent(bytes,bytes,address)": {
        "notice": "Emitted whenever a message is successfully sent over an AMB"
      }
    },
    "kind": "user",
    "methods": {
      "AMB()": {
        "notice": "Address of the AMB on this domain."
      },
      "DOMAIN()": {
        "notice": "The domain of this Messaging (i.e. Connector) contract."
      },
      "MIRROR_DOMAIN()": {
        "notice": "The domain of the corresponding messaging (i.e. Connector) contract."
      },
      "ROOT_MANAGER()": {
        "notice": "RootManager contract address."
      },
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "mirrorConnector()": {
        "notice": "Connector on L2 for L1 connectors, and vice versa."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "processMessage(bytes)": {
        "notice": "Processes a message received by an AMB"
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      },
      "renounceOwnership()": {
        "notice": "Renounces ownership of the contract after a delay"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "sendMessage(bytes,bytes)": {
        "notice": "Sends a message over the amb"
      },
      "setMirrorConnector(address)": {
        "notice": "Sets the address of the l2Connector for this domain"
      },
      "verifySender(address)": {
        "notice": "Checks the cross domain sender for a given address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19895,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19897,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "_proposed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 19899,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10008,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "mirrorConnector",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 18045,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "fxRoot",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IFxStateSender)17995"
      },
      {
        "astId": 18048,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICheckpointManager)18013"
      },
      {
        "astId": 18050,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 18054,
        "contract": "contracts/messaging/connectors/polygon/PolygonHubConnector.sol:PolygonHubConnector",
        "label": "processedExits",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)18013": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)17995": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}